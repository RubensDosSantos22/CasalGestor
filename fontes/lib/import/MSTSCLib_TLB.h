// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 98350 $
// File generated on 31/03/2022 15:13:37 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Windows\SysWOW64\mstscax.dll (1)
// LIBID: {8C11EFA1-92C3-11D1-BC1E-00C04FA31489}
// LCID: 0
// Helpfile: 
// HelpString: Microsoft Terminal Services Control Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   MSTSCLib_TLBH
#define   MSTSCLib_TLBH

#pragma option push -b -w-inl -w-8118
#pragma pack(push, 4)

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include <System.Win.StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Mstsclib_tlb
{

// *********************************************************************//
// HelpString: Microsoft Terminal Services Control Type Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_MSTSCLib;
extern __declspec (package) const GUID DIID_IMsTscAxEvents;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_mstsax_0000_0043_0001;
extern __declspec (package) const GUID GUID_AutoReconnectContinueState;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_mstsax_0000_0057_0001;
extern __declspec (package) const GUID GUID_RemoteProgramResult;
extern __declspec (package) const GUID GUID_wireHWND;
extern __declspec (package) const GUID GUID___MIDL_IWinTypes_0009;
extern __declspec (package) const GUID GUID__RemotableHandle;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_mstsax_0000_0057_0002;
extern __declspec (package) const GUID GUID_RemoteWindowDisplayedAttribute;
extern __declspec (package) const GUID IID_IMsTscAx_Redist;
extern __declspec (package) const GUID IID_IMsTscAx;
extern __declspec (package) const GUID IID_IMsRdpClient;
extern __declspec (package) const GUID IID_IMsTscNonScriptable;
extern __declspec (package) const GUID IID_IMsTscSecuredSettings;
extern __declspec (package) const GUID IID_IMsTscAdvancedSettings;
extern __declspec (package) const GUID IID_IMsTscDebug;
extern __declspec (package) const GUID IID_IMsRdpClientAdvancedSettings;
extern __declspec (package) const GUID IID_IMsRdpClientSecuredSettings;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_mstsax_0000_0000_0001;
extern __declspec (package) const GUID GUID_ExtendedDisconnectReasonCode;
extern __declspec (package) const GUID GUID___MIDL_IMsRdpClient_0001;
extern __declspec (package) const GUID GUID_ControlCloseStatus;
extern __declspec (package) const GUID IID_IMsRdpClientNonScriptable;
extern __declspec (package) const GUID CLSID_MsTscAxNotSafeForScripting;
extern __declspec (package) const GUID GUID_UINT_PTR;
extern __declspec (package) const GUID GUID_LONG_PTR;
extern __declspec (package) const GUID CLSID_MsTscAx;
extern __declspec (package) const GUID CLSID_MsRdpClientNotSafeForScripting;
extern __declspec (package) const GUID CLSID_MsRdpClient;
extern __declspec (package) const GUID IID_IMsRdpClient2;
extern __declspec (package) const GUID CLSID_MsRdpClient2NotSafeForScripting;
extern __declspec (package) const GUID IID_IMsRdpClientAdvancedSettings2;
extern __declspec (package) const GUID CLSID_MsRdpClient2;
extern __declspec (package) const GUID CLSID_MsRdpClient2a;
extern __declspec (package) const GUID IID_IMsRdpClient3;
extern __declspec (package) const GUID CLSID_MsRdpClient3NotSafeForScripting;
extern __declspec (package) const GUID IID_IMsRdpClientAdvancedSettings3;
extern __declspec (package) const GUID CLSID_MsRdpClient3;
extern __declspec (package) const GUID CLSID_MsRdpClient3a;
extern __declspec (package) const GUID IID_IMsRdpClient4;
extern __declspec (package) const GUID IID_IMsRdpClientNonScriptable2;
extern __declspec (package) const GUID IID_IMsRdpClientAdvancedSettings4;
extern __declspec (package) const GUID CLSID_MsRdpClient4NotSafeForScripting;
extern __declspec (package) const GUID CLSID_MsRdpClient4;
extern __declspec (package) const GUID CLSID_MsRdpClient4a;
extern __declspec (package) const GUID IID_IMsRdpClient5;
extern __declspec (package) const GUID IID_IMsRdpClientNonScriptable3;
extern __declspec (package) const GUID IID_IMsRdpClientTransportSettings;
extern __declspec (package) const GUID IID_IMsRdpClientAdvancedSettings5;
extern __declspec (package) const GUID IID_ITSRemoteProgram;
extern __declspec (package) const GUID IID_IMsRdpClientShell;
extern __declspec (package) const GUID CLSID_MsRdpClient5NotSafeForScripting;
extern __declspec (package) const GUID IID_IMsRdpDeviceCollection;
extern __declspec (package) const GUID IID_IMsRdpDevice;
extern __declspec (package) const GUID IID_IMsRdpDriveCollection;
extern __declspec (package) const GUID IID_IMsRdpDrive;
extern __declspec (package) const GUID CLSID_MsRdpClient5;
extern __declspec (package) const GUID IID_IMsRdpClient6;
extern __declspec (package) const GUID IID_IMsRdpClientNonScriptable4;
extern __declspec (package) const GUID IID_IMsRdpClientAdvancedSettings6;
extern __declspec (package) const GUID IID_IMsRdpClientTransportSettings2;
extern __declspec (package) const GUID CLSID_MsRdpClient6NotSafeForScripting;
extern __declspec (package) const GUID GUID___MIDL_IMsRdpClientNonScriptable4_0001;
extern __declspec (package) const GUID GUID_RedirectionWarningType;
extern __declspec (package) const GUID CLSID_MsRdpClient6;
extern __declspec (package) const GUID IID_IMsRdpClient7;
extern __declspec (package) const GUID IID_IMsRdpClientNonScriptable5;
extern __declspec (package) const GUID IID_IMsRdpClientAdvancedSettings7;
extern __declspec (package) const GUID IID_IMsRdpClientTransportSettings3;
extern __declspec (package) const GUID IID_IMsRdpClientSecuredSettings2;
extern __declspec (package) const GUID IID_ITSRemoteProgram2;
extern __declspec (package) const GUID IID_IMsRdpPreferredRedirectionInfo;
extern __declspec (package) const GUID IID_IMsRdpExtendedSettings;
extern __declspec (package) const GUID CLSID_MsRdpClient7NotSafeForScripting;
extern __declspec (package) const GUID CLSID_MsRdpClient7;
extern __declspec (package) const GUID IID_IMsRdpClient8;
extern __declspec (package) const GUID CLSID_MsRdpClient8NotSafeForScripting;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_mstsax_0000_0000_0004;
extern __declspec (package) const GUID GUID_RemoteSessionActionType;
extern __declspec (package) const GUID IID_IMsRdpClientAdvancedSettings8;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_mstsax_0000_0000_0003;
extern __declspec (package) const GUID GUID_ClientSpec;
extern __declspec (package) const GUID GUID___MIDL_IMsRdpClient8_0001;
extern __declspec (package) const GUID GUID_ControlReconnectStatus;
extern __declspec (package) const GUID CLSID_MsRdpClient8;
extern __declspec (package) const GUID IID_IMsRdpClient9;
extern __declspec (package) const GUID CLSID_MsRdpClient9NotSafeForScripting;
extern __declspec (package) const GUID IID_IMsRdpClientTransportSettings4;
extern __declspec (package) const GUID CLSID_MsRdpClient9;
extern __declspec (package) const GUID IID_IMsRdpClient10;
extern __declspec (package) const GUID CLSID_MsRdpClient10NotSafeForScripting;
extern __declspec (package) const GUID IID_ITSRemoteProgram3;
extern __declspec (package) const GUID CLSID_MsRdpClient10;
extern __declspec (package) const GUID IID_IMsRdpClientNonScriptable6;
extern __declspec (package) const GUID IID_IMsRdpClientNonScriptable7;
extern __declspec (package) const GUID CLSID_MsRdpClient11NotSafeForScripting;
extern __declspec (package) const GUID IID_IMsRdpCameraRedirConfigCollection;
extern __declspec (package) const GUID IID_IMsRdpCameraRedirConfig;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_mstsax_0000_0008_0001;
extern __declspec (package) const GUID GUID_CameraRedirEncodingQuality;
extern __declspec (package) const GUID IID_IMsRdpClipboard;
extern __declspec (package) const GUID CLSID_MsRdpClient11;
extern __declspec (package) const GUID DIID_IRemoteDesktopClientEvents;
extern __declspec (package) const GUID IID_IRemoteDesktopClient;
extern __declspec (package) const GUID CLSID_RemoteDesktopClient;
extern __declspec (package) const GUID IID_IRemoteDesktopClientSettings;
extern __declspec (package) const GUID IID_IRemoteDesktopClientActions;
extern __declspec (package) const GUID GUID___MIDL_IRemoteDesktopClientActions_0001;
extern __declspec (package) const GUID GUID_RemoteActionType;
extern __declspec (package) const GUID GUID___MIDL_IRemoteDesktopClientActions_0002;
extern __declspec (package) const GUID GUID_SnapshotEncodingType;
extern __declspec (package) const GUID GUID___MIDL_IRemoteDesktopClientActions_0003;
extern __declspec (package) const GUID GUID_SnapshotFormatType;
extern __declspec (package) const GUID IID_IRemoteDesktopClientTouchPointer;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum class    __MIDL___MIDL_itf_mstsax_0000_0043_0001;
enum class    __MIDL___MIDL_itf_mstsax_0000_0057_0001;
union     __MIDL_IWinTypes_0009;
struct    _RemotableHandle;
enum class    __MIDL___MIDL_itf_mstsax_0000_0057_0002;
enum class    __MIDL___MIDL_itf_mstsax_0000_0000_0001;
enum class    __MIDL_IMsRdpClient_0001;
enum class    __MIDL_IMsRdpClientNonScriptable4_0001;
enum class    __MIDL___MIDL_itf_mstsax_0000_0000_0004;
enum class    __MIDL___MIDL_itf_mstsax_0000_0000_0003;
enum class    __MIDL_IMsRdpClient8_0001;
enum class    __MIDL___MIDL_itf_mstsax_0000_0008_0001;
enum class    __MIDL_IRemoteDesktopClientActions_0001;
enum class    __MIDL_IRemoteDesktopClientActions_0002;
enum class    __MIDL_IRemoteDesktopClientActions_0003;
interface DECLSPEC_UUID("{336D5562-EFA8-482E-8CB3-C5C0FC7A7DB6}") IMsTscAxEvents;
typedef TComInterface<IMsTscAxEvents, &DIID_IMsTscAxEvents> IMsTscAxEventsPtr;

interface DECLSPEC_UUID("{327BB5CD-834E-4400-AEF2-B30E15E5D682}") IMsTscAx_Redist;
typedef TComInterface<IMsTscAx_Redist, &IID_IMsTscAx_Redist> IMsTscAx_RedistPtr;

interface DECLSPEC_UUID("{8C11EFAE-92C3-11D1-BC1E-00C04FA31489}") IMsTscAx;
typedef TComInterface<IMsTscAx, &IID_IMsTscAx> IMsTscAxPtr;

interface DECLSPEC_UUID("{92B4A539-7115-4B7C-A5A9-E5D9EFC2780A}") IMsRdpClient;
typedef TComInterface<IMsRdpClient, &IID_IMsRdpClient> IMsRdpClientPtr;

interface DECLSPEC_UUID("{C1E6743A-41C1-4A74-832A-0DD06C1C7A0E}") IMsTscNonScriptable;
typedef TComInterface<IMsTscNonScriptable, &IID_IMsTscNonScriptable> IMsTscNonScriptablePtr;

interface DECLSPEC_UUID("{C9D65442-A0F9-45B2-8F73-D61D2DB8CBB6}") IMsTscSecuredSettings;
typedef TComInterface<IMsTscSecuredSettings, &IID_IMsTscSecuredSettings> IMsTscSecuredSettingsPtr;

interface DECLSPEC_UUID("{809945CC-4B3B-4A92-A6B0-DBF9B5F2EF2D}") IMsTscAdvancedSettings;
typedef TComInterface<IMsTscAdvancedSettings, &IID_IMsTscAdvancedSettings> IMsTscAdvancedSettingsPtr;

interface DECLSPEC_UUID("{209D0EB9-6254-47B1-9033-A98DAE55BB27}") IMsTscDebug;
typedef TComInterface<IMsTscDebug, &IID_IMsTscDebug> IMsTscDebugPtr;

interface DECLSPEC_UUID("{3C65B4AB-12B3-465B-ACD4-B8DAD3BFF9E2}") IMsRdpClientAdvancedSettings;
typedef TComInterface<IMsRdpClientAdvancedSettings, &IID_IMsRdpClientAdvancedSettings> IMsRdpClientAdvancedSettingsPtr;

interface DECLSPEC_UUID("{605BEFCF-39C1-45CC-A811-068FB7BE346D}") IMsRdpClientSecuredSettings;
typedef TComInterface<IMsRdpClientSecuredSettings, &IID_IMsRdpClientSecuredSettings> IMsRdpClientSecuredSettingsPtr;

interface DECLSPEC_UUID("{2F079C4C-87B2-4AFD-97AB-20CDB43038AE}") IMsRdpClientNonScriptable;
typedef TComInterface<IMsRdpClientNonScriptable, &IID_IMsRdpClientNonScriptable> IMsRdpClientNonScriptablePtr;

interface DECLSPEC_UUID("{E7E17DC4-3B71-4BA7-A8E6-281FFADCA28F}") IMsRdpClient2;
typedef TComInterface<IMsRdpClient2, &IID_IMsRdpClient2> IMsRdpClient2Ptr;

interface DECLSPEC_UUID("{9AC42117-2B76-4320-AA44-0E616AB8437B}") IMsRdpClientAdvancedSettings2;
typedef TComInterface<IMsRdpClientAdvancedSettings2, &IID_IMsRdpClientAdvancedSettings2> IMsRdpClientAdvancedSettings2Ptr;

interface DECLSPEC_UUID("{91B7CBC5-A72E-4FA0-9300-D647D7E897FF}") IMsRdpClient3;
typedef TComInterface<IMsRdpClient3, &IID_IMsRdpClient3> IMsRdpClient3Ptr;

interface DECLSPEC_UUID("{19CD856B-C542-4C53-ACEE-F127E3BE1A59}") IMsRdpClientAdvancedSettings3;
typedef TComInterface<IMsRdpClientAdvancedSettings3, &IID_IMsRdpClientAdvancedSettings3> IMsRdpClientAdvancedSettings3Ptr;

interface DECLSPEC_UUID("{095E0738-D97D-488B-B9F6-DD0E8D66C0DE}") IMsRdpClient4;
typedef TComInterface<IMsRdpClient4, &IID_IMsRdpClient4> IMsRdpClient4Ptr;

interface DECLSPEC_UUID("{17A5E535-4072-4FA4-AF32-C8D0D47345E9}") IMsRdpClientNonScriptable2;
typedef TComInterface<IMsRdpClientNonScriptable2, &IID_IMsRdpClientNonScriptable2> IMsRdpClientNonScriptable2Ptr;

interface DECLSPEC_UUID("{FBA7F64E-7345-4405-AE50-FA4A763DC0DE}") IMsRdpClientAdvancedSettings4;
typedef TComInterface<IMsRdpClientAdvancedSettings4, &IID_IMsRdpClientAdvancedSettings4> IMsRdpClientAdvancedSettings4Ptr;

interface DECLSPEC_UUID("{4EB5335B-6429-477D-B922-E06A28ECD8BF}") IMsRdpClient5;
typedef TComInterface<IMsRdpClient5, &IID_IMsRdpClient5> IMsRdpClient5Ptr;

interface DECLSPEC_UUID("{B3378D90-0728-45C7-8ED7-B6159FB92219}") IMsRdpClientNonScriptable3;
typedef TComInterface<IMsRdpClientNonScriptable3, &IID_IMsRdpClientNonScriptable3> IMsRdpClientNonScriptable3Ptr;

interface DECLSPEC_UUID("{720298C0-A099-46F5-9F82-96921BAE4701}") IMsRdpClientTransportSettings;
typedef TComInterface<IMsRdpClientTransportSettings, &IID_IMsRdpClientTransportSettings> IMsRdpClientTransportSettingsPtr;

interface DECLSPEC_UUID("{FBA7F64E-6783-4405-DA45-FA4A763DABD0}") IMsRdpClientAdvancedSettings5;
typedef TComInterface<IMsRdpClientAdvancedSettings5, &IID_IMsRdpClientAdvancedSettings5> IMsRdpClientAdvancedSettings5Ptr;

interface DECLSPEC_UUID("{FDD029F9-467A-4C49-8529-64B521DBD1B4}") ITSRemoteProgram;
typedef TComInterface<ITSRemoteProgram, &IID_ITSRemoteProgram> ITSRemoteProgramPtr;

interface DECLSPEC_UUID("{D012AE6D-C19A-4BFE-B367-201F8911F134}") IMsRdpClientShell;
typedef TComInterface<IMsRdpClientShell, &IID_IMsRdpClientShell> IMsRdpClientShellPtr;

interface DECLSPEC_UUID("{56540617-D281-488C-8738-6A8FDF64A118}") IMsRdpDeviceCollection;
typedef TComInterface<IMsRdpDeviceCollection, &IID_IMsRdpDeviceCollection> IMsRdpDeviceCollectionPtr;

interface DECLSPEC_UUID("{60C3B9C8-9E92-4F5E-A3E7-604A912093EA}") IMsRdpDevice;
typedef TComInterface<IMsRdpDevice, &IID_IMsRdpDevice> IMsRdpDevicePtr;

interface DECLSPEC_UUID("{7FF17599-DA2C-4677-AD35-F60C04FE1585}") IMsRdpDriveCollection;
typedef TComInterface<IMsRdpDriveCollection, &IID_IMsRdpDriveCollection> IMsRdpDriveCollectionPtr;

interface DECLSPEC_UUID("{D28B5458-F694-47A8-8E61-40356A767E46}") IMsRdpDrive;
typedef TComInterface<IMsRdpDrive, &IID_IMsRdpDrive> IMsRdpDrivePtr;

interface DECLSPEC_UUID("{D43B7D80-8517-4B6D-9EAC-96AD6800D7F2}") IMsRdpClient6;
typedef TComInterface<IMsRdpClient6, &IID_IMsRdpClient6> IMsRdpClient6Ptr;

interface DECLSPEC_UUID("{F50FA8AA-1C7D-4F59-B15C-A90CACAE1FCB}") IMsRdpClientNonScriptable4;
typedef TComInterface<IMsRdpClientNonScriptable4, &IID_IMsRdpClientNonScriptable4> IMsRdpClientNonScriptable4Ptr;

interface DECLSPEC_UUID("{222C4B5D-45D9-4DF0-A7C6-60CF9089D285}") IMsRdpClientAdvancedSettings6;
typedef TComInterface<IMsRdpClientAdvancedSettings6, &IID_IMsRdpClientAdvancedSettings6> IMsRdpClientAdvancedSettings6Ptr;

interface DECLSPEC_UUID("{67341688-D606-4C73-A5D2-2E0489009319}") IMsRdpClientTransportSettings2;
typedef TComInterface<IMsRdpClientTransportSettings2, &IID_IMsRdpClientTransportSettings2> IMsRdpClientTransportSettings2Ptr;

interface DECLSPEC_UUID("{B2A5B5CE-3461-444A-91D4-ADD26D070638}") IMsRdpClient7;
typedef TComInterface<IMsRdpClient7, &IID_IMsRdpClient7> IMsRdpClient7Ptr;

interface DECLSPEC_UUID("{4F6996D5-D7B1-412C-B0FF-063718566907}") IMsRdpClientNonScriptable5;
typedef TComInterface<IMsRdpClientNonScriptable5, &IID_IMsRdpClientNonScriptable5> IMsRdpClientNonScriptable5Ptr;

interface DECLSPEC_UUID("{26036036-4010-4578-8091-0DB9A1EDF9C3}") IMsRdpClientAdvancedSettings7;
typedef TComInterface<IMsRdpClientAdvancedSettings7, &IID_IMsRdpClientAdvancedSettings7> IMsRdpClientAdvancedSettings7Ptr;

interface DECLSPEC_UUID("{3D5B21AC-748D-41DE-8F30-E15169586BD4}") IMsRdpClientTransportSettings3;
typedef TComInterface<IMsRdpClientTransportSettings3, &IID_IMsRdpClientTransportSettings3> IMsRdpClientTransportSettings3Ptr;

interface DECLSPEC_UUID("{25F2CE20-8B1D-4971-A7CD-549DAE201FC0}") IMsRdpClientSecuredSettings2;
typedef TComInterface<IMsRdpClientSecuredSettings2, &IID_IMsRdpClientSecuredSettings2> IMsRdpClientSecuredSettings2Ptr;

interface DECLSPEC_UUID("{92C38A7D-241A-418C-9936-099872C9AF20}") ITSRemoteProgram2;
typedef TComInterface<ITSRemoteProgram2, &IID_ITSRemoteProgram2> ITSRemoteProgram2Ptr;

interface DECLSPEC_UUID("{FDD029F9-9574-4DEF-8529-64B521CCCAA4}") IMsRdpPreferredRedirectionInfo;
typedef TComInterface<IMsRdpPreferredRedirectionInfo, &IID_IMsRdpPreferredRedirectionInfo> IMsRdpPreferredRedirectionInfoPtr;

interface DECLSPEC_UUID("{302D8188-0052-4807-806A-362B628F9AC5}") IMsRdpExtendedSettings;
typedef TComInterface<IMsRdpExtendedSettings, &IID_IMsRdpExtendedSettings> IMsRdpExtendedSettingsPtr;

interface DECLSPEC_UUID("{4247E044-9271-43A9-BC49-E2AD9E855D62}") IMsRdpClient8;
typedef TComInterface<IMsRdpClient8, &IID_IMsRdpClient8> IMsRdpClient8Ptr;

interface DECLSPEC_UUID("{89ACB528-2557-4D16-8625-226A30E97E9A}") IMsRdpClientAdvancedSettings8;
typedef TComInterface<IMsRdpClientAdvancedSettings8, &IID_IMsRdpClientAdvancedSettings8> IMsRdpClientAdvancedSettings8Ptr;

interface DECLSPEC_UUID("{28904001-04B6-436C-A55B-0AF1A0883DC9}") IMsRdpClient9;
typedef TComInterface<IMsRdpClient9, &IID_IMsRdpClient9> IMsRdpClient9Ptr;

interface DECLSPEC_UUID("{011C3236-4D81-4515-9143-067AB630D299}") IMsRdpClientTransportSettings4;
typedef TComInterface<IMsRdpClientTransportSettings4, &IID_IMsRdpClientTransportSettings4> IMsRdpClientTransportSettings4Ptr;

interface DECLSPEC_UUID("{7ED92C39-EB38-4927-A70A-708AC5A59321}") IMsRdpClient10;
typedef TComInterface<IMsRdpClient10, &IID_IMsRdpClient10> IMsRdpClient10Ptr;

interface DECLSPEC_UUID("{4B84EA77-ACEA-418C-881A-4A8C28AB1510}") ITSRemoteProgram3;
typedef TComInterface<ITSRemoteProgram3, &IID_ITSRemoteProgram3> ITSRemoteProgram3Ptr;

interface DECLSPEC_UUID("{05293249-B28B-4BD8-BE64-1B2F496B910E}") IMsRdpClientNonScriptable6;
typedef TComInterface<IMsRdpClientNonScriptable6, &IID_IMsRdpClientNonScriptable6> IMsRdpClientNonScriptable6Ptr;

interface DECLSPEC_UUID("{71B4A60A-FE21-46D8-A39B-8E32BA0C5ECC}") IMsRdpClientNonScriptable7;
typedef TComInterface<IMsRdpClientNonScriptable7, &IID_IMsRdpClientNonScriptable7> IMsRdpClientNonScriptable7Ptr;

interface DECLSPEC_UUID("{AE45252B-AAAB-4504-B681-649D6073A37A}") IMsRdpCameraRedirConfigCollection;
typedef TComInterface<IMsRdpCameraRedirConfigCollection, &IID_IMsRdpCameraRedirConfigCollection> IMsRdpCameraRedirConfigCollectionPtr;

interface DECLSPEC_UUID("{09750604-D625-47C1-9FCD-F09F735705D7}") IMsRdpCameraRedirConfig;
typedef TComInterface<IMsRdpCameraRedirConfig, &IID_IMsRdpCameraRedirConfig> IMsRdpCameraRedirConfigPtr;

interface DECLSPEC_UUID("{2E769EE8-00C7-43DC-AFD9-235D75B72A40}") IMsRdpClipboard;
typedef TComInterface<IMsRdpClipboard, &IID_IMsRdpClipboard> IMsRdpClipboardPtr;

interface DECLSPEC_UUID("{079863B7-6D47-4105-8BFE-0CDCB360E67D}") IRemoteDesktopClientEvents;
typedef TComInterface<IRemoteDesktopClientEvents, &DIID_IRemoteDesktopClientEvents> IRemoteDesktopClientEventsPtr;

interface DECLSPEC_UUID("{57D25668-625A-4905-BE4E-304CAA13F89C}") IRemoteDesktopClient;
typedef TComInterface<IRemoteDesktopClient, &IID_IRemoteDesktopClient> IRemoteDesktopClientPtr;

interface DECLSPEC_UUID("{48A0F2A7-2713-431F-BBAC-6F4558E7D64D}") IRemoteDesktopClientSettings;
typedef TComInterface<IRemoteDesktopClientSettings, &IID_IRemoteDesktopClientSettings> IRemoteDesktopClientSettingsPtr;

interface DECLSPEC_UUID("{7D54BC4E-1028-45D4-8B0A-B9B6BFFBA176}") IRemoteDesktopClientActions;
typedef TComInterface<IRemoteDesktopClientActions, &IID_IRemoteDesktopClientActions> IRemoteDesktopClientActionsPtr;

interface DECLSPEC_UUID("{260EC22D-8CBC-44B5-9E88-2A37F6C93AE9}") IRemoteDesktopClientTouchPointer;
typedef TComInterface<IRemoteDesktopClientTouchPointer, &IID_IRemoteDesktopClientTouchPointer> IRemoteDesktopClientTouchPointerPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IMsTscAx MsTscAxNotSafeForScripting;
typedef IMsTscAxPtr MsTscAxNotSafeForScriptingPtr;
typedef IMsTscAx MsTscAx;
typedef IMsTscAxPtr MsTscAxPtr;
typedef IMsRdpClient MsRdpClientNotSafeForScripting;
typedef IMsRdpClientPtr MsRdpClientNotSafeForScriptingPtr;
typedef IMsRdpClient MsRdpClient;
typedef IMsRdpClientPtr MsRdpClientPtr;
typedef IMsRdpClient2 MsRdpClient2NotSafeForScripting;
typedef IMsRdpClient2Ptr MsRdpClient2NotSafeForScriptingPtr;
typedef IMsRdpClient2 MsRdpClient2;
typedef IMsRdpClient2Ptr MsRdpClient2Ptr;
typedef IMsRdpClient2 MsRdpClient2a;
typedef IMsRdpClient2Ptr MsRdpClient2aPtr;
typedef IMsRdpClient3 MsRdpClient3NotSafeForScripting;
typedef IMsRdpClient3Ptr MsRdpClient3NotSafeForScriptingPtr;
typedef IMsRdpClient3 MsRdpClient3;
typedef IMsRdpClient3Ptr MsRdpClient3Ptr;
typedef IMsRdpClient3 MsRdpClient3a;
typedef IMsRdpClient3Ptr MsRdpClient3aPtr;
typedef IMsRdpClient4 MsRdpClient4NotSafeForScripting;
typedef IMsRdpClient4Ptr MsRdpClient4NotSafeForScriptingPtr;
typedef IMsRdpClient4 MsRdpClient4;
typedef IMsRdpClient4Ptr MsRdpClient4Ptr;
typedef IMsRdpClient4 MsRdpClient4a;
typedef IMsRdpClient4Ptr MsRdpClient4aPtr;
typedef IMsRdpClient5 MsRdpClient5NotSafeForScripting;
typedef IMsRdpClient5Ptr MsRdpClient5NotSafeForScriptingPtr;
typedef IMsRdpClient5 MsRdpClient5;
typedef IMsRdpClient5Ptr MsRdpClient5Ptr;
typedef IMsRdpClient6 MsRdpClient6NotSafeForScripting;
typedef IMsRdpClient6Ptr MsRdpClient6NotSafeForScriptingPtr;
typedef IMsRdpClient6 MsRdpClient6;
typedef IMsRdpClient6Ptr MsRdpClient6Ptr;
typedef IMsRdpClient7 MsRdpClient7NotSafeForScripting;
typedef IMsRdpClient7Ptr MsRdpClient7NotSafeForScriptingPtr;
typedef IMsRdpClient7 MsRdpClient7;
typedef IMsRdpClient7Ptr MsRdpClient7Ptr;
typedef IMsRdpClient8 MsRdpClient8NotSafeForScripting;
typedef IMsRdpClient8Ptr MsRdpClient8NotSafeForScriptingPtr;
typedef IMsRdpClient8 MsRdpClient8;
typedef IMsRdpClient8Ptr MsRdpClient8Ptr;
typedef IMsRdpClient9 MsRdpClient9NotSafeForScripting;
typedef IMsRdpClient9Ptr MsRdpClient9NotSafeForScriptingPtr;
typedef IMsRdpClient9 MsRdpClient9;
typedef IMsRdpClient9Ptr MsRdpClient9Ptr;
typedef IMsRdpClient10 MsRdpClient10NotSafeForScripting;
typedef IMsRdpClient10Ptr MsRdpClient10NotSafeForScriptingPtr;
typedef IMsRdpClient10 MsRdpClient10;
typedef IMsRdpClient10Ptr MsRdpClient10Ptr;
typedef IMsRdpClient10 MsRdpClient11NotSafeForScripting;
typedef IMsRdpClient10Ptr MsRdpClient11NotSafeForScriptingPtr;
typedef IMsRdpClient10 MsRdpClient11;
typedef IMsRdpClient10Ptr MsRdpClient11Ptr;
typedef IRemoteDesktopClient RemoteDesktopClient;
typedef IRemoteDesktopClientPtr RemoteDesktopClientPtr;

#define LIBID_OF_MsTscAxNotSafeForScripting (&LIBID_MSTSCLib)
#define LIBID_OF_MsTscAx (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClientNotSafeForScripting (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient2NotSafeForScripting (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient2 (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient2a (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient3NotSafeForScripting (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient3 (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient3a (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient4NotSafeForScripting (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient4 (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient4a (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient5NotSafeForScripting (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient5 (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient6NotSafeForScripting (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient6 (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient7NotSafeForScripting (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient7 (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient8NotSafeForScripting (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient8 (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient9NotSafeForScripting (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient9 (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient10NotSafeForScripting (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient10 (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient11NotSafeForScripting (&LIBID_MSTSCLib)
#define LIBID_OF_MsRdpClient11 (&LIBID_MSTSCLib)
#define LIBID_OF_RemoteDesktopClient (&LIBID_MSTSCLib)

// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef Mstsclib_tlb::__MIDL___MIDL_itf_mstsax_0000_0043_0001 AutoReconnectContinueState;
typedef Mstsclib_tlb::__MIDL___MIDL_itf_mstsax_0000_0057_0001 RemoteProgramResult;
typedef Mstsclib_tlb::_RemotableHandle* wireHWND;
typedef Mstsclib_tlb::__MIDL___MIDL_itf_mstsax_0000_0057_0002 RemoteWindowDisplayedAttribute;
typedef Mstsclib_tlb::__MIDL___MIDL_itf_mstsax_0000_0000_0001 ExtendedDisconnectReasonCode;
typedef Mstsclib_tlb::__MIDL_IMsRdpClient_0001 ControlCloseStatus;
typedef unsigned_long UINT_PTR;
typedef long LONG_PTR;
typedef Mstsclib_tlb::__MIDL_IMsRdpClientNonScriptable4_0001 RedirectionWarningType;
typedef Mstsclib_tlb::__MIDL___MIDL_itf_mstsax_0000_0000_0004 RemoteSessionActionType;
typedef Mstsclib_tlb::__MIDL___MIDL_itf_mstsax_0000_0000_0003 ClientSpec;
typedef Mstsclib_tlb::__MIDL_IMsRdpClient8_0001 ControlReconnectStatus;
typedef Mstsclib_tlb::__MIDL___MIDL_itf_mstsax_0000_0008_0001 CameraRedirEncodingQuality;
typedef Mstsclib_tlb::__MIDL_IRemoteDesktopClientActions_0001 RemoteActionType;
typedef Mstsclib_tlb::__MIDL_IRemoteDesktopClientActions_0002 SnapshotEncodingType;
typedef Mstsclib_tlb::__MIDL_IRemoteDesktopClientActions_0003 SnapshotFormatType;

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
enum class __MIDL___MIDL_itf_mstsax_0000_0043_0001
{
  autoReconnectContinueAutomatic = 0, 
  autoReconnectContinueStop = 1, 
  autoReconnectContinueManual = 2
};

enum class __MIDL___MIDL_itf_mstsax_0000_0057_0001
{
  remoteAppResultOk = 0, 
  remoteAppResultLocked = 1, 
  remoteAppResultProtocolError = 2, 
  remoteAppResultNotInWhitelist = 3, 
  remoteAppResultNetworkPathDenied = 4, 
  remoteAppResultFileNotFound = 5, 
  remoteAppResultFailure = 6, 
  remoteAppResultHookNotLoaded = 7
};

enum class __MIDL___MIDL_itf_mstsax_0000_0057_0002
{
  remoteAppWindowNone = 0, 
  remoteAppWindowDisplayed = 1, 
  remoteAppShellIconDisplayed = 2
};

enum class __MIDL___MIDL_itf_mstsax_0000_0000_0001
{
  exDiscReasonNoInfo = 0, 
  exDiscReasonAPIInitiatedDisconnect = 1, 
  exDiscReasonAPIInitiatedLogoff = 2, 
  exDiscReasonServerIdleTimeout = 3, 
  exDiscReasonServerLogonTimeout = 4, 
  exDiscReasonReplacedByOtherConnection = 5, 
  exDiscReasonOutOfMemory = 6, 
  exDiscReasonServerDeniedConnection = 7, 
  exDiscReasonServerDeniedConnectionFips = 8, 
  exDiscReasonServerInsufficientPrivileges = 9, 
  exDiscReasonServerFreshCredsRequired = 10, 
  exDiscReasonRpcInitiatedDisconnectByUser = 11, 
  exDiscReasonLogoffByUser = 12, 
  exDiscReasonLicenseInternal = 256, 
  exDiscReasonLicenseNoLicenseServer = 257, 
  exDiscReasonLicenseNoLicense = 258, 
  exDiscReasonLicenseErrClientMsg = 259, 
  exDiscReasonLicenseHwidDoesntMatchLicense = 260, 
  exDiscReasonLicenseErrClientLicense = 261, 
  exDiscReasonLicenseCantFinishProtocol = 262, 
  exDiscReasonLicenseClientEndedProtocol = 263, 
  exDiscReasonLicenseErrClientEncryption = 264, 
  exDiscReasonLicenseCantUpgradeLicense = 265, 
  exDiscReasonLicenseNoRemoteConnections = 266, 
  exDiscReasonLicenseCreatingLicStoreAccDenied = 267, 
  exDiscReasonRdpEncInvalidCredentials = 768, 
  exDiscReasonProtocolRangeStart = 4096, 
  exDiscReasonProtocolRangeEnd = 32767
};

enum class __MIDL_IMsRdpClient_0001
{
  controlCloseCanProceed = 0, 
  controlCloseWaitForEvents = 1
};

enum class __MIDL_IMsRdpClientNonScriptable4_0001
{
  RedirectionWarningTypeDefault = 0, 
  RedirectionWarningTypeUnsigned = 1, 
  RedirectionWarningTypeUnknown = 2, 
  RedirectionWarningTypeUser = 3, 
  RedirectionWarningTypeThirdPartySigned = 4, 
  RedirectionWarningTypeTrusted = 5, 
  RedirectionWarningTypeMax = 5
};

enum class __MIDL___MIDL_itf_mstsax_0000_0000_0004
{
  RemoteSessionActionCharms = 0, 
  RemoteSessionActionAppbar = 1, 
  RemoteSessionActionSnap = 2, 
  RemoteSessionActionStartScreen = 3, 
  RemoteSessionActionAppSwitch = 4, 
  RemoteSessionActionActionCenter = 5
};

enum class __MIDL___MIDL_itf_mstsax_0000_0000_0003
{
  FullMode = 0, 
  ThinClientMode = 1, 
  SmallCacheMode = 2
};

enum class __MIDL_IMsRdpClient8_0001
{
  controlReconnectStarted = 0, 
  controlReconnectBlocked = 1
};

enum class __MIDL___MIDL_itf_mstsax_0000_0008_0001
{
  encodingQualityLow = 0, 
  encodingQualityMedium = 1, 
  encodingQualityHigh = 2
};

enum class __MIDL_IRemoteDesktopClientActions_0001
{
  RemoteActionCharms = 0, 
  RemoteActionAppbar = 1, 
  RemoteActionSnap = 2, 
  RemoteActionStartScreen = 3, 
  RemoteActionAppSwitch = 4
};

enum class __MIDL_IRemoteDesktopClientActions_0002
{
  SnapshotEncodingDataUri = 0
};

enum class __MIDL_IRemoteDesktopClientActions_0003
{
  SnapshotFormatPng = 0, 
  SnapshotFormatJpeg = 1, 
  SnapshotFormatBmp = 2
};


// *********************************************************************//
// Declaration of Structures and Unions defined in Type Library           
// *********************************************************************//
union  __MIDL_IWinTypes_0009
{
  long hInproc;
  long hRemote;
};

struct _RemotableHandle
{
  long fContext;
  Mstsclib_tlb::__MIDL_IWinTypes_0009 u;
};

// *********************************************************************//
// Interface: IMsTscAxEvents
// Flags:     (4096) Dispatchable
// GUID:      {336D5562-EFA8-482E-8CB3-C5C0FC7A7DB6}
// *********************************************************************//
interface IMsTscAxEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnConnecting()
  {
    _TDispID _dispid(/* OnConnecting */ DISPID(1));
    OleProcedure(_dispid);
  }

  void __fastcall OnConnected()
  {
    _TDispID _dispid(/* OnConnected */ DISPID(2));
    OleProcedure(_dispid);
  }

  void __fastcall OnLoginComplete()
  {
    _TDispID _dispid(/* OnLoginComplete */ DISPID(3));
    OleProcedure(_dispid);
  }

  void __fastcall OnDisconnected(long discReason/*[in]*/)
  {
    _TDispID _dispid(/* OnDisconnected */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = discReason /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnEnterFullScreenMode()
  {
    _TDispID _dispid(/* OnEnterFullScreenMode */ DISPID(5));
    OleProcedure(_dispid);
  }

  void __fastcall OnLeaveFullScreenMode()
  {
    _TDispID _dispid(/* OnLeaveFullScreenMode */ DISPID(6));
    OleProcedure(_dispid);
  }

  void __fastcall OnChannelReceivedData(BSTR chanName/*[in]*/, BSTR data/*[in]*/)
  {
    _TDispID _dispid(/* OnChannelReceivedData */ DISPID(7));
    TAutoArgs<2> _args;
    _args[1] = chanName /*[VT_BSTR:0]*/;
    _args[2] = data /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnRequestGoFullScreen()
  {
    _TDispID _dispid(/* OnRequestGoFullScreen */ DISPID(8));
    OleProcedure(_dispid);
  }

  void __fastcall OnRequestLeaveFullScreen()
  {
    _TDispID _dispid(/* OnRequestLeaveFullScreen */ DISPID(9));
    OleProcedure(_dispid);
  }

  void __fastcall OnFatalError(long errorCode/*[in]*/)
  {
    _TDispID _dispid(/* OnFatalError */ DISPID(10));
    TAutoArgs<1> _args;
    _args[1] = errorCode /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnWarning(long warningCode/*[in]*/)
  {
    _TDispID _dispid(/* OnWarning */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = warningCode /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnRemoteDesktopSizeChange(long width/*[in]*/, long height/*[in]*/)
  {
    _TDispID _dispid(/* OnRemoteDesktopSizeChange */ DISPID(12));
    TAutoArgs<2> _args;
    _args[1] = width /*[VT_I4:0]*/;
    _args[2] = height /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnIdleTimeoutNotification()
  {
    _TDispID _dispid(/* OnIdleTimeoutNotification */ DISPID(13));
    OleProcedure(_dispid);
  }

  void __fastcall OnRequestContainerMinimize()
  {
    _TDispID _dispid(/* OnRequestContainerMinimize */ DISPID(14));
    OleProcedure(_dispid);
  }

  void __fastcall OnConfirmClose(VARIANT_BOOL* pfAllowClose/*[out,retval]*/)
  {
    _TDispID _dispid(/* OnConfirmClose */ DISPID(15));
    TAutoArgs<0> _args;
     OutRetValSetterPtr(pfAllowClose /*[VT_BOOL:1]*/, _args, OleProcedure(_dispid, _args));
  }

  VARIANT_BOOL __fastcall OnConfirmClose(void)
  {
    VARIANT_BOOL pfAllowClose;
    this->OnConfirmClose((VARIANT_BOOL*)&pfAllowClose);
    return pfAllowClose;
  }

  void __fastcall OnReceivedTSPublicKey(BSTR publicKey/*[in]*/, 
                                        VARIANT_BOOL* pfContinueLogon/*[out,retval]*/)
  {
    _TDispID _dispid(/* OnReceivedTSPublicKey */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = publicKey /*[VT_BSTR:0]*/;
     OutRetValSetterPtr(pfContinueLogon /*[VT_BOOL:1]*/, _args, OleProcedure(_dispid, _args));
  }

  VARIANT_BOOL __fastcall OnReceivedTSPublicKey(BSTR publicKey/*[in]*/)
  {
    VARIANT_BOOL pfContinueLogon;
    this->OnReceivedTSPublicKey(publicKey, (VARIANT_BOOL*)&pfContinueLogon);
    return pfContinueLogon;
  }

  void __fastcall OnAutoReconnecting(long disconnectReason/*[in]*/, long attemptCount/*[in]*/, 
                                     Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus/*[out,retval]*/)
  {
    _TDispID _dispid(/* OnAutoReconnecting */ DISPID(17));
    TAutoArgs<2> _args;
    _args[1] = disconnectReason /*[VT_I4:0]*/;
    _args[2] = attemptCount /*[VT_I4:0]*/;
     OutRetValSetterPtr((int*)pArcContinueStatus /*[VT_USERDEFINED:1]*/, _args, OleProcedure(_dispid, _args));
  }

  Mstsclib_tlb::AutoReconnectContinueState __fastcall OnAutoReconnecting(long disconnectReason/*[in]*/, 
                                                                         long attemptCount/*[in]*/)
  {
    Mstsclib_tlb::AutoReconnectContinueState pArcContinueStatus;
    this->OnAutoReconnecting(disconnectReason, attemptCount, (Mstsclib_tlb::AutoReconnectContinueState*)&pArcContinueStatus);
    return pArcContinueStatus;
  }

  void __fastcall OnAuthenticationWarningDisplayed()
  {
    _TDispID _dispid(/* OnAuthenticationWarningDisplayed */ DISPID(18));
    OleProcedure(_dispid);
  }

  void __fastcall OnAuthenticationWarningDismissed()
  {
    _TDispID _dispid(/* OnAuthenticationWarningDismissed */ DISPID(19));
    OleProcedure(_dispid);
  }

  void __fastcall OnRemoteProgramResult(BSTR bstrRemoteProgram/*[in]*/, 
                                        Mstsclib_tlb::RemoteProgramResult lError/*[in]*/, 
                                        VARIANT_BOOL vbIsExecutable/*[in]*/)
  {
    _TDispID _dispid(/* OnRemoteProgramResult */ DISPID(20));
    TAutoArgs<3> _args;
    _args[1] = bstrRemoteProgram /*[VT_BSTR:0]*/;
    _args[2] = (int)lError /*[VT_USERDEFINED:0]*/;
    _args[3] = vbIsExecutable /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed/*[in]*/, 
                                           unsigned_long uDisplayInformation/*[in]*/)
  {
    _TDispID _dispid(/* OnRemoteProgramDisplayed */ DISPID(21));
    TAutoArgs<2> _args;
    _args[1] = vbDisplayed /*[VT_BOOL:0]*/;
    _args[2] = uDisplayInformation /*[VT_UI4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed/*[in]*/, 
                                          /*AUTO_PARAM_ERROR(Mstsclib_tlb::wireHWND hwnd)*/ VARIANT  hwnd
                                          , 
                                          Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute/*[in]*/)
  {
    _TDispID _dispid(/* OnRemoteWindowDisplayed */ DISPID(29));
    TAutoArgs<3> _args;
    _args[1] = vbDisplayed /*[VT_BOOL:0]*/;
    _args[2] = hwnd;
    _args[3] = (int)windowAttribute /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnLogonError(long lError/*[in]*/)
  {
    _TDispID _dispid(/* OnLogonError */ DISPID(22));
    TAutoArgs<1> _args;
    _args[1] = lError /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnFocusReleased(int iDirection/*[in]*/)
  {
    _TDispID _dispid(/* OnFocusReleased */ DISPID(23));
    TAutoArgs<1> _args;
    _args[1] = iDirection /*[VT_INT:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnUserNameAcquired(BSTR bstrUserName/*[in]*/)
  {
    _TDispID _dispid(/* OnUserNameAcquired */ DISPID(24));
    TAutoArgs<1> _args;
    _args[1] = bstrUserName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseInputModeChanged */ DISPID(26));
    TAutoArgs<1> _args;
    _args[1] = fMouseModeRelative /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnServiceMessageReceived(BSTR serviceMessage/*[in]*/)
  {
    _TDispID _dispid(/* OnServiceMessageReceived */ DISPID(28));
    TAutoArgs<1> _args;
    _args[1] = serviceMessage /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnConnectionBarPullDown()
  {
    _TDispID _dispid(/* OnConnectionBarPullDown */ DISPID(30));
    OleProcedure(_dispid);
  }

  void __fastcall OnNetworkStatusChanged(unsigned_long qualityLevel/*[in]*/, long bandwidth/*[in]*/
                                         , long rtt/*[in]*/)
  {
    _TDispID _dispid(/* OnNetworkStatusChanged */ DISPID(32));
    TAutoArgs<3> _args;
    _args[1] = qualityLevel /*[VT_UI4:0]*/;
    _args[2] = bandwidth /*[VT_I4:0]*/;
    _args[3] = rtt /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDevicesButtonPressed()
  {
    _TDispID _dispid(/* OnDevicesButtonPressed */ DISPID(35));
    OleProcedure(_dispid);
  }

  void __fastcall OnAutoReconnected()
  {
    _TDispID _dispid(/* OnAutoReconnected */ DISPID(33));
    OleProcedure(_dispid);
  }

  void __fastcall OnAutoReconnecting2(long disconnectReason/*[in]*/, 
                                      VARIANT_BOOL networkAvailable/*[in]*/, 
                                      long attemptCount/*[in]*/, long maxAttemptCount/*[in]*/)
  {
    _TDispID _dispid(/* OnAutoReconnecting2 */ DISPID(34));
    TAutoArgs<4> _args;
    _args[1] = disconnectReason /*[VT_I4:0]*/;
    _args[2] = networkAvailable /*[VT_BOOL:0]*/;
    _args[3] = attemptCount /*[VT_I4:0]*/;
    _args[4] = maxAttemptCount /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IMsTscAx_Redist
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {327BB5CD-834E-4400-AEF2-B30E15E5D682}
// *********************************************************************//
interface IMsTscAx_Redist  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsTscAx
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8C11EFAE-92C3-11D1-BC1E-00C04FA31489}
// *********************************************************************//
interface IMsTscAx  : public Mstsclib_tlb::IMsTscAx_Redist
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Server(BSTR pServer/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Server(BSTR* pServer/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_Domain(BSTR pDomain/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Domain(BSTR* pDomain/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_UserName(BSTR pUserName/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_UserName(BSTR* pUserName/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_DisconnectedText(BSTR pDisconnectedText/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectingText(BSTR pConnectingText/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_Connected(short* pIsConnected/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_DesktopWidth(long pVal/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_DesktopWidth(long* pVal/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_DesktopHeight(long pVal/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_DesktopHeight(long* pVal/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_StartConnected(long pfStartConnected/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_StartConnected(long* pfStartConnected/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_FullScreenTitle(BSTR Param1/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_CipherStrength(long* pCipherStrength/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_Version(BSTR* pVersion/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/) = 0; // [97]
  virtual HRESULT STDMETHODCALLTYPE get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/) = 0; // [98]
  virtual HRESULT STDMETHODCALLTYPE get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/) = 0; // [99]
  virtual HRESULT STDMETHODCALLTYPE Connect(void) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE Disconnect(void) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE CreateVirtualChannels(BSTR newVal/*[in]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE SendOnVirtualChannel(BSTR chanName/*[in]*/, 
                                                         BSTR ChanData/*[in]*/) = 0; // [34]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Server(void)
  {
    BSTR pServer = 0;
    OLECHECK(this->get_Server((BSTR*)&pServer));
    return pServer;
  }

  BSTR __fastcall get_Domain(void)
  {
    BSTR pDomain = 0;
    OLECHECK(this->get_Domain((BSTR*)&pDomain));
    return pDomain;
  }

  BSTR __fastcall get_UserName(void)
  {
    BSTR pUserName = 0;
    OLECHECK(this->get_UserName((BSTR*)&pUserName));
    return pUserName;
  }

  BSTR __fastcall get_DisconnectedText(void)
  {
    BSTR pDisconnectedText = 0;
    OLECHECK(this->get_DisconnectedText((BSTR*)&pDisconnectedText));
    return pDisconnectedText;
  }

  BSTR __fastcall get_ConnectingText(void)
  {
    BSTR pConnectingText = 0;
    OLECHECK(this->get_ConnectingText((BSTR*)&pConnectingText));
    return pConnectingText;
  }

  short __fastcall get_Connected(void)
  {
    short pIsConnected;
    OLECHECK(this->get_Connected((short*)&pIsConnected));
    return pIsConnected;
  }

  long __fastcall get_DesktopWidth(void)
  {
    long pVal;
    OLECHECK(this->get_DesktopWidth((long*)&pVal));
    return pVal;
  }

  long __fastcall get_DesktopHeight(void)
  {
    long pVal;
    OLECHECK(this->get_DesktopHeight((long*)&pVal));
    return pVal;
  }

  long __fastcall get_StartConnected(void)
  {
    long pfStartConnected;
    OLECHECK(this->get_StartConnected((long*)&pfStartConnected));
    return pfStartConnected;
  }

  long __fastcall get_HorizontalScrollBarVisible(void)
  {
    long pfHScrollVisible;
    OLECHECK(this->get_HorizontalScrollBarVisible((long*)&pfHScrollVisible));
    return pfHScrollVisible;
  }

  long __fastcall get_VerticalScrollBarVisible(void)
  {
    long pfVScrollVisible;
    OLECHECK(this->get_VerticalScrollBarVisible((long*)&pfVScrollVisible));
    return pfVScrollVisible;
  }

  long __fastcall get_CipherStrength(void)
  {
    long pCipherStrength;
    OLECHECK(this->get_CipherStrength((long*)&pCipherStrength));
    return pCipherStrength;
  }

  BSTR __fastcall get_Version(void)
  {
    BSTR pVersion = 0;
    OLECHECK(this->get_Version((BSTR*)&pVersion));
    return pVersion;
  }

  long __fastcall get_SecuredSettingsEnabled(void)
  {
    long pSecuredSettingsEnabled;
    OLECHECK(this->get_SecuredSettingsEnabled((long*)&pSecuredSettingsEnabled));
    return pSecuredSettingsEnabled;
  }

  Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall get_SecuredSettings(void)
  {
    Mstsclib_tlb::IMsTscSecuredSettingsPtr ppSecuredSettings;
    OLECHECK(this->get_SecuredSettings(&ppSecuredSettings));
    return ppSecuredSettings;
  }

  Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall get_AdvancedSettings(void)
  {
    Mstsclib_tlb::IMsTscAdvancedSettingsPtr ppAdvSettings;
    OLECHECK(this->get_AdvancedSettings(&ppAdvSettings));
    return ppAdvSettings;
  }

  Mstsclib_tlb::IMsTscDebugPtr __fastcall get_Debugger(void)
  {
    Mstsclib_tlb::IMsTscDebugPtr ppDebugger;
    OLECHECK(this->get_Debugger(&ppDebugger));
    return ppDebugger;
  }


  __property   BSTR            Server = {read = get_Server, write = set_Server};
  __property   BSTR            Domain = {read = get_Domain, write = set_Domain};
  __property   BSTR            UserName = {read = get_UserName, write = set_UserName};
  __property   BSTR            DisconnectedText = {read = get_DisconnectedText, write = set_DisconnectedText};
  __property   BSTR            ConnectingText = {read = get_ConnectingText, write = set_ConnectingText};
  __property   short           Connected = {read = get_Connected};
  __property   long            DesktopWidth = {read = get_DesktopWidth, write = set_DesktopWidth};
  __property   long            DesktopHeight = {read = get_DesktopHeight, write = set_DesktopHeight};
  __property   long            StartConnected = {read = get_StartConnected, write = set_StartConnected};
  __property   long            HorizontalScrollBarVisible = {read = get_HorizontalScrollBarVisible};
  __property   long            VerticalScrollBarVisible = {read = get_VerticalScrollBarVisible};
  __property   BSTR            FullScreenTitle = {write = set_FullScreenTitle};
  __property   long            CipherStrength = {read = get_CipherStrength};
  __property   BSTR            Version = {read = get_Version};
  __property   long            SecuredSettingsEnabled = {read = get_SecuredSettingsEnabled};
  __property   Mstsclib_tlb::IMsTscSecuredSettingsPtr SecuredSettings = {read = get_SecuredSettings};
  __property   Mstsclib_tlb::IMsTscAdvancedSettingsPtr AdvancedSettings = {read = get_AdvancedSettings};
  __property   Mstsclib_tlb::IMsTscDebugPtr Debugger = {read = get_Debugger};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClient
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {92B4A539-7115-4B7C-A5A9-E5D9EFC2780A}
// *********************************************************************//
interface IMsRdpClient  : public Mstsclib_tlb::IMsTscAx
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_ColorDepth(long pcolorDepth/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_ColorDepth(long* pcolorDepth/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE SetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                             long chanOptions/*[in]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                             long* pChanOptions/*[out,retval]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/) = 0; // [37]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_ColorDepth(void)
  {
    long pcolorDepth;
    OLECHECK(this->get_ColorDepth((long*)&pcolorDepth));
    return pcolorDepth;
  }

  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall get_AdvancedSettings2(void)
  {
    Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr ppAdvSettings;
    OLECHECK(this->get_AdvancedSettings2(&ppAdvSettings));
    return ppAdvSettings;
  }

  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall get_SecuredSettings2(void)
  {
    Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr ppSecuredSettings;
    OLECHECK(this->get_SecuredSettings2(&ppSecuredSettings));
    return ppSecuredSettings;
  }

  Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall get_ExtendedDisconnectReason(void)
  {
    Mstsclib_tlb::ExtendedDisconnectReasonCode pExtendedDisconnectReason;
    OLECHECK(this->get_ExtendedDisconnectReason((Mstsclib_tlb::ExtendedDisconnectReasonCode*)&pExtendedDisconnectReason));
    return pExtendedDisconnectReason;
  }

  VARIANT_BOOL __fastcall get_FullScreen(void)
  {
    VARIANT_BOOL pfFullScreen;
    OLECHECK(this->get_FullScreen((VARIANT_BOOL*)&pfFullScreen));
    return pfFullScreen;
  }

  long __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/)
  {
    long pChanOptions;
    OLECHECK(this->GetVirtualChannelOptions(chanName, (long*)&pChanOptions));
    return pChanOptions;
  }

  Mstsclib_tlb::ControlCloseStatus __fastcall RequestClose(void)
  {
    Mstsclib_tlb::ControlCloseStatus pCloseStatus;
    OLECHECK(this->RequestClose((Mstsclib_tlb::ControlCloseStatus*)&pCloseStatus));
    return pCloseStatus;
  }


  __property   long            ColorDepth = {read = get_ColorDepth, write = set_ColorDepth};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr AdvancedSettings2 = {read = get_AdvancedSettings2};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr SecuredSettings2 = {read = get_SecuredSettings2};
  __property   Mstsclib_tlb::ExtendedDisconnectReasonCode ExtendedDisconnectReason = {read = get_ExtendedDisconnectReason};
  __property   VARIANT_BOOL    FullScreen = {read = get_FullScreen, write = set_FullScreen};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsTscNonScriptable
// Flags:     (0)
// GUID:      {C1E6743A-41C1-4A74-832A-0DD06C1C7A0E}
// *********************************************************************//
interface IMsTscNonScriptable  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_ClearTextPassword(BSTR Param1/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_PortablePassword(BSTR pPortablePass/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_PortablePassword(BSTR* pPortablePass/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_PortableSalt(BSTR pPortableSalt/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_PortableSalt(BSTR* pPortableSalt/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_BinaryPassword(BSTR pBinaryPassword/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BinaryPassword(BSTR* pBinaryPassword/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_BinarySalt(BSTR pSalt/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_BinarySalt(BSTR* pSalt/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE ResetPassword(void) = 0; // [10]
};

// *********************************************************************//
// Interface: IMsTscSecuredSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C9D65442-A0F9-45B2-8F73-D61D2DB8CBB6}
// *********************************************************************//
interface IMsTscSecuredSettings  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_StartProgram(BSTR pStartProgram/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_StartProgram(BSTR* pStartProgram/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_WorkDir(BSTR pWorkDir/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_WorkDir(BSTR* pWorkDir/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_FullScreen(long pfFullScreen/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_FullScreen(long* pfFullScreen/*[out,retval]*/) = 0; // [3]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_StartProgram(void)
  {
    BSTR pStartProgram = 0;
    OLECHECK(this->get_StartProgram((BSTR*)&pStartProgram));
    return pStartProgram;
  }

  BSTR __fastcall get_WorkDir(void)
  {
    BSTR pWorkDir = 0;
    OLECHECK(this->get_WorkDir((BSTR*)&pWorkDir));
    return pWorkDir;
  }

  long __fastcall get_FullScreen(void)
  {
    long pfFullScreen;
    OLECHECK(this->get_FullScreen((long*)&pfFullScreen));
    return pfFullScreen;
  }


  __property   BSTR            StartProgram = {read = get_StartProgram, write = set_StartProgram};
  __property   BSTR            WorkDir = {read = get_WorkDir, write = set_WorkDir};
  __property   long            FullScreen = {read = get_FullScreen, write = set_FullScreen};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsTscAdvancedSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {809945CC-4B3B-4A92-A6B0-DBF9B5F2EF2D}
// *********************************************************************//
interface IMsTscAdvancedSettings  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Compress(long pcompress/*[in]*/) = 0; // [121]
  virtual HRESULT STDMETHODCALLTYPE get_Compress(long* pcompress/*[out,retval]*/) = 0; // [121]
  virtual HRESULT STDMETHODCALLTYPE set_BitmapPeristence(long pbitmapPeristence/*[in]*/) = 0; // [122]
  virtual HRESULT STDMETHODCALLTYPE get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/) = 0; // [122]
  virtual HRESULT STDMETHODCALLTYPE set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/) = 0; // [161]
  virtual HRESULT STDMETHODCALLTYPE get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/) = 0; // [161]
  virtual HRESULT STDMETHODCALLTYPE set_KeyBoardLayoutStr(BSTR Param1/*[in]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE set_PluginDlls(BSTR Param1/*[in]*/) = 0; // [170]
  virtual HRESULT STDMETHODCALLTYPE set_IconFile(BSTR Param1/*[in]*/) = 0; // [171]
  virtual HRESULT STDMETHODCALLTYPE set_IconIndex(long Param1/*[in]*/) = 0; // [172]
  virtual HRESULT STDMETHODCALLTYPE set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/) = 0; // [173]
  virtual HRESULT STDMETHODCALLTYPE get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/) = 0; // [173]
  virtual HRESULT STDMETHODCALLTYPE set_DisableRdpdr(long pDisableRdpdr/*[in]*/) = 0; // [174]
  virtual HRESULT STDMETHODCALLTYPE get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/) = 0; // [174]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Compress(void)
  {
    long pcompress;
    OLECHECK(this->get_Compress((long*)&pcompress));
    return pcompress;
  }

  long __fastcall get_BitmapPeristence(void)
  {
    long pbitmapPeristence;
    OLECHECK(this->get_BitmapPeristence((long*)&pbitmapPeristence));
    return pbitmapPeristence;
  }

  long __fastcall get_allowBackgroundInput(void)
  {
    long pallowBackgroundInput;
    OLECHECK(this->get_allowBackgroundInput((long*)&pallowBackgroundInput));
    return pallowBackgroundInput;
  }

  long __fastcall get_ContainerHandledFullScreen(void)
  {
    long pContainerHandledFullScreen;
    OLECHECK(this->get_ContainerHandledFullScreen((long*)&pContainerHandledFullScreen));
    return pContainerHandledFullScreen;
  }

  long __fastcall get_DisableRdpdr(void)
  {
    long pDisableRdpdr;
    OLECHECK(this->get_DisableRdpdr((long*)&pDisableRdpdr));
    return pDisableRdpdr;
  }


  __property   long            Compress = {read = get_Compress, write = set_Compress};
  __property   long            BitmapPeristence = {read = get_BitmapPeristence, write = set_BitmapPeristence};
  __property   long            allowBackgroundInput = {read = get_allowBackgroundInput, write = set_allowBackgroundInput};
  __property   BSTR            KeyBoardLayoutStr = {write = set_KeyBoardLayoutStr};
  __property   BSTR            PluginDlls = {write = set_PluginDlls};
  __property   BSTR            IconFile = {write = set_IconFile};
  __property   long            IconIndex = {write = set_IconIndex};
  __property   long            ContainerHandledFullScreen = {read = get_ContainerHandledFullScreen, write = set_ContainerHandledFullScreen};
  __property   long            DisableRdpdr = {read = get_DisableRdpdr, write = set_DisableRdpdr};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsTscDebug
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {209D0EB9-6254-47B1-9033-A98DAE55BB27}
// *********************************************************************//
interface IMsTscDebug  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_HatchBitmapPDU(long phatchBitmapPDU/*[in]*/) = 0; // [200]
  virtual HRESULT STDMETHODCALLTYPE get_HatchBitmapPDU(long* phatchBitmapPDU/*[out,retval]*/) = 0; // [200]
  virtual HRESULT STDMETHODCALLTYPE set_HatchSSBOrder(long phatchSSBOrder/*[in]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_HatchSSBOrder(long* phatchSSBOrder/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_HatchMembltOrder(long phatchMembltOrder/*[in]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_HatchMembltOrder(long* phatchMembltOrder/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE set_HatchIndexPDU(long phatchIndexPDU/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_HatchIndexPDU(long* phatchIndexPDU/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_LabelMemblt(long plabelMemblt/*[in]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE get_LabelMemblt(long* plabelMemblt/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE set_BitmapCacheMonitor(long pbitmapCacheMonitor/*[in]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE get_BitmapCacheMonitor(long* pbitmapCacheMonitor/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE set_MallocFailuresPercent(long pmallocFailuresPercent/*[in]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE get_MallocFailuresPercent(long* pmallocFailuresPercent/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE set_MallocHugeFailuresPercent(long pmallocHugeFailuresPercent/*[in]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE get_MallocHugeFailuresPercent(long* pmallocHugeFailuresPercent/*[out,retval]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE set_NetThroughput(long NetThroughput/*[in]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE get_NetThroughput(long* NetThroughput/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE set_CLXCmdLine(BSTR pCLXCmdLine/*[in]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE get_CLXCmdLine(BSTR* pCLXCmdLine/*[out,retval]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE set_CLXDll(BSTR pCLXDll/*[in]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE get_CLXDll(BSTR* pCLXDll/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE set_RemoteProgramsHatchVisibleRegion(long pcbHatch/*[in]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE get_RemoteProgramsHatchVisibleRegion(long* pcbHatch/*[out,retval]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE set_RemoteProgramsHatchVisibleNoDataRegion(long pcbHatch/*[in]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE get_RemoteProgramsHatchVisibleNoDataRegion(long* pcbHatch/*[out,retval]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE set_RemoteProgramsHatchNonVisibleRegion(long pcbHatch/*[in]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE get_RemoteProgramsHatchNonVisibleRegion(long* pcbHatch/*[out,retval]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE set_RemoteProgramsHatchWindow(long pcbHatch/*[in]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE get_RemoteProgramsHatchWindow(long* pcbHatch/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE set_RemoteProgramsStayConnectOnBadCaps(long pcbStayConnected/*[in]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE get_RemoteProgramsStayConnectOnBadCaps(long* pcbStayConnected/*[out,retval]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned* pControlType/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE set_DecodeGfx(VARIANT_BOOL Param1/*[in]*/) = 0; // [217]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_HatchBitmapPDU(void)
  {
    long phatchBitmapPDU;
    OLECHECK(this->get_HatchBitmapPDU((long*)&phatchBitmapPDU));
    return phatchBitmapPDU;
  }

  long __fastcall get_HatchSSBOrder(void)
  {
    long phatchSSBOrder;
    OLECHECK(this->get_HatchSSBOrder((long*)&phatchSSBOrder));
    return phatchSSBOrder;
  }

  long __fastcall get_HatchMembltOrder(void)
  {
    long phatchMembltOrder;
    OLECHECK(this->get_HatchMembltOrder((long*)&phatchMembltOrder));
    return phatchMembltOrder;
  }

  long __fastcall get_HatchIndexPDU(void)
  {
    long phatchIndexPDU;
    OLECHECK(this->get_HatchIndexPDU((long*)&phatchIndexPDU));
    return phatchIndexPDU;
  }

  long __fastcall get_LabelMemblt(void)
  {
    long plabelMemblt;
    OLECHECK(this->get_LabelMemblt((long*)&plabelMemblt));
    return plabelMemblt;
  }

  long __fastcall get_BitmapCacheMonitor(void)
  {
    long pbitmapCacheMonitor;
    OLECHECK(this->get_BitmapCacheMonitor((long*)&pbitmapCacheMonitor));
    return pbitmapCacheMonitor;
  }

  long __fastcall get_MallocFailuresPercent(void)
  {
    long pmallocFailuresPercent;
    OLECHECK(this->get_MallocFailuresPercent((long*)&pmallocFailuresPercent));
    return pmallocFailuresPercent;
  }

  long __fastcall get_MallocHugeFailuresPercent(void)
  {
    long pmallocHugeFailuresPercent;
    OLECHECK(this->get_MallocHugeFailuresPercent((long*)&pmallocHugeFailuresPercent));
    return pmallocHugeFailuresPercent;
  }

  long __fastcall get_NetThroughput(void)
  {
    long NetThroughput;
    OLECHECK(this->get_NetThroughput((long*)&NetThroughput));
    return NetThroughput;
  }

  BSTR __fastcall get_CLXCmdLine(void)
  {
    BSTR pCLXCmdLine = 0;
    OLECHECK(this->get_CLXCmdLine((BSTR*)&pCLXCmdLine));
    return pCLXCmdLine;
  }

  BSTR __fastcall get_CLXDll(void)
  {
    BSTR pCLXDll = 0;
    OLECHECK(this->get_CLXDll((BSTR*)&pCLXDll));
    return pCLXDll;
  }

  long __fastcall get_RemoteProgramsHatchVisibleRegion(void)
  {
    long pcbHatch;
    OLECHECK(this->get_RemoteProgramsHatchVisibleRegion((long*)&pcbHatch));
    return pcbHatch;
  }

  long __fastcall get_RemoteProgramsHatchVisibleNoDataRegion(void)
  {
    long pcbHatch;
    OLECHECK(this->get_RemoteProgramsHatchVisibleNoDataRegion((long*)&pcbHatch));
    return pcbHatch;
  }

  long __fastcall get_RemoteProgramsHatchNonVisibleRegion(void)
  {
    long pcbHatch;
    OLECHECK(this->get_RemoteProgramsHatchNonVisibleRegion((long*)&pcbHatch));
    return pcbHatch;
  }

  long __fastcall get_RemoteProgramsHatchWindow(void)
  {
    long pcbHatch;
    OLECHECK(this->get_RemoteProgramsHatchWindow((long*)&pcbHatch));
    return pcbHatch;
  }

  long __fastcall get_RemoteProgramsStayConnectOnBadCaps(void)
  {
    long pcbStayConnected;
    OLECHECK(this->get_RemoteProgramsStayConnectOnBadCaps((long*)&pcbStayConnected));
    return pcbStayConnected;
  }

  unsigned __fastcall get_ControlType(void)
  {
    unsigned pControlType;
    OLECHECK(this->get_ControlType((unsigned*)&pControlType));
    return pControlType;
  }


  __property   long            HatchBitmapPDU = {read = get_HatchBitmapPDU, write = set_HatchBitmapPDU};
  __property   long            HatchSSBOrder = {read = get_HatchSSBOrder, write = set_HatchSSBOrder};
  __property   long            HatchMembltOrder = {read = get_HatchMembltOrder, write = set_HatchMembltOrder};
  __property   long            HatchIndexPDU = {read = get_HatchIndexPDU, write = set_HatchIndexPDU};
  __property   long            LabelMemblt = {read = get_LabelMemblt, write = set_LabelMemblt};
  __property   long            BitmapCacheMonitor = {read = get_BitmapCacheMonitor, write = set_BitmapCacheMonitor};
  __property   long            MallocFailuresPercent = {read = get_MallocFailuresPercent, write = set_MallocFailuresPercent};
  __property   long            MallocHugeFailuresPercent = {read = get_MallocHugeFailuresPercent, write = set_MallocHugeFailuresPercent};
  __property   long            NetThroughput = {read = get_NetThroughput, write = set_NetThroughput};
  __property   BSTR            CLXCmdLine = {read = get_CLXCmdLine, write = set_CLXCmdLine};
  __property   BSTR            CLXDll = {read = get_CLXDll, write = set_CLXDll};
  __property   long            RemoteProgramsHatchVisibleRegion = {read = get_RemoteProgramsHatchVisibleRegion, write = set_RemoteProgramsHatchVisibleRegion};
  __property   long            RemoteProgramsHatchVisibleNoDataRegion = {read = get_RemoteProgramsHatchVisibleNoDataRegion, write = set_RemoteProgramsHatchVisibleNoDataRegion};
  __property   long            RemoteProgramsHatchNonVisibleRegion = {read = get_RemoteProgramsHatchNonVisibleRegion, write = set_RemoteProgramsHatchNonVisibleRegion};
  __property   long            RemoteProgramsHatchWindow = {read = get_RemoteProgramsHatchWindow, write = set_RemoteProgramsHatchWindow};
  __property   long            RemoteProgramsStayConnectOnBadCaps = {read = get_RemoteProgramsStayConnectOnBadCaps, write = set_RemoteProgramsStayConnectOnBadCaps};
  __property   unsigned        ControlType = {read = get_ControlType};
  __property   VARIANT_BOOL    DecodeGfx = {write = set_DecodeGfx};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientAdvancedSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3C65B4AB-12B3-465B-ACD4-B8DAD3BFF9E2}
// *********************************************************************//
interface IMsRdpClientAdvancedSettings  : public Mstsclib_tlb::IMsTscAdvancedSettings
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_SmoothScroll(long psmoothScroll/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_SmoothScroll(long* psmoothScroll/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_ShadowBitmap(long pshadowBitmap/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_TransportType(long ptransportType/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_TransportType(long* ptransportType/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_SasSequence(long psasSequence/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_SasSequence(long* psasSequence/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_EncryptionEnabled(long pencryptionEnabled/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_RDPPort(long prdpPort/*[in]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_RDPPort(long* prdpPort/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE set_EnableMouse(long penableMouse/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_EnableMouse(long* penableMouse/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE set_EnableWindowsKey(long penableWindowsKey/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_MaximizeShell(long pmaximizeShell/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/) = 0; // [114]
  virtual HRESULT STDMETHODCALLTYPE get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/) = 0; // [114]
  virtual HRESULT STDMETHODCALLTYPE set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE set_HotKeyAltTab(long photKeyAltTab/*[in]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/) = 0; // [120]
  virtual HRESULT STDMETHODCALLTYPE get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/) = 0; // [120]
  virtual HRESULT STDMETHODCALLTYPE set_orderDrawThreshold(long porderDrawThreshold/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/) = 0; // [124]
  virtual HRESULT STDMETHODCALLTYPE get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/) = 0; // [124]
  virtual HRESULT STDMETHODCALLTYPE set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/) = 0; // [125]
  virtual HRESULT STDMETHODCALLTYPE get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/) = 0; // [125]
  virtual HRESULT STDMETHODCALLTYPE set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/) = 0; // [175]
  virtual HRESULT STDMETHODCALLTYPE get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/) = 0; // [175]
  virtual HRESULT STDMETHODCALLTYPE set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/) = 0; // [126]
  virtual HRESULT STDMETHODCALLTYPE get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/) = 0; // [126]
  virtual HRESULT STDMETHODCALLTYPE set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE set_PersistCacheDirectory(BSTR Param1/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_brushSupportLevel(long pbrushSupportLevel/*[in]*/) = 0; // [156]
  virtual HRESULT STDMETHODCALLTYPE get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/) = 0; // [156]
  virtual HRESULT STDMETHODCALLTYPE set_minInputSendInterval(long pminInputSendInterval/*[in]*/) = 0; // [157]
  virtual HRESULT STDMETHODCALLTYPE get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/) = 0; // [157]
  virtual HRESULT STDMETHODCALLTYPE set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/) = 0; // [158]
  virtual HRESULT STDMETHODCALLTYPE get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/) = 0; // [158]
  virtual HRESULT STDMETHODCALLTYPE set_maxEventCount(long pmaxEventCount/*[in]*/) = 0; // [159]
  virtual HRESULT STDMETHODCALLTYPE get_maxEventCount(long* pmaxEventCount/*[out,retval]*/) = 0; // [159]
  virtual HRESULT STDMETHODCALLTYPE set_keepAliveInterval(long pkeepAliveInterval/*[in]*/) = 0; // [160]
  virtual HRESULT STDMETHODCALLTYPE get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/) = 0; // [160]
  virtual HRESULT STDMETHODCALLTYPE set_shutdownTimeout(long pshutdownTimeout/*[in]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/) = 0; // [165]
  virtual HRESULT STDMETHODCALLTYPE get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/) = 0; // [165]
  virtual HRESULT STDMETHODCALLTYPE set_KeyboardType(long pkeyboardType/*[in]*/) = 0; // [166]
  virtual HRESULT STDMETHODCALLTYPE get_KeyboardType(long* pkeyboardType/*[out,retval]*/) = 0; // [166]
  virtual HRESULT STDMETHODCALLTYPE set_KeyboardSubType(long pkeyboardSubType/*[in]*/) = 0; // [167]
  virtual HRESULT STDMETHODCALLTYPE get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/) = 0; // [167]
  virtual HRESULT STDMETHODCALLTYPE set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/) = 0; // [168]
  virtual HRESULT STDMETHODCALLTYPE get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/) = 0; // [168]
  virtual HRESULT STDMETHODCALLTYPE set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/) = 0; // [169]
  virtual HRESULT STDMETHODCALLTYPE get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/) = 0; // [169]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/) = 0; // [178]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/) = 0; // [178]
  virtual HRESULT STDMETHODCALLTYPE set_BitmapPersistence(long pbitmapPersistence/*[in]*/) = 0; // [182]
  virtual HRESULT STDMETHODCALLTYPE get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/) = 0; // [182]
  virtual HRESULT STDMETHODCALLTYPE set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/) = 0; // [183]
  virtual HRESULT STDMETHODCALLTYPE get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/) = 0; // [183]
  virtual HRESULT STDMETHODCALLTYPE set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/) = 0; // [184]
  virtual HRESULT STDMETHODCALLTYPE get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/) = 0; // [184]
  virtual HRESULT STDMETHODCALLTYPE set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/) = 0; // [185]
  virtual HRESULT STDMETHODCALLTYPE get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/) = 0; // [185]
  virtual HRESULT STDMETHODCALLTYPE set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE set_ClearTextPassword(BSTR Param1/*[in]*/) = 0; // [186]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/) = 0; // [187]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/) = 0; // [187]
  virtual HRESULT STDMETHODCALLTYPE set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/) = 0; // [188]
  virtual HRESULT STDMETHODCALLTYPE get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/) = 0; // [188]
  virtual HRESULT STDMETHODCALLTYPE set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/) = 0; // [189]
  virtual HRESULT STDMETHODCALLTYPE get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/) = 0; // [189]
  virtual HRESULT STDMETHODCALLTYPE set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/) = 0; // [190]
  virtual HRESULT STDMETHODCALLTYPE get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/) = 0; // [190]
  virtual HRESULT STDMETHODCALLTYPE set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/) = 0; // [191]
  virtual HRESULT STDMETHODCALLTYPE get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/) = 0; // [191]
  virtual HRESULT STDMETHODCALLTYPE set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/) = 0; // [193]
  virtual HRESULT STDMETHODCALLTYPE get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/) = 0; // [193]
  virtual HRESULT STDMETHODCALLTYPE set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/) = 0; // [194]
  virtual HRESULT STDMETHODCALLTYPE get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/) = 0; // [194]
  virtual HRESULT STDMETHODCALLTYPE set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/) = 0; // [195]
  virtual HRESULT STDMETHODCALLTYPE get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/) = 0; // [195]
  virtual HRESULT STDMETHODCALLTYPE set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/) = 0; // [196]
  virtual HRESULT STDMETHODCALLTYPE get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/) = 0; // [196]
  virtual HRESULT STDMETHODCALLTYPE set_PerformanceFlags(long pDisableList/*[in]*/) = 0; // [200]
  virtual HRESULT STDMETHODCALLTYPE get_PerformanceFlags(long* pDisableList/*[out,retval]*/) = 0; // [200]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/) = 0; // [204]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_SmoothScroll(void)
  {
    long psmoothScroll;
    OLECHECK(this->get_SmoothScroll((long*)&psmoothScroll));
    return psmoothScroll;
  }

  long __fastcall get_AcceleratorPassthrough(void)
  {
    long pacceleratorPassthrough;
    OLECHECK(this->get_AcceleratorPassthrough((long*)&pacceleratorPassthrough));
    return pacceleratorPassthrough;
  }

  long __fastcall get_ShadowBitmap(void)
  {
    long pshadowBitmap;
    OLECHECK(this->get_ShadowBitmap((long*)&pshadowBitmap));
    return pshadowBitmap;
  }

  long __fastcall get_TransportType(void)
  {
    long ptransportType;
    OLECHECK(this->get_TransportType((long*)&ptransportType));
    return ptransportType;
  }

  long __fastcall get_SasSequence(void)
  {
    long psasSequence;
    OLECHECK(this->get_SasSequence((long*)&psasSequence));
    return psasSequence;
  }

  long __fastcall get_EncryptionEnabled(void)
  {
    long pencryptionEnabled;
    OLECHECK(this->get_EncryptionEnabled((long*)&pencryptionEnabled));
    return pencryptionEnabled;
  }

  long __fastcall get_DedicatedTerminal(void)
  {
    long pdedicatedTerminal;
    OLECHECK(this->get_DedicatedTerminal((long*)&pdedicatedTerminal));
    return pdedicatedTerminal;
  }

  long __fastcall get_RDPPort(void)
  {
    long prdpPort;
    OLECHECK(this->get_RDPPort((long*)&prdpPort));
    return prdpPort;
  }

  long __fastcall get_EnableMouse(void)
  {
    long penableMouse;
    OLECHECK(this->get_EnableMouse((long*)&penableMouse));
    return penableMouse;
  }

  long __fastcall get_DisableCtrlAltDel(void)
  {
    long pdisableCtrlAltDel;
    OLECHECK(this->get_DisableCtrlAltDel((long*)&pdisableCtrlAltDel));
    return pdisableCtrlAltDel;
  }

  long __fastcall get_EnableWindowsKey(void)
  {
    long penableWindowsKey;
    OLECHECK(this->get_EnableWindowsKey((long*)&penableWindowsKey));
    return penableWindowsKey;
  }

  long __fastcall get_DoubleClickDetect(void)
  {
    long pdoubleClickDetect;
    OLECHECK(this->get_DoubleClickDetect((long*)&pdoubleClickDetect));
    return pdoubleClickDetect;
  }

  long __fastcall get_MaximizeShell(void)
  {
    long pmaximizeShell;
    OLECHECK(this->get_MaximizeShell((long*)&pmaximizeShell));
    return pmaximizeShell;
  }

  long __fastcall get_HotKeyFullScreen(void)
  {
    long photKeyFullScreen;
    OLECHECK(this->get_HotKeyFullScreen((long*)&photKeyFullScreen));
    return photKeyFullScreen;
  }

  long __fastcall get_HotKeyCtrlEsc(void)
  {
    long photKeyCtrlEsc;
    OLECHECK(this->get_HotKeyCtrlEsc((long*)&photKeyCtrlEsc));
    return photKeyCtrlEsc;
  }

  long __fastcall get_HotKeyAltEsc(void)
  {
    long photKeyAltEsc;
    OLECHECK(this->get_HotKeyAltEsc((long*)&photKeyAltEsc));
    return photKeyAltEsc;
  }

  long __fastcall get_HotKeyAltTab(void)
  {
    long photKeyAltTab;
    OLECHECK(this->get_HotKeyAltTab((long*)&photKeyAltTab));
    return photKeyAltTab;
  }

  long __fastcall get_HotKeyAltShiftTab(void)
  {
    long photKeyAltShiftTab;
    OLECHECK(this->get_HotKeyAltShiftTab((long*)&photKeyAltShiftTab));
    return photKeyAltShiftTab;
  }

  long __fastcall get_HotKeyAltSpace(void)
  {
    long photKeyAltSpace;
    OLECHECK(this->get_HotKeyAltSpace((long*)&photKeyAltSpace));
    return photKeyAltSpace;
  }

  long __fastcall get_HotKeyCtrlAltDel(void)
  {
    long photKeyCtrlAltDel;
    OLECHECK(this->get_HotKeyCtrlAltDel((long*)&photKeyCtrlAltDel));
    return photKeyCtrlAltDel;
  }

  long __fastcall get_orderDrawThreshold(void)
  {
    long porderDrawThreshold;
    OLECHECK(this->get_orderDrawThreshold((long*)&porderDrawThreshold));
    return porderDrawThreshold;
  }

  long __fastcall get_BitmapCacheSize(void)
  {
    long pbitmapCacheSize;
    OLECHECK(this->get_BitmapCacheSize((long*)&pbitmapCacheSize));
    return pbitmapCacheSize;
  }

  long __fastcall get_BitmapVirtualCacheSize(void)
  {
    long pbitmapVirtualCacheSize;
    OLECHECK(this->get_BitmapVirtualCacheSize((long*)&pbitmapVirtualCacheSize));
    return pbitmapVirtualCacheSize;
  }

  long __fastcall get_ScaleBitmapCachesByBPP(void)
  {
    long pbScale;
    OLECHECK(this->get_ScaleBitmapCachesByBPP((long*)&pbScale));
    return pbScale;
  }

  long __fastcall get_NumBitmapCaches(void)
  {
    long pnumBitmapCaches;
    OLECHECK(this->get_NumBitmapCaches((long*)&pnumBitmapCaches));
    return pnumBitmapCaches;
  }

  long __fastcall get_CachePersistenceActive(void)
  {
    long pcachePersistenceActive;
    OLECHECK(this->get_CachePersistenceActive((long*)&pcachePersistenceActive));
    return pcachePersistenceActive;
  }

  long __fastcall get_brushSupportLevel(void)
  {
    long pbrushSupportLevel;
    OLECHECK(this->get_brushSupportLevel((long*)&pbrushSupportLevel));
    return pbrushSupportLevel;
  }

  long __fastcall get_minInputSendInterval(void)
  {
    long pminInputSendInterval;
    OLECHECK(this->get_minInputSendInterval((long*)&pminInputSendInterval));
    return pminInputSendInterval;
  }

  long __fastcall get_InputEventsAtOnce(void)
  {
    long pinputEventsAtOnce;
    OLECHECK(this->get_InputEventsAtOnce((long*)&pinputEventsAtOnce));
    return pinputEventsAtOnce;
  }

  long __fastcall get_maxEventCount(void)
  {
    long pmaxEventCount;
    OLECHECK(this->get_maxEventCount((long*)&pmaxEventCount));
    return pmaxEventCount;
  }

  long __fastcall get_keepAliveInterval(void)
  {
    long pkeepAliveInterval;
    OLECHECK(this->get_keepAliveInterval((long*)&pkeepAliveInterval));
    return pkeepAliveInterval;
  }

  long __fastcall get_shutdownTimeout(void)
  {
    long pshutdownTimeout;
    OLECHECK(this->get_shutdownTimeout((long*)&pshutdownTimeout));
    return pshutdownTimeout;
  }

  long __fastcall get_overallConnectionTimeout(void)
  {
    long poverallConnectionTimeout;
    OLECHECK(this->get_overallConnectionTimeout((long*)&poverallConnectionTimeout));
    return poverallConnectionTimeout;
  }

  long __fastcall get_singleConnectionTimeout(void)
  {
    long psingleConnectionTimeout;
    OLECHECK(this->get_singleConnectionTimeout((long*)&psingleConnectionTimeout));
    return psingleConnectionTimeout;
  }

  long __fastcall get_KeyboardType(void)
  {
    long pkeyboardType;
    OLECHECK(this->get_KeyboardType((long*)&pkeyboardType));
    return pkeyboardType;
  }

  long __fastcall get_KeyboardSubType(void)
  {
    long pkeyboardSubType;
    OLECHECK(this->get_KeyboardSubType((long*)&pkeyboardSubType));
    return pkeyboardSubType;
  }

  long __fastcall get_KeyboardFunctionKey(void)
  {
    long pkeyboardFunctionKey;
    OLECHECK(this->get_KeyboardFunctionKey((long*)&pkeyboardFunctionKey));
    return pkeyboardFunctionKey;
  }

  long __fastcall get_WinceFixedPalette(void)
  {
    long pwinceFixedPalette;
    OLECHECK(this->get_WinceFixedPalette((long*)&pwinceFixedPalette));
    return pwinceFixedPalette;
  }

  VARIANT_BOOL __fastcall get_ConnectToServerConsole(void)
  {
    VARIANT_BOOL pConnectToConsole;
    OLECHECK(this->get_ConnectToServerConsole((VARIANT_BOOL*)&pConnectToConsole));
    return pConnectToConsole;
  }

  long __fastcall get_BitmapPersistence(void)
  {
    long pbitmapPersistence;
    OLECHECK(this->get_BitmapPersistence((long*)&pbitmapPersistence));
    return pbitmapPersistence;
  }

  long __fastcall get_MinutesToIdleTimeout(void)
  {
    long pminutesToIdleTimeout;
    OLECHECK(this->get_MinutesToIdleTimeout((long*)&pminutesToIdleTimeout));
    return pminutesToIdleTimeout;
  }

  VARIANT_BOOL __fastcall get_SmartSizing(void)
  {
    VARIANT_BOOL pfSmartSizing;
    OLECHECK(this->get_SmartSizing((VARIANT_BOOL*)&pfSmartSizing));
    return pfSmartSizing;
  }

  BSTR __fastcall get_RdpdrLocalPrintingDocName(void)
  {
    BSTR pLocalPrintingDocName = 0;
    OLECHECK(this->get_RdpdrLocalPrintingDocName((BSTR*)&pLocalPrintingDocName));
    return pLocalPrintingDocName;
  }

  BSTR __fastcall get_RdpdrClipCleanTempDirString(void)
  {
    BSTR clipCleanTempDirString = 0;
    OLECHECK(this->get_RdpdrClipCleanTempDirString((BSTR*)&clipCleanTempDirString));
    return clipCleanTempDirString;
  }

  BSTR __fastcall get_RdpdrClipPasteInfoString(void)
  {
    BSTR clipPasteInfoString = 0;
    OLECHECK(this->get_RdpdrClipPasteInfoString((BSTR*)&clipPasteInfoString));
    return clipPasteInfoString;
  }

  VARIANT_BOOL __fastcall get_DisplayConnectionBar(void)
  {
    VARIANT_BOOL pDisplayConnectionBar;
    OLECHECK(this->get_DisplayConnectionBar((VARIANT_BOOL*)&pDisplayConnectionBar));
    return pDisplayConnectionBar;
  }

  VARIANT_BOOL __fastcall get_PinConnectionBar(void)
  {
    VARIANT_BOOL pPinConnectionBar;
    OLECHECK(this->get_PinConnectionBar((VARIANT_BOOL*)&pPinConnectionBar));
    return pPinConnectionBar;
  }

  VARIANT_BOOL __fastcall get_GrabFocusOnConnect(void)
  {
    VARIANT_BOOL pfGrabFocusOnConnect;
    OLECHECK(this->get_GrabFocusOnConnect((VARIANT_BOOL*)&pfGrabFocusOnConnect));
    return pfGrabFocusOnConnect;
  }

  BSTR __fastcall get_LoadBalanceInfo(void)
  {
    BSTR pLBInfo = 0;
    OLECHECK(this->get_LoadBalanceInfo((BSTR*)&pLBInfo));
    return pLBInfo;
  }

  VARIANT_BOOL __fastcall get_RedirectDrives(void)
  {
    VARIANT_BOOL pRedirectDrives;
    OLECHECK(this->get_RedirectDrives((VARIANT_BOOL*)&pRedirectDrives));
    return pRedirectDrives;
  }

  VARIANT_BOOL __fastcall get_RedirectPrinters(void)
  {
    VARIANT_BOOL pRedirectPrinters;
    OLECHECK(this->get_RedirectPrinters((VARIANT_BOOL*)&pRedirectPrinters));
    return pRedirectPrinters;
  }

  VARIANT_BOOL __fastcall get_RedirectPorts(void)
  {
    VARIANT_BOOL pRedirectPorts;
    OLECHECK(this->get_RedirectPorts((VARIANT_BOOL*)&pRedirectPorts));
    return pRedirectPorts;
  }

  VARIANT_BOOL __fastcall get_RedirectSmartCards(void)
  {
    VARIANT_BOOL pRedirectSmartCards;
    OLECHECK(this->get_RedirectSmartCards((VARIANT_BOOL*)&pRedirectSmartCards));
    return pRedirectSmartCards;
  }

  long __fastcall get_BitmapVirtualCache16BppSize(void)
  {
    long pBitmapVirtualCache16BppSize;
    OLECHECK(this->get_BitmapVirtualCache16BppSize((long*)&pBitmapVirtualCache16BppSize));
    return pBitmapVirtualCache16BppSize;
  }

  long __fastcall get_BitmapVirtualCache24BppSize(void)
  {
    long pBitmapVirtualCache24BppSize;
    OLECHECK(this->get_BitmapVirtualCache24BppSize((long*)&pBitmapVirtualCache24BppSize));
    return pBitmapVirtualCache24BppSize;
  }

  long __fastcall get_PerformanceFlags(void)
  {
    long pDisableList;
    OLECHECK(this->get_PerformanceFlags((long*)&pDisableList));
    return pDisableList;
  }

  VARIANT_BOOL __fastcall get_NotifyTSPublicKey(void)
  {
    VARIANT_BOOL pfNotify;
    OLECHECK(this->get_NotifyTSPublicKey((VARIANT_BOOL*)&pfNotify));
    return pfNotify;
  }


  __property   long            SmoothScroll = {read = get_SmoothScroll, write = set_SmoothScroll};
  __property   long            AcceleratorPassthrough = {read = get_AcceleratorPassthrough, write = set_AcceleratorPassthrough};
  __property   long            ShadowBitmap = {read = get_ShadowBitmap, write = set_ShadowBitmap};
  __property   long            TransportType = {read = get_TransportType, write = set_TransportType};
  __property   long            SasSequence = {read = get_SasSequence, write = set_SasSequence};
  __property   long            EncryptionEnabled = {read = get_EncryptionEnabled, write = set_EncryptionEnabled};
  __property   long            DedicatedTerminal = {read = get_DedicatedTerminal, write = set_DedicatedTerminal};
  __property   long            RDPPort = {read = get_RDPPort, write = set_RDPPort};
  __property   long            EnableMouse = {read = get_EnableMouse, write = set_EnableMouse};
  __property   long            DisableCtrlAltDel = {read = get_DisableCtrlAltDel, write = set_DisableCtrlAltDel};
  __property   long            EnableWindowsKey = {read = get_EnableWindowsKey, write = set_EnableWindowsKey};
  __property   long            DoubleClickDetect = {read = get_DoubleClickDetect, write = set_DoubleClickDetect};
  __property   long            MaximizeShell = {read = get_MaximizeShell, write = set_MaximizeShell};
  __property   long            HotKeyFullScreen = {read = get_HotKeyFullScreen, write = set_HotKeyFullScreen};
  __property   long            HotKeyCtrlEsc = {read = get_HotKeyCtrlEsc, write = set_HotKeyCtrlEsc};
  __property   long            HotKeyAltEsc = {read = get_HotKeyAltEsc, write = set_HotKeyAltEsc};
  __property   long            HotKeyAltTab = {read = get_HotKeyAltTab, write = set_HotKeyAltTab};
  __property   long            HotKeyAltShiftTab = {read = get_HotKeyAltShiftTab, write = set_HotKeyAltShiftTab};
  __property   long            HotKeyAltSpace = {read = get_HotKeyAltSpace, write = set_HotKeyAltSpace};
  __property   long            HotKeyCtrlAltDel = {read = get_HotKeyCtrlAltDel, write = set_HotKeyCtrlAltDel};
  __property   long            orderDrawThreshold = {read = get_orderDrawThreshold, write = set_orderDrawThreshold};
  __property   long            BitmapCacheSize = {read = get_BitmapCacheSize, write = set_BitmapCacheSize};
  __property   long            BitmapVirtualCacheSize = {read = get_BitmapVirtualCacheSize, write = set_BitmapVirtualCacheSize};
  __property   long            ScaleBitmapCachesByBPP = {read = get_ScaleBitmapCachesByBPP, write = set_ScaleBitmapCachesByBPP};
  __property   long            NumBitmapCaches = {read = get_NumBitmapCaches, write = set_NumBitmapCaches};
  __property   long            CachePersistenceActive = {read = get_CachePersistenceActive, write = set_CachePersistenceActive};
  __property   BSTR            PersistCacheDirectory = {write = set_PersistCacheDirectory};
  __property   long            brushSupportLevel = {read = get_brushSupportLevel, write = set_brushSupportLevel};
  __property   long            minInputSendInterval = {read = get_minInputSendInterval, write = set_minInputSendInterval};
  __property   long            InputEventsAtOnce = {read = get_InputEventsAtOnce, write = set_InputEventsAtOnce};
  __property   long            maxEventCount = {read = get_maxEventCount, write = set_maxEventCount};
  __property   long            keepAliveInterval = {read = get_keepAliveInterval, write = set_keepAliveInterval};
  __property   long            shutdownTimeout = {read = get_shutdownTimeout, write = set_shutdownTimeout};
  __property   long            overallConnectionTimeout = {read = get_overallConnectionTimeout, write = set_overallConnectionTimeout};
  __property   long            singleConnectionTimeout = {read = get_singleConnectionTimeout, write = set_singleConnectionTimeout};
  __property   long            KeyboardType = {read = get_KeyboardType, write = set_KeyboardType};
  __property   long            KeyboardSubType = {read = get_KeyboardSubType, write = set_KeyboardSubType};
  __property   long            KeyboardFunctionKey = {read = get_KeyboardFunctionKey, write = set_KeyboardFunctionKey};
  __property   long            WinceFixedPalette = {read = get_WinceFixedPalette, write = set_WinceFixedPalette};
  __property   VARIANT_BOOL    ConnectToServerConsole = {read = get_ConnectToServerConsole, write = set_ConnectToServerConsole};
  __property   long            BitmapPersistence = {read = get_BitmapPersistence, write = set_BitmapPersistence};
  __property   long            MinutesToIdleTimeout = {read = get_MinutesToIdleTimeout, write = set_MinutesToIdleTimeout};
  __property   VARIANT_BOOL    SmartSizing = {read = get_SmartSizing, write = set_SmartSizing};
  __property   BSTR            RdpdrLocalPrintingDocName = {read = get_RdpdrLocalPrintingDocName, write = set_RdpdrLocalPrintingDocName};
  __property   BSTR            RdpdrClipCleanTempDirString = {read = get_RdpdrClipCleanTempDirString, write = set_RdpdrClipCleanTempDirString};
  __property   BSTR            RdpdrClipPasteInfoString = {read = get_RdpdrClipPasteInfoString, write = set_RdpdrClipPasteInfoString};
  __property   BSTR            ClearTextPassword = {write = set_ClearTextPassword};
  __property   VARIANT_BOOL    DisplayConnectionBar = {read = get_DisplayConnectionBar, write = set_DisplayConnectionBar};
  __property   VARIANT_BOOL    PinConnectionBar = {read = get_PinConnectionBar, write = set_PinConnectionBar};
  __property   VARIANT_BOOL    GrabFocusOnConnect = {read = get_GrabFocusOnConnect, write = set_GrabFocusOnConnect};
  __property   BSTR            LoadBalanceInfo = {read = get_LoadBalanceInfo, write = set_LoadBalanceInfo};
  __property   VARIANT_BOOL    RedirectDrives = {read = get_RedirectDrives, write = set_RedirectDrives};
  __property   VARIANT_BOOL    RedirectPrinters = {read = get_RedirectPrinters, write = set_RedirectPrinters};
  __property   VARIANT_BOOL    RedirectPorts = {read = get_RedirectPorts, write = set_RedirectPorts};
  __property   VARIANT_BOOL    RedirectSmartCards = {read = get_RedirectSmartCards, write = set_RedirectSmartCards};
  __property   long            BitmapVirtualCache16BppSize = {read = get_BitmapVirtualCache16BppSize, write = set_BitmapVirtualCache16BppSize};
  __property   long            BitmapVirtualCache24BppSize = {read = get_BitmapVirtualCache24BppSize, write = set_BitmapVirtualCache24BppSize};
  __property   long            PerformanceFlags = {read = get_PerformanceFlags, write = set_PerformanceFlags};
  __property   VARIANT_BOOL    NotifyTSPublicKey = {read = get_NotifyTSPublicKey, write = set_NotifyTSPublicKey};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientSecuredSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {605BEFCF-39C1-45CC-A811-068FB7BE346D}
// *********************************************************************//
interface IMsRdpClientSecuredSettings  : public Mstsclib_tlb::IMsTscSecuredSettings
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_KeyboardHookMode(long pkeyboardHookMode/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_KeyboardHookMode(long* pkeyboardHookMode/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_AudioRedirectionMode(long pAudioRedirectionMode/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_AudioRedirectionMode(long* pAudioRedirectionMode/*[out,retval]*/) = 0; // [5]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_KeyboardHookMode(void)
  {
    long pkeyboardHookMode;
    OLECHECK(this->get_KeyboardHookMode((long*)&pkeyboardHookMode));
    return pkeyboardHookMode;
  }

  long __fastcall get_AudioRedirectionMode(void)
  {
    long pAudioRedirectionMode;
    OLECHECK(this->get_AudioRedirectionMode((long*)&pAudioRedirectionMode));
    return pAudioRedirectionMode;
  }


  __property   long            KeyboardHookMode = {read = get_KeyboardHookMode, write = set_KeyboardHookMode};
  __property   long            AudioRedirectionMode = {read = get_AudioRedirectionMode, write = set_AudioRedirectionMode};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientNonScriptable
// Flags:     (0)
// GUID:      {2F079C4C-87B2-4AFD-97AB-20CDB43038AE}
// *********************************************************************//
interface IMsRdpClientNonScriptable  : public Mstsclib_tlb::IMsTscNonScriptable
{
public:
  virtual HRESULT STDMETHODCALLTYPE NotifyRedirectDeviceChange(Mstsclib_tlb::UINT_PTR wParam/*[in]*/, 
                                                               Mstsclib_tlb::LONG_PTR lParam/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE SendKeys(long numKeys/*[in]*/, 
                                             VARIANT_BOOL* pbArrayKeyUp/*[in]*/, 
                                             long* plKeyData/*[in]*/) = 0; // [12]
};

// *********************************************************************//
// Interface: IMsRdpClient2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E7E17DC4-3B71-4BA7-A8E6-281FFADCA28F}
// *********************************************************************//
interface IMsRdpClient2  : public Mstsclib_tlb::IMsRdpClient
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/) = 0; // [200]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/) = 0; // [201]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall get_AdvancedSettings3(void)
  {
    Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr ppAdvSettings;
    OLECHECK(this->get_AdvancedSettings3(&ppAdvSettings));
    return ppAdvSettings;
  }

  BSTR __fastcall get_ConnectedStatusText(void)
  {
    BSTR pConnectedStatusText = 0;
    OLECHECK(this->get_ConnectedStatusText((BSTR*)&pConnectedStatusText));
    return pConnectedStatusText;
  }


  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr AdvancedSettings3 = {read = get_AdvancedSettings3};
  __property   BSTR            ConnectedStatusText = {read = get_ConnectedStatusText, write = set_ConnectedStatusText};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientAdvancedSettings2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9AC42117-2B76-4320-AA44-0E616AB8437B}
// *********************************************************************//
interface IMsRdpClientAdvancedSettings2  : public Mstsclib_tlb::IMsRdpClientAdvancedSettings
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CanAutoReconnect(VARIANT_BOOL* pfCanAutoReconnect/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE set_EnableAutoReconnect(VARIANT_BOOL pfEnableAutoReconnect/*[in]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE get_EnableAutoReconnect(VARIANT_BOOL* pfEnableAutoReconnect/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE set_MaxReconnectAttempts(long pMaxReconnectAttempts/*[in]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE get_MaxReconnectAttempts(long* pMaxReconnectAttempts/*[out,retval]*/) = 0; // [207]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_CanAutoReconnect(void)
  {
    VARIANT_BOOL pfCanAutoReconnect;
    OLECHECK(this->get_CanAutoReconnect((VARIANT_BOOL*)&pfCanAutoReconnect));
    return pfCanAutoReconnect;
  }

  VARIANT_BOOL __fastcall get_EnableAutoReconnect(void)
  {
    VARIANT_BOOL pfEnableAutoReconnect;
    OLECHECK(this->get_EnableAutoReconnect((VARIANT_BOOL*)&pfEnableAutoReconnect));
    return pfEnableAutoReconnect;
  }

  long __fastcall get_MaxReconnectAttempts(void)
  {
    long pMaxReconnectAttempts;
    OLECHECK(this->get_MaxReconnectAttempts((long*)&pMaxReconnectAttempts));
    return pMaxReconnectAttempts;
  }


  __property   VARIANT_BOOL    CanAutoReconnect = {read = get_CanAutoReconnect};
  __property   VARIANT_BOOL    EnableAutoReconnect = {read = get_EnableAutoReconnect, write = set_EnableAutoReconnect};
  __property   long            MaxReconnectAttempts = {read = get_MaxReconnectAttempts, write = set_MaxReconnectAttempts};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClient3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {91B7CBC5-A72E-4FA0-9300-D647D7E897FF}
// *********************************************************************//
interface IMsRdpClient3  : public Mstsclib_tlb::IMsRdpClient2
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/) = 0; // [300]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall get_AdvancedSettings4(void)
  {
    Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr ppAdvSettings;
    OLECHECK(this->get_AdvancedSettings4(&ppAdvSettings));
    return ppAdvSettings;
  }


  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr AdvancedSettings4 = {read = get_AdvancedSettings4};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientAdvancedSettings3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {19CD856B-C542-4C53-ACEE-F127E3BE1A59}
// *********************************************************************//
interface IMsRdpClientAdvancedSettings3  : public Mstsclib_tlb::IMsRdpClientAdvancedSettings2
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_ConnectionBarShowMinimizeButton(VARIANT_BOOL pfShowMinimize/*[in]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionBarShowMinimizeButton(VARIANT_BOOL* pfShowMinimize/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectionBarShowRestoreButton(VARIANT_BOOL pfShowRestore/*[in]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionBarShowRestoreButton(VARIANT_BOOL* pfShowRestore/*[out,retval]*/) = 0; // [211]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_ConnectionBarShowMinimizeButton(void)
  {
    VARIANT_BOOL pfShowMinimize;
    OLECHECK(this->get_ConnectionBarShowMinimizeButton((VARIANT_BOOL*)&pfShowMinimize));
    return pfShowMinimize;
  }

  VARIANT_BOOL __fastcall get_ConnectionBarShowRestoreButton(void)
  {
    VARIANT_BOOL pfShowRestore;
    OLECHECK(this->get_ConnectionBarShowRestoreButton((VARIANT_BOOL*)&pfShowRestore));
    return pfShowRestore;
  }


  __property   VARIANT_BOOL    ConnectionBarShowMinimizeButton = {read = get_ConnectionBarShowMinimizeButton, write = set_ConnectionBarShowMinimizeButton};
  __property   VARIANT_BOOL    ConnectionBarShowRestoreButton = {read = get_ConnectionBarShowRestoreButton, write = set_ConnectionBarShowRestoreButton};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClient4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {095E0738-D97D-488B-B9F6-DD0E8D66C0DE}
// *********************************************************************//
interface IMsRdpClient4  : public Mstsclib_tlb::IMsRdpClient3
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/) = 0; // [400]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall get_AdvancedSettings5(void)
  {
    Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr ppAdvSettings;
    OLECHECK(this->get_AdvancedSettings5(&ppAdvSettings));
    return ppAdvSettings;
  }


  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr AdvancedSettings5 = {read = get_AdvancedSettings5};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientNonScriptable2
// Flags:     (0)
// GUID:      {17A5E535-4072-4FA4-AF32-C8D0D47345E9}
// *********************************************************************//
interface IMsRdpClientNonScriptable2  : public Mstsclib_tlb::IMsRdpClientNonScriptable
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_UIParentWindowHandle(Mstsclib_tlb::wireHWND phwndUIParentWindowHandle/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_UIParentWindowHandle(Mstsclib_tlb::wireHWND* phwndUIParentWindowHandle/*[out,retval]*/) = 0; // [13]
};

// *********************************************************************//
// Interface: IMsRdpClientAdvancedSettings4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FBA7F64E-7345-4405-AE50-FA4A763DC0DE}
// *********************************************************************//
interface IMsRdpClientAdvancedSettings4  : public Mstsclib_tlb::IMsRdpClientAdvancedSettings3
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_AuthenticationLevel(unsigned puiAuthLevel/*[in]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE get_AuthenticationLevel(unsigned* puiAuthLevel/*[out,retval]*/) = 0; // [212]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  unsigned __fastcall get_AuthenticationLevel(void)
  {
    unsigned puiAuthLevel;
    OLECHECK(this->get_AuthenticationLevel((unsigned*)&puiAuthLevel));
    return puiAuthLevel;
  }


  __property   unsigned        AuthenticationLevel = {read = get_AuthenticationLevel, write = set_AuthenticationLevel};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClient5
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4EB5335B-6429-477D-B922-E06A28ECD8BF}
// *********************************************************************//
interface IMsRdpClient5  : public Mstsclib_tlb::IMsRdpClient4
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_TransportSettings(Mstsclib_tlb::IMsRdpClientTransportSettings** ppXportSet/*[out,retval]*/) = 0; // [500]
  virtual HRESULT STDMETHODCALLTYPE get_AdvancedSettings6(Mstsclib_tlb::IMsRdpClientAdvancedSettings5** ppAdvSettings/*[out,retval]*/) = 0; // [502]
  virtual HRESULT STDMETHODCALLTYPE GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                                        unsigned ExtendedDisconnectReason/*[in]*/, 
                                                        BSTR* pBstrErrorMsg/*[out,retval]*/) = 0; // [503]
  virtual HRESULT STDMETHODCALLTYPE get_RemoteProgram(Mstsclib_tlb::ITSRemoteProgram** ppRemoteProgram/*[out,retval]*/) = 0; // [504]
  virtual HRESULT STDMETHODCALLTYPE get_MsRdpClientShell(Mstsclib_tlb::IMsRdpClientShell** ppLauncher/*[out,retval]*/) = 0; // [505]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mstsclib_tlb::IMsRdpClientTransportSettingsPtr __fastcall get_TransportSettings(void)
  {
    Mstsclib_tlb::IMsRdpClientTransportSettingsPtr ppXportSet;
    OLECHECK(this->get_TransportSettings(&ppXportSet));
    return ppXportSet;
  }

  Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr __fastcall get_AdvancedSettings6(void)
  {
    Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr ppAdvSettings;
    OLECHECK(this->get_AdvancedSettings6(&ppAdvSettings));
    return ppAdvSettings;
  }

  BSTR __fastcall GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                      unsigned ExtendedDisconnectReason/*[in]*/)
  {
    BSTR pBstrErrorMsg = 0;
    OLECHECK(this->GetErrorDescription(disconnectReason, ExtendedDisconnectReason, (BSTR*)&pBstrErrorMsg));
    return pBstrErrorMsg;
  }

  Mstsclib_tlb::ITSRemoteProgramPtr __fastcall get_RemoteProgram(void)
  {
    Mstsclib_tlb::ITSRemoteProgramPtr ppRemoteProgram;
    OLECHECK(this->get_RemoteProgram(&ppRemoteProgram));
    return ppRemoteProgram;
  }

  Mstsclib_tlb::IMsRdpClientShellPtr __fastcall get_MsRdpClientShell(void)
  {
    Mstsclib_tlb::IMsRdpClientShellPtr ppLauncher;
    OLECHECK(this->get_MsRdpClientShell(&ppLauncher));
    return ppLauncher;
  }


  __property   Mstsclib_tlb::IMsRdpClientTransportSettingsPtr TransportSettings = {read = get_TransportSettings};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr AdvancedSettings6 = {read = get_AdvancedSettings6};
  __property   Mstsclib_tlb::ITSRemoteProgramPtr RemoteProgram = {read = get_RemoteProgram};
  __property   Mstsclib_tlb::IMsRdpClientShellPtr MsRdpClientShell = {read = get_MsRdpClientShell};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientNonScriptable3
// Flags:     (0)
// GUID:      {B3378D90-0728-45C7-8ED7-B6159FB92219}
// *********************************************************************//
interface IMsRdpClientNonScriptable3  : public Mstsclib_tlb::IMsRdpClientNonScriptable2
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_ShowRedirectionWarningDialog(VARIANT_BOOL pfShowRdrDlg/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_ShowRedirectionWarningDialog(VARIANT_BOOL* pfShowRdrDlg/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE set_PromptForCredentials(VARIANT_BOOL pfPrompt/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_PromptForCredentials(VARIANT_BOOL* pfPrompt/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE set_NegotiateSecurityLayer(VARIANT_BOOL pfNegotiate/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_NegotiateSecurityLayer(VARIANT_BOOL* pfNegotiate/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_EnableCredSspSupport(VARIANT_BOOL pfEnableSupport/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_EnableCredSspSupport(VARIANT_BOOL* pfEnableSupport/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE set_RedirectDynamicDrives(VARIANT_BOOL pfRedirectDynamicDrives/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_RedirectDynamicDrives(VARIANT_BOOL* pfRedirectDynamicDrives/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_RedirectDynamicDevices(VARIANT_BOOL pfRedirectDynamicDevices/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_RedirectDynamicDevices(VARIANT_BOOL* pfRedirectDynamicDevices/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_DeviceCollection(Mstsclib_tlb::IMsRdpDeviceCollection** ppDeviceCollection/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_DriveCollection(Mstsclib_tlb::IMsRdpDriveCollection** ppDeviceCollection/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_WarnAboutSendingCredentials(VARIANT_BOOL pfWarn/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_WarnAboutSendingCredentials(VARIANT_BOOL* pfWarn/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_WarnAboutClipboardRedirection(VARIANT_BOOL pfWarn/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_WarnAboutClipboardRedirection(VARIANT_BOOL* pfWarn/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectionBarText(BSTR pConnectionBarText/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionBarText(BSTR* pConnectionBarText/*[out,retval]*/) = 0; // [24]
};

// *********************************************************************//
// Interface: IMsRdpClientTransportSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {720298C0-A099-46F5-9F82-96921BAE4701}
// *********************************************************************//
interface IMsRdpClientTransportSettings  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_GatewayHostname(BSTR pProxyHostname/*[in]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayHostname(BSTR* pProxyHostname/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE set_GatewayUsageMethod(unsigned_long pulProxyUsageMethod/*[in]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayUsageMethod(unsigned_long* pulProxyUsageMethod/*[out,retval]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE set_GatewayProfileUsageMethod(unsigned_long pulProxyProfileUsageMethod/*[in]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayProfileUsageMethod(unsigned_long* pulProxyProfileUsageMethod/*[out,retval]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE set_GatewayCredsSource(unsigned_long pulProxyCredsSource/*[in]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE set_GatewayUserSelectedCredsSource(unsigned_long pulProxyCredsSource/*[in]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayUserSelectedCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayIsSupported(long* pfProxyIsSupported/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayDefaultUsageMethod(unsigned_long* pulProxyDefaultUsageMethod/*[out,retval]*/) = 0; // [215]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_GatewayHostname(void)
  {
    BSTR pProxyHostname = 0;
    OLECHECK(this->get_GatewayHostname((BSTR*)&pProxyHostname));
    return pProxyHostname;
  }

  unsigned_long __fastcall get_GatewayUsageMethod(void)
  {
    unsigned_long pulProxyUsageMethod;
    OLECHECK(this->get_GatewayUsageMethod((unsigned_long*)&pulProxyUsageMethod));
    return pulProxyUsageMethod;
  }

  unsigned_long __fastcall get_GatewayProfileUsageMethod(void)
  {
    unsigned_long pulProxyProfileUsageMethod;
    OLECHECK(this->get_GatewayProfileUsageMethod((unsigned_long*)&pulProxyProfileUsageMethod));
    return pulProxyProfileUsageMethod;
  }

  unsigned_long __fastcall get_GatewayCredsSource(void)
  {
    unsigned_long pulProxyCredsSource;
    OLECHECK(this->get_GatewayCredsSource((unsigned_long*)&pulProxyCredsSource));
    return pulProxyCredsSource;
  }

  unsigned_long __fastcall get_GatewayUserSelectedCredsSource(void)
  {
    unsigned_long pulProxyCredsSource;
    OLECHECK(this->get_GatewayUserSelectedCredsSource((unsigned_long*)&pulProxyCredsSource));
    return pulProxyCredsSource;
  }

  long __fastcall get_GatewayIsSupported(void)
  {
    long pfProxyIsSupported;
    OLECHECK(this->get_GatewayIsSupported((long*)&pfProxyIsSupported));
    return pfProxyIsSupported;
  }

  unsigned_long __fastcall get_GatewayDefaultUsageMethod(void)
  {
    unsigned_long pulProxyDefaultUsageMethod;
    OLECHECK(this->get_GatewayDefaultUsageMethod((unsigned_long*)&pulProxyDefaultUsageMethod));
    return pulProxyDefaultUsageMethod;
  }


  __property   BSTR            GatewayHostname = {read = get_GatewayHostname, write = set_GatewayHostname};
  __property   unsigned_long   GatewayUsageMethod = {read = get_GatewayUsageMethod, write = set_GatewayUsageMethod};
  __property   unsigned_long   GatewayProfileUsageMethod = {read = get_GatewayProfileUsageMethod, write = set_GatewayProfileUsageMethod};
  __property   unsigned_long   GatewayCredsSource = {read = get_GatewayCredsSource, write = set_GatewayCredsSource};
  __property   unsigned_long   GatewayUserSelectedCredsSource = {read = get_GatewayUserSelectedCredsSource, write = set_GatewayUserSelectedCredsSource};
  __property   long            GatewayIsSupported = {read = get_GatewayIsSupported};
  __property   unsigned_long   GatewayDefaultUsageMethod = {read = get_GatewayDefaultUsageMethod};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientAdvancedSettings5
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FBA7F64E-6783-4405-DA45-FA4A763DABD0}
// *********************************************************************//
interface IMsRdpClientAdvancedSettings5  : public Mstsclib_tlb::IMsRdpClientAdvancedSettings4
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_RedirectClipboard(VARIANT_BOOL pfRedirectClipboard/*[in]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE get_RedirectClipboard(VARIANT_BOOL* pfRedirectClipboard/*[out,retval]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE set_AudioRedirectionMode(unsigned puiAudioRedirectionMode/*[in]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE get_AudioRedirectionMode(unsigned* puiAudioRedirectionMode/*[out,retval]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectionBarShowPinButton(VARIANT_BOOL pfShowPin/*[in]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionBarShowPinButton(VARIANT_BOOL* pfShowPin/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE set_PublicMode(VARIANT_BOOL pfPublicMode/*[in]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE get_PublicMode(VARIANT_BOOL* pfPublicMode/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE set_RedirectDevices(VARIANT_BOOL pfRedirectPnPDevices/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_RedirectDevices(VARIANT_BOOL* pfRedirectPnPDevices/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_RedirectPOSDevices(VARIANT_BOOL pfRedirectPOSDevices/*[in]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE get_RedirectPOSDevices(VARIANT_BOOL* pfRedirectPOSDevices/*[out,retval]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE set_BitmapVirtualCache32BppSize(long pBitmapVirtualCache32BppSize/*[in]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE get_BitmapVirtualCache32BppSize(long* pBitmapVirtualCache32BppSize/*[out,retval]*/) = 0; // [220]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_RedirectClipboard(void)
  {
    VARIANT_BOOL pfRedirectClipboard;
    OLECHECK(this->get_RedirectClipboard((VARIANT_BOOL*)&pfRedirectClipboard));
    return pfRedirectClipboard;
  }

  unsigned __fastcall get_AudioRedirectionMode(void)
  {
    unsigned puiAudioRedirectionMode;
    OLECHECK(this->get_AudioRedirectionMode((unsigned*)&puiAudioRedirectionMode));
    return puiAudioRedirectionMode;
  }

  VARIANT_BOOL __fastcall get_ConnectionBarShowPinButton(void)
  {
    VARIANT_BOOL pfShowPin;
    OLECHECK(this->get_ConnectionBarShowPinButton((VARIANT_BOOL*)&pfShowPin));
    return pfShowPin;
  }

  VARIANT_BOOL __fastcall get_PublicMode(void)
  {
    VARIANT_BOOL pfPublicMode;
    OLECHECK(this->get_PublicMode((VARIANT_BOOL*)&pfPublicMode));
    return pfPublicMode;
  }

  VARIANT_BOOL __fastcall get_RedirectDevices(void)
  {
    VARIANT_BOOL pfRedirectPnPDevices;
    OLECHECK(this->get_RedirectDevices((VARIANT_BOOL*)&pfRedirectPnPDevices));
    return pfRedirectPnPDevices;
  }

  VARIANT_BOOL __fastcall get_RedirectPOSDevices(void)
  {
    VARIANT_BOOL pfRedirectPOSDevices;
    OLECHECK(this->get_RedirectPOSDevices((VARIANT_BOOL*)&pfRedirectPOSDevices));
    return pfRedirectPOSDevices;
  }

  long __fastcall get_BitmapVirtualCache32BppSize(void)
  {
    long pBitmapVirtualCache32BppSize;
    OLECHECK(this->get_BitmapVirtualCache32BppSize((long*)&pBitmapVirtualCache32BppSize));
    return pBitmapVirtualCache32BppSize;
  }


  __property   VARIANT_BOOL    RedirectClipboard = {read = get_RedirectClipboard, write = set_RedirectClipboard};
  __property   unsigned        AudioRedirectionMode = {read = get_AudioRedirectionMode, write = set_AudioRedirectionMode};
  __property   VARIANT_BOOL    ConnectionBarShowPinButton = {read = get_ConnectionBarShowPinButton, write = set_ConnectionBarShowPinButton};
  __property   VARIANT_BOOL    PublicMode = {read = get_PublicMode, write = set_PublicMode};
  __property   VARIANT_BOOL    RedirectDevices = {read = get_RedirectDevices, write = set_RedirectDevices};
  __property   VARIANT_BOOL    RedirectPOSDevices = {read = get_RedirectPOSDevices, write = set_RedirectPOSDevices};
  __property   long            BitmapVirtualCache32BppSize = {read = get_BitmapVirtualCache32BppSize, write = set_BitmapVirtualCache32BppSize};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ITSRemoteProgram
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FDD029F9-467A-4C49-8529-64B521DBD1B4}
// *********************************************************************//
interface ITSRemoteProgram  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_RemoteProgramMode(VARIANT_BOOL pvboolRemoteProgramMode/*[in]*/) = 0; // [200]
  virtual HRESULT STDMETHODCALLTYPE get_RemoteProgramMode(VARIANT_BOOL* pvboolRemoteProgramMode/*[out,retval]*/) = 0; // [200]
  virtual HRESULT STDMETHODCALLTYPE ServerStartProgram(BSTR bstrExecutablePath/*[in]*/, 
                                                       BSTR bstrFilePath/*[in]*/, 
                                                       BSTR bstrWorkingDirectory/*[in]*/, 
                                                       VARIANT_BOOL vbExpandEnvVarInWorkingDirectoryOnServer/*[in]*/, 
                                                       BSTR bstrArguments/*[in]*/, 
                                                       VARIANT_BOOL vbExpandEnvVarInArgumentsOnServer/*[in]*/) = 0; // [201]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_RemoteProgramMode(void)
  {
    VARIANT_BOOL pvboolRemoteProgramMode;
    OLECHECK(this->get_RemoteProgramMode((VARIANT_BOOL*)&pvboolRemoteProgramMode));
    return pvboolRemoteProgramMode;
  }


  __property   VARIANT_BOOL    RemoteProgramMode = {read = get_RemoteProgramMode, write = set_RemoteProgramMode};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientShell
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D012AE6D-C19A-4BFE-B367-201F8911F134}
// *********************************************************************//
interface IMsRdpClientShell  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Launch(void) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_RdpFileContents(BSTR pszRdpFile/*[in]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_RdpFileContents(BSTR* pszRdpFile/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE SetRdpProperty(BSTR szProperty/*[in]*/, VARIANT Value/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE GetRdpProperty(BSTR szProperty/*[in]*/, 
                                                   VARIANT* pValue/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE get_IsRemoteProgramClientInstalled(VARIANT_BOOL* pbClientInstalled/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE set_PublicMode(VARIANT_BOOL pfPublicMode/*[in]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE get_PublicMode(VARIANT_BOOL* pfPublicMode/*[out,retval]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE ShowTrustedSitesManagementDialog(void) = 0; // [212]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_RdpFileContents(void)
  {
    BSTR pszRdpFile = 0;
    OLECHECK(this->get_RdpFileContents((BSTR*)&pszRdpFile));
    return pszRdpFile;
  }

  VARIANT __fastcall GetRdpProperty(BSTR szProperty/*[in]*/)
  {
    VARIANT pValue;
    OLECHECK(this->GetRdpProperty(szProperty, (VARIANT*)&pValue));
    return pValue;
  }

  VARIANT_BOOL __fastcall get_IsRemoteProgramClientInstalled(void)
  {
    VARIANT_BOOL pbClientInstalled;
    OLECHECK(this->get_IsRemoteProgramClientInstalled((VARIANT_BOOL*)&pbClientInstalled));
    return pbClientInstalled;
  }

  VARIANT_BOOL __fastcall get_PublicMode(void)
  {
    VARIANT_BOOL pfPublicMode;
    OLECHECK(this->get_PublicMode((VARIANT_BOOL*)&pfPublicMode));
    return pfPublicMode;
  }


  __property   BSTR            RdpFileContents = {read = get_RdpFileContents, write = set_RdpFileContents};
  __property   VARIANT_BOOL    IsRemoteProgramClientInstalled = {read = get_IsRemoteProgramClientInstalled};
  __property   VARIANT_BOOL    PublicMode = {read = get_PublicMode, write = set_PublicMode};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpDeviceCollection
// Flags:     (0)
// GUID:      {56540617-D281-488C-8738-6A8FDF64A118}
// *********************************************************************//
interface IMsRdpDeviceCollection  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE RescanDevices(VARIANT_BOOL vboolDynRedir/*[in]*/) = 0; // [226]
  virtual HRESULT STDMETHODCALLTYPE get_DeviceByIndex(unsigned_long index/*[in]*/, 
                                                      Mstsclib_tlb::IMsRdpDevice** ppDevice/*[out,retval]*/) = 0; // [228]
  virtual HRESULT STDMETHODCALLTYPE get_DeviceById(BSTR devInstanceId/*[in]*/, 
                                                   Mstsclib_tlb::IMsRdpDevice** ppDevice/*[out,retval]*/) = 0; // [227]
  virtual HRESULT STDMETHODCALLTYPE get_DeviceCount(unsigned_long* pDeviceCount/*[out,retval]*/) = 0; // [225]
};

// *********************************************************************//
// Interface: IMsRdpDevice
// Flags:     (0)
// GUID:      {60C3B9C8-9E92-4F5E-A3E7-604A912093EA}
// *********************************************************************//
interface IMsRdpDevice  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DeviceInstanceId(BSTR* pDevInstanceId/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_FriendlyName(BSTR* pFriendlyName/*[out,retval]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE get_DeviceDescription(BSTR* pDeviceDescription/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_RedirectionState(VARIANT_BOOL pvboolRedirState/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_RedirectionState(VARIANT_BOOL* pvboolRedirState/*[out,retval]*/) = 0; // [223]
};

// *********************************************************************//
// Interface: IMsRdpDriveCollection
// Flags:     (0)
// GUID:      {7FF17599-DA2C-4677-AD35-F60C04FE1585}
// *********************************************************************//
interface IMsRdpDriveCollection  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE RescanDrives(VARIANT_BOOL vboolDynRedir) = 0; // [232]
  virtual HRESULT STDMETHODCALLTYPE get_DriveByIndex(unsigned_long index/*[in]*/, 
                                                     Mstsclib_tlb::IMsRdpDrive** ppDevice/*[out,retval]*/) = 0; // [231]
  virtual HRESULT STDMETHODCALLTYPE get_DriveCount(unsigned_long* pDriveCount/*[out,retval]*/) = 0; // [233]
};

// *********************************************************************//
// Interface: IMsRdpDrive
// Flags:     (0)
// GUID:      {D28B5458-F694-47A8-8E61-40356A767E46}
// *********************************************************************//
interface IMsRdpDrive  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pName/*[out,retval]*/) = 0; // [229]
  virtual HRESULT STDMETHODCALLTYPE set_RedirectionState(VARIANT_BOOL pvboolRedirState/*[in]*/) = 0; // [230]
  virtual HRESULT STDMETHODCALLTYPE get_RedirectionState(VARIANT_BOOL* pvboolRedirState/*[out,retval]*/) = 0; // [230]
};

// *********************************************************************//
// Interface: IMsRdpClient6
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D43B7D80-8517-4B6D-9EAC-96AD6800D7F2}
// *********************************************************************//
interface IMsRdpClient6  : public Mstsclib_tlb::IMsRdpClient5
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_AdvancedSettings7(Mstsclib_tlb::IMsRdpClientAdvancedSettings6** ppAdvSettings/*[out,retval]*/) = 0; // [507]
  virtual HRESULT STDMETHODCALLTYPE get_TransportSettings2(Mstsclib_tlb::IMsRdpClientTransportSettings2** ppXportSet2/*[out,retval]*/) = 0; // [506]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr __fastcall get_AdvancedSettings7(void)
  {
    Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr ppAdvSettings;
    OLECHECK(this->get_AdvancedSettings7(&ppAdvSettings));
    return ppAdvSettings;
  }

  Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr __fastcall get_TransportSettings2(void)
  {
    Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr ppXportSet2;
    OLECHECK(this->get_TransportSettings2(&ppXportSet2));
    return ppXportSet2;
  }


  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr AdvancedSettings7 = {read = get_AdvancedSettings7};
  __property   Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr TransportSettings2 = {read = get_TransportSettings2};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientNonScriptable4
// Flags:     (0)
// GUID:      {F50FA8AA-1C7D-4F59-B15C-A90CACAE1FCB}
// *********************************************************************//
interface IMsRdpClientNonScriptable4  : public Mstsclib_tlb::IMsRdpClientNonScriptable3
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_RedirectionWarningType(Mstsclib_tlb::RedirectionWarningType pWrnType/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_RedirectionWarningType(Mstsclib_tlb::RedirectionWarningType* pWrnType/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_MarkRdpSettingsSecure(VARIANT_BOOL pfRdpSecure/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_MarkRdpSettingsSecure(VARIANT_BOOL* pfRdpSecure/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_PublisherCertificateChain(VARIANT* pVarCert/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_PublisherCertificateChain(VARIANT* pVarCert/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_WarnAboutPrinterRedirection(VARIANT_BOOL pfWarn/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_WarnAboutPrinterRedirection(VARIANT_BOOL* pfWarn/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_AllowCredentialSaving(VARIANT_BOOL pfAllowSave/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_AllowCredentialSaving(VARIANT_BOOL* pfAllowSave/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_PromptForCredsOnClient(VARIANT_BOOL pfPromptForCredsOnClient/*[in]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE get_PromptForCredsOnClient(VARIANT_BOOL* pfPromptForCredsOnClient/*[out,retval]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE set_LaunchedViaClientShellInterface(VARIANT_BOOL pfLaunchedViaClientShellInterface/*[in]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE get_LaunchedViaClientShellInterface(VARIANT_BOOL* pfLaunchedViaClientShellInterface/*[out,retval]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE set_TrustedZoneSite(VARIANT_BOOL pfIsTrustedZone/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE get_TrustedZoneSite(VARIANT_BOOL* pfIsTrustedZone/*[out,retval]*/) = 0; // [32]
};

// *********************************************************************//
// Interface: IMsRdpClientAdvancedSettings6
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {222C4B5D-45D9-4DF0-A7C6-60CF9089D285}
// *********************************************************************//
interface IMsRdpClientAdvancedSettings6  : public Mstsclib_tlb::IMsRdpClientAdvancedSettings5
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_RelativeMouseMode(VARIANT_BOOL pfRelativeMouseMode/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_RelativeMouseMode(VARIANT_BOOL* pfRelativeMouseMode/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_AuthenticationServiceClass(BSTR* pbstrAuthServiceClass/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_AuthenticationServiceClass(BSTR pbstrAuthServiceClass/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_PCB(BSTR* bstrPCB/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_PCB(BSTR bstrPCB/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_HotKeyFocusReleaseLeft(long HotKeyFocusReleaseLeft/*[in]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE get_HotKeyFocusReleaseLeft(long* HotKeyFocusReleaseLeft/*[out,retval]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE set_HotKeyFocusReleaseRight(long HotKeyFocusReleaseRight/*[in]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE get_HotKeyFocusReleaseRight(long* HotKeyFocusReleaseRight/*[out,retval]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE set_EnableCredSspSupport(VARIANT_BOOL pfEnableSupport/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_EnableCredSspSupport(VARIANT_BOOL* pfEnableSupport/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_AuthenticationType(unsigned* puiAuthType/*[out,retval]*/) = 0; // [226]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectToAdministerServer(VARIANT_BOOL pConnectToAdministerServer/*[in]*/) = 0; // [227]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectToAdministerServer(VARIANT_BOOL* pConnectToAdministerServer/*[out,retval]*/) = 0; // [227]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_RelativeMouseMode(void)
  {
    VARIANT_BOOL pfRelativeMouseMode;
    OLECHECK(this->get_RelativeMouseMode((VARIANT_BOOL*)&pfRelativeMouseMode));
    return pfRelativeMouseMode;
  }

  BSTR __fastcall get_AuthenticationServiceClass(void)
  {
    BSTR pbstrAuthServiceClass = 0;
    OLECHECK(this->get_AuthenticationServiceClass((BSTR*)&pbstrAuthServiceClass));
    return pbstrAuthServiceClass;
  }

  BSTR __fastcall get_PCB(void)
  {
    BSTR bstrPCB = 0;
    OLECHECK(this->get_PCB((BSTR*)&bstrPCB));
    return bstrPCB;
  }

  long __fastcall get_HotKeyFocusReleaseLeft(void)
  {
    long HotKeyFocusReleaseLeft;
    OLECHECK(this->get_HotKeyFocusReleaseLeft((long*)&HotKeyFocusReleaseLeft));
    return HotKeyFocusReleaseLeft;
  }

  long __fastcall get_HotKeyFocusReleaseRight(void)
  {
    long HotKeyFocusReleaseRight;
    OLECHECK(this->get_HotKeyFocusReleaseRight((long*)&HotKeyFocusReleaseRight));
    return HotKeyFocusReleaseRight;
  }

  VARIANT_BOOL __fastcall get_EnableCredSspSupport(void)
  {
    VARIANT_BOOL pfEnableSupport;
    OLECHECK(this->get_EnableCredSspSupport((VARIANT_BOOL*)&pfEnableSupport));
    return pfEnableSupport;
  }

  unsigned __fastcall get_AuthenticationType(void)
  {
    unsigned puiAuthType;
    OLECHECK(this->get_AuthenticationType((unsigned*)&puiAuthType));
    return puiAuthType;
  }

  VARIANT_BOOL __fastcall get_ConnectToAdministerServer(void)
  {
    VARIANT_BOOL pConnectToAdministerServer;
    OLECHECK(this->get_ConnectToAdministerServer((VARIANT_BOOL*)&pConnectToAdministerServer));
    return pConnectToAdministerServer;
  }


  __property   VARIANT_BOOL    RelativeMouseMode = {read = get_RelativeMouseMode, write = set_RelativeMouseMode};
  __property   BSTR            AuthenticationServiceClass = {read = get_AuthenticationServiceClass, write = set_AuthenticationServiceClass};
  __property   BSTR            PCB = {read = get_PCB, write = set_PCB};
  __property   long            HotKeyFocusReleaseLeft = {read = get_HotKeyFocusReleaseLeft, write = set_HotKeyFocusReleaseLeft};
  __property   long            HotKeyFocusReleaseRight = {read = get_HotKeyFocusReleaseRight, write = set_HotKeyFocusReleaseRight};
  __property   VARIANT_BOOL    EnableCredSspSupport = {read = get_EnableCredSspSupport, write = set_EnableCredSspSupport};
  __property   unsigned        AuthenticationType = {read = get_AuthenticationType};
  __property   VARIANT_BOOL    ConnectToAdministerServer = {read = get_ConnectToAdministerServer, write = set_ConnectToAdministerServer};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientTransportSettings2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {67341688-D606-4C73-A5D2-2E0489009319}
// *********************************************************************//
interface IMsRdpClientTransportSettings2  : public Mstsclib_tlb::IMsRdpClientTransportSettings
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_GatewayCredSharing(unsigned_long pulProxyCredSharing/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayCredSharing(unsigned_long* pulProxyCredSharing/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_GatewayPreAuthRequirement(unsigned_long pulProxyPreAuthRequirement/*[in]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayPreAuthRequirement(unsigned_long* pulProxyPreAuthRequirement/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE set_GatewayPreAuthServerAddr(BSTR pbstrProxyPreAuthServerAddr/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayPreAuthServerAddr(BSTR* pbstrProxyPreAuthServerAddr/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_GatewaySupportUrl(BSTR pbstrProxySupportUrl/*[in]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE get_GatewaySupportUrl(BSTR* pbstrProxySupportUrl/*[out,retval]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE set_GatewayEncryptedOtpCookie(BSTR pbstrEncryptedOtpCookie/*[in]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayEncryptedOtpCookie(BSTR* pbstrEncryptedOtpCookie/*[out,retval]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE set_GatewayEncryptedOtpCookieSize(unsigned_long pulEncryptedOtpCookieSize/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayEncryptedOtpCookieSize(unsigned_long* pulEncryptedOtpCookieSize/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_GatewayUsername(BSTR pProxyUsername/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayUsername(BSTR* pProxyUsername/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_GatewayDomain(BSTR pProxyDomain/*[in]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayDomain(BSTR* pProxyDomain/*[out,retval]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE set_GatewayPassword(BSTR Param1/*[in]*/) = 0; // [225]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  unsigned_long __fastcall get_GatewayCredSharing(void)
  {
    unsigned_long pulProxyCredSharing;
    OLECHECK(this->get_GatewayCredSharing((unsigned_long*)&pulProxyCredSharing));
    return pulProxyCredSharing;
  }

  unsigned_long __fastcall get_GatewayPreAuthRequirement(void)
  {
    unsigned_long pulProxyPreAuthRequirement;
    OLECHECK(this->get_GatewayPreAuthRequirement((unsigned_long*)&pulProxyPreAuthRequirement));
    return pulProxyPreAuthRequirement;
  }

  BSTR __fastcall get_GatewayPreAuthServerAddr(void)
  {
    BSTR pbstrProxyPreAuthServerAddr = 0;
    OLECHECK(this->get_GatewayPreAuthServerAddr((BSTR*)&pbstrProxyPreAuthServerAddr));
    return pbstrProxyPreAuthServerAddr;
  }

  BSTR __fastcall get_GatewaySupportUrl(void)
  {
    BSTR pbstrProxySupportUrl = 0;
    OLECHECK(this->get_GatewaySupportUrl((BSTR*)&pbstrProxySupportUrl));
    return pbstrProxySupportUrl;
  }

  BSTR __fastcall get_GatewayEncryptedOtpCookie(void)
  {
    BSTR pbstrEncryptedOtpCookie = 0;
    OLECHECK(this->get_GatewayEncryptedOtpCookie((BSTR*)&pbstrEncryptedOtpCookie));
    return pbstrEncryptedOtpCookie;
  }

  unsigned_long __fastcall get_GatewayEncryptedOtpCookieSize(void)
  {
    unsigned_long pulEncryptedOtpCookieSize;
    OLECHECK(this->get_GatewayEncryptedOtpCookieSize((unsigned_long*)&pulEncryptedOtpCookieSize));
    return pulEncryptedOtpCookieSize;
  }

  BSTR __fastcall get_GatewayUsername(void)
  {
    BSTR pProxyUsername = 0;
    OLECHECK(this->get_GatewayUsername((BSTR*)&pProxyUsername));
    return pProxyUsername;
  }

  BSTR __fastcall get_GatewayDomain(void)
  {
    BSTR pProxyDomain = 0;
    OLECHECK(this->get_GatewayDomain((BSTR*)&pProxyDomain));
    return pProxyDomain;
  }


  __property   unsigned_long   GatewayCredSharing = {read = get_GatewayCredSharing, write = set_GatewayCredSharing};
  __property   unsigned_long   GatewayPreAuthRequirement = {read = get_GatewayPreAuthRequirement, write = set_GatewayPreAuthRequirement};
  __property   BSTR            GatewayPreAuthServerAddr = {read = get_GatewayPreAuthServerAddr, write = set_GatewayPreAuthServerAddr};
  __property   BSTR            GatewaySupportUrl = {read = get_GatewaySupportUrl, write = set_GatewaySupportUrl};
  __property   BSTR            GatewayEncryptedOtpCookie = {read = get_GatewayEncryptedOtpCookie, write = set_GatewayEncryptedOtpCookie};
  __property   unsigned_long   GatewayEncryptedOtpCookieSize = {read = get_GatewayEncryptedOtpCookieSize, write = set_GatewayEncryptedOtpCookieSize};
  __property   BSTR            GatewayUsername = {read = get_GatewayUsername, write = set_GatewayUsername};
  __property   BSTR            GatewayDomain = {read = get_GatewayDomain, write = set_GatewayDomain};
  __property   BSTR            GatewayPassword = {write = set_GatewayPassword};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClient7
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B2A5B5CE-3461-444A-91D4-ADD26D070638}
// *********************************************************************//
interface IMsRdpClient7  : public Mstsclib_tlb::IMsRdpClient6
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_AdvancedSettings8(Mstsclib_tlb::IMsRdpClientAdvancedSettings7** ppAdvSettings/*[out,retval]*/) = 0; // [600]
  virtual HRESULT STDMETHODCALLTYPE get_TransportSettings3(Mstsclib_tlb::IMsRdpClientTransportSettings3** ppXportSet3/*[out,retval]*/) = 0; // [601]
  virtual HRESULT STDMETHODCALLTYPE GetStatusText(unsigned statusCode/*[in]*/, 
                                                  BSTR* pBstrStatusText/*[out,retval]*/) = 0; // [602]
  virtual HRESULT STDMETHODCALLTYPE get_SecuredSettings3(Mstsclib_tlb::IMsRdpClientSecuredSettings2** ppSecuredSettings/*[out,retval]*/) = 0; // [603]
  virtual HRESULT STDMETHODCALLTYPE get_RemoteProgram2(Mstsclib_tlb::ITSRemoteProgram2** ppRemoteProgram/*[out,retval]*/) = 0; // [604]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr __fastcall get_AdvancedSettings8(void)
  {
    Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr ppAdvSettings;
    OLECHECK(this->get_AdvancedSettings8(&ppAdvSettings));
    return ppAdvSettings;
  }

  Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr __fastcall get_TransportSettings3(void)
  {
    Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr ppXportSet3;
    OLECHECK(this->get_TransportSettings3(&ppXportSet3));
    return ppXportSet3;
  }

  BSTR __fastcall GetStatusText(unsigned statusCode/*[in]*/)
  {
    BSTR pBstrStatusText = 0;
    OLECHECK(this->GetStatusText(statusCode, (BSTR*)&pBstrStatusText));
    return pBstrStatusText;
  }

  Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr __fastcall get_SecuredSettings3(void)
  {
    Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr ppSecuredSettings;
    OLECHECK(this->get_SecuredSettings3(&ppSecuredSettings));
    return ppSecuredSettings;
  }

  Mstsclib_tlb::ITSRemoteProgram2Ptr __fastcall get_RemoteProgram2(void)
  {
    Mstsclib_tlb::ITSRemoteProgram2Ptr ppRemoteProgram;
    OLECHECK(this->get_RemoteProgram2(&ppRemoteProgram));
    return ppRemoteProgram;
  }


  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr AdvancedSettings8 = {read = get_AdvancedSettings8};
  __property   Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr TransportSettings3 = {read = get_TransportSettings3};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr SecuredSettings3 = {read = get_SecuredSettings3};
  __property   Mstsclib_tlb::ITSRemoteProgram2Ptr RemoteProgram2 = {read = get_RemoteProgram2};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientNonScriptable5
// Flags:     (0)
// GUID:      {4F6996D5-D7B1-412C-B0FF-063718566907}
// *********************************************************************//
interface IMsRdpClientNonScriptable5  : public Mstsclib_tlb::IMsRdpClientNonScriptable4
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_UseMultimon(VARIANT_BOOL pfUseMultimon/*[in]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE get_UseMultimon(VARIANT_BOOL* pfUseMultimon/*[out,retval]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE get_RemoteMonitorCount(unsigned_long* pcRemoteMonitors/*[out,retval]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE GetRemoteMonitorsBoundingBox(long* pLeft/*[out]*/, 
                                                                 long* pTop/*[out]*/, 
                                                                 long* pRight/*[out]*/, 
                                                                 long* pBottom/*[out]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE get_RemoteMonitorLayoutMatchesLocal(VARIANT_BOOL* pfRemoteMatchesLocal/*[out,retval]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE set_DisableConnectionBar(VARIANT_BOOL Param1/*[in]*/) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE set_DisableRemoteAppCapsCheck(VARIANT_BOOL pfDisableRemoteAppCapsCheck/*[in]*/) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE get_DisableRemoteAppCapsCheck(VARIANT_BOOL* pfDisableRemoteAppCapsCheck/*[out,retval]*/) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE set_WarnAboutDirectXRedirection(VARIANT_BOOL pfWarn/*[in]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE get_WarnAboutDirectXRedirection(VARIANT_BOOL* pfWarn/*[out,retval]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE set_AllowPromptingForCredentials(VARIANT_BOOL pfAllow/*[in]*/) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE get_AllowPromptingForCredentials(VARIANT_BOOL* pfAllow/*[out,retval]*/) = 0; // [41]
};

// *********************************************************************//
// Interface: IMsRdpClientAdvancedSettings7
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {26036036-4010-4578-8091-0DB9A1EDF9C3}
// *********************************************************************//
interface IMsRdpClientAdvancedSettings7  : public Mstsclib_tlb::IMsRdpClientAdvancedSettings6
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_AudioCaptureRedirectionMode(VARIANT_BOOL pfRedir/*[in]*/) = 0; // [228]
  virtual HRESULT STDMETHODCALLTYPE get_AudioCaptureRedirectionMode(VARIANT_BOOL* pfRedir/*[out,retval]*/) = 0; // [228]
  virtual HRESULT STDMETHODCALLTYPE set_VideoPlaybackMode(unsigned pVideoPlaybackMode/*[in]*/) = 0; // [229]
  virtual HRESULT STDMETHODCALLTYPE get_VideoPlaybackMode(unsigned* pVideoPlaybackMode/*[out,retval]*/) = 0; // [229]
  virtual HRESULT STDMETHODCALLTYPE set_EnableSuperPan(VARIANT_BOOL pfEnableSuperPan/*[in]*/) = 0; // [230]
  virtual HRESULT STDMETHODCALLTYPE get_EnableSuperPan(VARIANT_BOOL* pfEnableSuperPan/*[out,retval]*/) = 0; // [230]
  virtual HRESULT STDMETHODCALLTYPE set_SuperPanAccelerationFactor(unsigned_long puAccelFactor/*[in]*/) = 0; // [231]
  virtual HRESULT STDMETHODCALLTYPE get_SuperPanAccelerationFactor(unsigned_long* puAccelFactor/*[out,retval]*/) = 0; // [231]
  virtual HRESULT STDMETHODCALLTYPE set_NegotiateSecurityLayer(VARIANT_BOOL pfNegotiate/*[in]*/) = 0; // [232]
  virtual HRESULT STDMETHODCALLTYPE get_NegotiateSecurityLayer(VARIANT_BOOL* pfNegotiate/*[out,retval]*/) = 0; // [232]
  virtual HRESULT STDMETHODCALLTYPE set_AudioQualityMode(unsigned pAudioQualityMode/*[in]*/) = 0; // [233]
  virtual HRESULT STDMETHODCALLTYPE get_AudioQualityMode(unsigned* pAudioQualityMode/*[out,retval]*/) = 0; // [233]
  virtual HRESULT STDMETHODCALLTYPE set_RedirectDirectX(VARIANT_BOOL pfRedirectDirectX/*[in]*/) = 0; // [234]
  virtual HRESULT STDMETHODCALLTYPE get_RedirectDirectX(VARIANT_BOOL* pfRedirectDirectX/*[out,retval]*/) = 0; // [234]
  virtual HRESULT STDMETHODCALLTYPE set_NetworkConnectionType(unsigned pConnectionType/*[in]*/) = 0; // [235]
  virtual HRESULT STDMETHODCALLTYPE get_NetworkConnectionType(unsigned* pConnectionType/*[out,retval]*/) = 0; // [235]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_AudioCaptureRedirectionMode(void)
  {
    VARIANT_BOOL pfRedir;
    OLECHECK(this->get_AudioCaptureRedirectionMode((VARIANT_BOOL*)&pfRedir));
    return pfRedir;
  }

  unsigned __fastcall get_VideoPlaybackMode(void)
  {
    unsigned pVideoPlaybackMode;
    OLECHECK(this->get_VideoPlaybackMode((unsigned*)&pVideoPlaybackMode));
    return pVideoPlaybackMode;
  }

  VARIANT_BOOL __fastcall get_EnableSuperPan(void)
  {
    VARIANT_BOOL pfEnableSuperPan;
    OLECHECK(this->get_EnableSuperPan((VARIANT_BOOL*)&pfEnableSuperPan));
    return pfEnableSuperPan;
  }

  unsigned_long __fastcall get_SuperPanAccelerationFactor(void)
  {
    unsigned_long puAccelFactor;
    OLECHECK(this->get_SuperPanAccelerationFactor((unsigned_long*)&puAccelFactor));
    return puAccelFactor;
  }

  VARIANT_BOOL __fastcall get_NegotiateSecurityLayer(void)
  {
    VARIANT_BOOL pfNegotiate;
    OLECHECK(this->get_NegotiateSecurityLayer((VARIANT_BOOL*)&pfNegotiate));
    return pfNegotiate;
  }

  unsigned __fastcall get_AudioQualityMode(void)
  {
    unsigned pAudioQualityMode;
    OLECHECK(this->get_AudioQualityMode((unsigned*)&pAudioQualityMode));
    return pAudioQualityMode;
  }

  VARIANT_BOOL __fastcall get_RedirectDirectX(void)
  {
    VARIANT_BOOL pfRedirectDirectX;
    OLECHECK(this->get_RedirectDirectX((VARIANT_BOOL*)&pfRedirectDirectX));
    return pfRedirectDirectX;
  }

  unsigned __fastcall get_NetworkConnectionType(void)
  {
    unsigned pConnectionType;
    OLECHECK(this->get_NetworkConnectionType((unsigned*)&pConnectionType));
    return pConnectionType;
  }


  __property   VARIANT_BOOL    AudioCaptureRedirectionMode = {read = get_AudioCaptureRedirectionMode, write = set_AudioCaptureRedirectionMode};
  __property   unsigned        VideoPlaybackMode = {read = get_VideoPlaybackMode, write = set_VideoPlaybackMode};
  __property   VARIANT_BOOL    EnableSuperPan = {read = get_EnableSuperPan, write = set_EnableSuperPan};
  __property   unsigned_long   SuperPanAccelerationFactor = {read = get_SuperPanAccelerationFactor, write = set_SuperPanAccelerationFactor};
  __property   VARIANT_BOOL    NegotiateSecurityLayer = {read = get_NegotiateSecurityLayer, write = set_NegotiateSecurityLayer};
  __property   unsigned        AudioQualityMode = {read = get_AudioQualityMode, write = set_AudioQualityMode};
  __property   VARIANT_BOOL    RedirectDirectX = {read = get_RedirectDirectX, write = set_RedirectDirectX};
  __property   unsigned        NetworkConnectionType = {read = get_NetworkConnectionType, write = set_NetworkConnectionType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientTransportSettings3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3D5B21AC-748D-41DE-8F30-E15169586BD4}
// *********************************************************************//
interface IMsRdpClientTransportSettings3  : public Mstsclib_tlb::IMsRdpClientTransportSettings2
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_GatewayCredSourceCookie(unsigned_long pulProxyCredSourceCookie/*[in]*/) = 0; // [226]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayCredSourceCookie(unsigned_long* pulProxyCredSourceCookie/*[out,retval]*/) = 0; // [226]
  virtual HRESULT STDMETHODCALLTYPE set_GatewayAuthCookieServerAddr(BSTR pbstrProxyAuthCookieServerAddr/*[in]*/) = 0; // [227]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayAuthCookieServerAddr(BSTR* pbstrProxyAuthCookieServerAddr/*[out,retval]*/) = 0; // [227]
  virtual HRESULT STDMETHODCALLTYPE set_GatewayEncryptedAuthCookie(BSTR pbstrEncryptedAuthCookie/*[in]*/) = 0; // [228]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayEncryptedAuthCookie(BSTR* pbstrEncryptedAuthCookie/*[out,retval]*/) = 0; // [228]
  virtual HRESULT STDMETHODCALLTYPE set_GatewayEncryptedAuthCookieSize(unsigned_long pulEncryptedAuthCookieSize/*[in]*/) = 0; // [229]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayEncryptedAuthCookieSize(unsigned_long* pulEncryptedAuthCookieSize/*[out,retval]*/) = 0; // [229]
  virtual HRESULT STDMETHODCALLTYPE set_GatewayAuthLoginPage(BSTR pbstrProxyAuthLoginPage/*[in]*/) = 0; // [230]
  virtual HRESULT STDMETHODCALLTYPE get_GatewayAuthLoginPage(BSTR* pbstrProxyAuthLoginPage/*[out,retval]*/) = 0; // [230]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  unsigned_long __fastcall get_GatewayCredSourceCookie(void)
  {
    unsigned_long pulProxyCredSourceCookie;
    OLECHECK(this->get_GatewayCredSourceCookie((unsigned_long*)&pulProxyCredSourceCookie));
    return pulProxyCredSourceCookie;
  }

  BSTR __fastcall get_GatewayAuthCookieServerAddr(void)
  {
    BSTR pbstrProxyAuthCookieServerAddr = 0;
    OLECHECK(this->get_GatewayAuthCookieServerAddr((BSTR*)&pbstrProxyAuthCookieServerAddr));
    return pbstrProxyAuthCookieServerAddr;
  }

  BSTR __fastcall get_GatewayEncryptedAuthCookie(void)
  {
    BSTR pbstrEncryptedAuthCookie = 0;
    OLECHECK(this->get_GatewayEncryptedAuthCookie((BSTR*)&pbstrEncryptedAuthCookie));
    return pbstrEncryptedAuthCookie;
  }

  unsigned_long __fastcall get_GatewayEncryptedAuthCookieSize(void)
  {
    unsigned_long pulEncryptedAuthCookieSize;
    OLECHECK(this->get_GatewayEncryptedAuthCookieSize((unsigned_long*)&pulEncryptedAuthCookieSize));
    return pulEncryptedAuthCookieSize;
  }

  BSTR __fastcall get_GatewayAuthLoginPage(void)
  {
    BSTR pbstrProxyAuthLoginPage = 0;
    OLECHECK(this->get_GatewayAuthLoginPage((BSTR*)&pbstrProxyAuthLoginPage));
    return pbstrProxyAuthLoginPage;
  }


  __property   unsigned_long   GatewayCredSourceCookie = {read = get_GatewayCredSourceCookie, write = set_GatewayCredSourceCookie};
  __property   BSTR            GatewayAuthCookieServerAddr = {read = get_GatewayAuthCookieServerAddr, write = set_GatewayAuthCookieServerAddr};
  __property   BSTR            GatewayEncryptedAuthCookie = {read = get_GatewayEncryptedAuthCookie, write = set_GatewayEncryptedAuthCookie};
  __property   unsigned_long   GatewayEncryptedAuthCookieSize = {read = get_GatewayEncryptedAuthCookieSize, write = set_GatewayEncryptedAuthCookieSize};
  __property   BSTR            GatewayAuthLoginPage = {read = get_GatewayAuthLoginPage, write = set_GatewayAuthLoginPage};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientSecuredSettings2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {25F2CE20-8B1D-4971-A7CD-549DAE201FC0}
// *********************************************************************//
interface IMsRdpClientSecuredSettings2  : public Mstsclib_tlb::IMsRdpClientSecuredSettings
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_PCB(BSTR* bstrPCB/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_PCB(BSTR bstrPCB/*[in]*/) = 0; // [6]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_PCB(void)
  {
    BSTR bstrPCB = 0;
    OLECHECK(this->get_PCB((BSTR*)&bstrPCB));
    return bstrPCB;
  }


  __property   BSTR            PCB = {read = get_PCB, write = set_PCB};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ITSRemoteProgram2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {92C38A7D-241A-418C-9936-099872C9AF20}
// *********************************************************************//
interface ITSRemoteProgram2  : public Mstsclib_tlb::ITSRemoteProgram
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_RemoteApplicationName(BSTR Param1/*[in]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE set_RemoteApplicationProgram(BSTR Param1/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_RemoteApplicationArgs(BSTR Param1/*[in]*/) = 0; // [204]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)


  __property   BSTR            RemoteApplicationName = {write = set_RemoteApplicationName};
  __property   BSTR            RemoteApplicationProgram = {write = set_RemoteApplicationProgram};
  __property   BSTR            RemoteApplicationArgs = {write = set_RemoteApplicationArgs};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpPreferredRedirectionInfo
// Flags:     (0)
// GUID:      {FDD029F9-9574-4DEF-8529-64B521CCCAA4}
// *********************************************************************//
interface IMsRdpPreferredRedirectionInfo  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_UseRedirectionServerName(VARIANT_BOOL pVal/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_UseRedirectionServerName(VARIANT_BOOL* pVal/*[out,retval]*/) = 0; // [1]
};

// *********************************************************************//
// Interface: IMsRdpExtendedSettings
// Flags:     (0)
// GUID:      {302D8188-0052-4807-806A-362B628F9AC5}
// *********************************************************************//
interface IMsRdpExtendedSettings  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Property(BSTR bstrPropertyName/*[in]*/, 
                                                 VARIANT* pValue/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Property(BSTR bstrPropertyName/*[in]*/, 
                                                 VARIANT* pValue/*[out,retval]*/) = 0; // [1]
};

// *********************************************************************//
// Interface: IMsRdpClient8
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4247E044-9271-43A9-BC49-E2AD9E855D62}
// *********************************************************************//
interface IMsRdpClient8  : public Mstsclib_tlb::IMsRdpClient7
{
public:
  virtual HRESULT STDMETHODCALLTYPE SendRemoteAction(Mstsclib_tlb::RemoteSessionActionType actionType/*[in]*/) = 0; // [700]
  virtual HRESULT STDMETHODCALLTYPE get_AdvancedSettings9(Mstsclib_tlb::IMsRdpClientAdvancedSettings8** ppAdvSettings/*[out,retval]*/) = 0; // [701]
  virtual HRESULT STDMETHODCALLTYPE Reconnect(unsigned_long ulWidth/*[in]*/, 
                                              unsigned_long ulHeight/*[in]*/, 
                                              Mstsclib_tlb::ControlReconnectStatus* pReconnectStatus/*[out,retval]*/) = 0; // [702]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr __fastcall get_AdvancedSettings9(void)
  {
    Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr ppAdvSettings;
    OLECHECK(this->get_AdvancedSettings9(&ppAdvSettings));
    return ppAdvSettings;
  }

  Mstsclib_tlb::ControlReconnectStatus __fastcall Reconnect(unsigned_long ulWidth/*[in]*/, 
                                                            unsigned_long ulHeight/*[in]*/)
  {
    Mstsclib_tlb::ControlReconnectStatus pReconnectStatus;
    OLECHECK(this->Reconnect(ulWidth, ulHeight, (Mstsclib_tlb::ControlReconnectStatus*)&pReconnectStatus));
    return pReconnectStatus;
  }


  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr AdvancedSettings9 = {read = get_AdvancedSettings9};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientAdvancedSettings8
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {89ACB528-2557-4D16-8625-226A30E97E9A}
// *********************************************************************//
interface IMsRdpClientAdvancedSettings8  : public Mstsclib_tlb::IMsRdpClientAdvancedSettings7
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_BandwidthDetection(VARIANT_BOOL pfAutodetect/*[in]*/) = 0; // [236]
  virtual HRESULT STDMETHODCALLTYPE get_BandwidthDetection(VARIANT_BOOL* pfAutodetect/*[out,retval]*/) = 0; // [236]
  virtual HRESULT STDMETHODCALLTYPE set_ClientProtocolSpec(Mstsclib_tlb::ClientSpec pClientMode/*[in]*/) = 0; // [237]
  virtual HRESULT STDMETHODCALLTYPE get_ClientProtocolSpec(Mstsclib_tlb::ClientSpec* pClientMode/*[out,retval]*/) = 0; // [237]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_BandwidthDetection(void)
  {
    VARIANT_BOOL pfAutodetect;
    OLECHECK(this->get_BandwidthDetection((VARIANT_BOOL*)&pfAutodetect));
    return pfAutodetect;
  }

  Mstsclib_tlb::ClientSpec __fastcall get_ClientProtocolSpec(void)
  {
    Mstsclib_tlb::ClientSpec pClientMode;
    OLECHECK(this->get_ClientProtocolSpec((Mstsclib_tlb::ClientSpec*)&pClientMode));
    return pClientMode;
  }


  __property   VARIANT_BOOL    BandwidthDetection = {read = get_BandwidthDetection, write = set_BandwidthDetection};
  __property   Mstsclib_tlb::ClientSpec ClientProtocolSpec = {read = get_ClientProtocolSpec, write = set_ClientProtocolSpec};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClient9
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {28904001-04B6-436C-A55B-0AF1A0883DC9}
// *********************************************************************//
interface IMsRdpClient9  : public Mstsclib_tlb::IMsRdpClient8
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_TransportSettings4(Mstsclib_tlb::IMsRdpClientTransportSettings4** ppXportSet4/*[out,retval]*/) = 0; // [800]
  virtual HRESULT STDMETHODCALLTYPE SyncSessionDisplaySettings(void) = 0; // [801]
  virtual HRESULT STDMETHODCALLTYPE UpdateSessionDisplaySettings(unsigned_long ulDesktopWidth/*[in]*/, 
                                                                 unsigned_long ulDesktopHeight/*[in]*/, 
                                                                 unsigned_long ulPhysicalWidth/*[in]*/, 
                                                                 unsigned_long ulPhysicalHeight/*[in]*/, 
                                                                 unsigned_long ulOrientation/*[in]*/, 
                                                                 unsigned_long ulDesktopScaleFactor/*[in]*/, 
                                                                 unsigned_long ulDeviceScaleFactor/*[in]*/) = 0; // [802]
  virtual HRESULT STDMETHODCALLTYPE attachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/) = 0; // [803]
  virtual HRESULT STDMETHODCALLTYPE detachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/) = 0; // [804]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mstsclib_tlb::IMsRdpClientTransportSettings4Ptr __fastcall get_TransportSettings4(void)
  {
    Mstsclib_tlb::IMsRdpClientTransportSettings4Ptr ppXportSet4;
    OLECHECK(this->get_TransportSettings4(&ppXportSet4));
    return ppXportSet4;
  }


  __property   Mstsclib_tlb::IMsRdpClientTransportSettings4Ptr TransportSettings4 = {read = get_TransportSettings4};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientTransportSettings4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {011C3236-4D81-4515-9143-067AB630D299}
// *********************************************************************//
interface IMsRdpClientTransportSettings4  : public Mstsclib_tlb::IMsRdpClientTransportSettings3
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_GatewayBrokeringType(unsigned_long Param1/*[in]*/) = 0; // [231]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)


  __property   unsigned_long   GatewayBrokeringType = {write = set_GatewayBrokeringType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClient10
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7ED92C39-EB38-4927-A70A-708AC5A59321}
// *********************************************************************//
interface IMsRdpClient10  : public Mstsclib_tlb::IMsRdpClient9
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_RemoteProgram3(Mstsclib_tlb::ITSRemoteProgram3** ppRemoteProgram/*[out,retval]*/) = 0; // [900]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mstsclib_tlb::ITSRemoteProgram3Ptr __fastcall get_RemoteProgram3(void)
  {
    Mstsclib_tlb::ITSRemoteProgram3Ptr ppRemoteProgram;
    OLECHECK(this->get_RemoteProgram3(&ppRemoteProgram));
    return ppRemoteProgram;
  }


  __property   Mstsclib_tlb::ITSRemoteProgram3Ptr RemoteProgram3 = {read = get_RemoteProgram3};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ITSRemoteProgram3
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4B84EA77-ACEA-418C-881A-4A8C28AB1510}
// *********************************************************************//
interface ITSRemoteProgram3  : public Mstsclib_tlb::ITSRemoteProgram2
{
public:
  virtual HRESULT STDMETHODCALLTYPE ServerStartApp(BSTR bstrAppUserModelId/*[in]*/, 
                                                   BSTR bstrArguments/*[in]*/, 
                                                   VARIANT_BOOL vbExpandEnvVarInArgumentsOnServer/*[in]*/) = 0; // [205]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMsRdpClientNonScriptable6
// Flags:     (0)
// GUID:      {05293249-B28B-4BD8-BE64-1B2F496B910E}
// *********************************************************************//
interface IMsRdpClientNonScriptable6  : public Mstsclib_tlb::IMsRdpClientNonScriptable5
{
public:
  virtual HRESULT STDMETHODCALLTYPE SendLocation2D(double latitude/*[in]*/, double longitude/*[in]*/) = 0; // [42]
  virtual HRESULT STDMETHODCALLTYPE SendLocation3D(double latitude/*[in]*/, double longitude/*[in]*/, 
                                                   int altitude/*[in]*/) = 0; // [43]
};

// *********************************************************************//
// Interface: IMsRdpClientNonScriptable7
// Flags:     (0)
// GUID:      {71B4A60A-FE21-46D8-A39B-8E32BA0C5ECC}
// *********************************************************************//
interface IMsRdpClientNonScriptable7  : public Mstsclib_tlb::IMsRdpClientNonScriptable6
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CameraRedirConfigCollection(Mstsclib_tlb::IMsRdpCameraRedirConfigCollection** ppCameraCollection/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE DisableDpiCursorScalingForProcess(void) = 0; // [45]
  virtual HRESULT STDMETHODCALLTYPE get_Clipboard(Mstsclib_tlb::IMsRdpClipboard** ppClipboard/*[out,retval]*/) = 0; // [46]
};

// *********************************************************************//
// Interface: IMsRdpCameraRedirConfigCollection
// Flags:     (0)
// GUID:      {AE45252B-AAAB-4504-B681-649D6073A37A}
// *********************************************************************//
interface IMsRdpCameraRedirConfigCollection  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE Rescan(void) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(unsigned_long* pCount/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_ByIndex(unsigned_long index/*[in]*/, 
                                                Mstsclib_tlb::IMsRdpCameraRedirConfig** ppConfig/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_BySymbolicLink(BSTR SymbolicLink/*[in]*/, 
                                                       Mstsclib_tlb::IMsRdpCameraRedirConfig** ppConfig/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_ByInstanceId(BSTR InstanceId/*[in]*/, 
                                                     Mstsclib_tlb::IMsRdpCameraRedirConfig** ppConfig/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE AddConfig(BSTR SymbolicLink/*[in]*/, 
                                              VARIANT_BOOL fRedirected/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_RedirectByDefault(VARIANT_BOOL pfRedirect/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_RedirectByDefault(VARIANT_BOOL* pfRedirect/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_EncodeVideo(VARIANT_BOOL pfEncode/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_EncodeVideo(VARIANT_BOOL* pfEncode/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_EncodingQuality(Mstsclib_tlb::CameraRedirEncodingQuality pEncodingQuality/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_EncodingQuality(Mstsclib_tlb::CameraRedirEncodingQuality* pEncodingQuality/*[out,retval]*/) = 0; // [9]
};

// *********************************************************************//
// Interface: IMsRdpCameraRedirConfig
// Flags:     (0)
// GUID:      {09750604-D625-47C1-9FCD-F09F735705D7}
// *********************************************************************//
interface IMsRdpCameraRedirConfig  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_FriendlyName(BSTR* pFriendlyName/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_SymbolicLink(BSTR* pSymbolicLink/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_InstanceId(BSTR* pInstanceId/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_ParentInstanceId(BSTR* pParentInstanceId/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_Redirected(VARIANT_BOOL pfRedirected/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_Redirected(VARIANT_BOOL* pfRedirected/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_DeviceExists(VARIANT_BOOL* pfExists/*[out,retval]*/) = 0; // [6]
};

// *********************************************************************//
// Interface: IMsRdpClipboard
// Flags:     (0)
// GUID:      {2E769EE8-00C7-43DC-AFD9-235D75B72A40}
// *********************************************************************//
interface IMsRdpClipboard  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE CanSyncLocalClipboardToRemoteSession(VARIANT_BOOL* pfSync/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE SyncLocalClipboardToRemoteSession(void) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE CanSyncRemoteClipboardToLocalSession(VARIANT_BOOL* pfSync/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE SyncRemoteClipboardToLocalSession(void) = 0; // [4]
};

// *********************************************************************//
// Interface: IRemoteDesktopClientEvents
// Flags:     (4096) Dispatchable
// GUID:      {079863B7-6D47-4105-8BFE-0CDCB360E67D}
// *********************************************************************//
interface IRemoteDesktopClientEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnConnecting()
  {
    _TDispID _dispid(/* OnConnecting */ DISPID(750));
    OleProcedure(_dispid);
  }

  void __fastcall OnConnected()
  {
    _TDispID _dispid(/* OnConnected */ DISPID(751));
    OleProcedure(_dispid);
  }

  void __fastcall OnLoginCompleted()
  {
    _TDispID _dispid(/* OnLoginCompleted */ DISPID(752));
    OleProcedure(_dispid);
  }

  void __fastcall OnDisconnected(long disconnectReason/*[in]*/, 
                                 long ExtendedDisconnectReason/*[in]*/, 
                                 BSTR disconnectErrorMessage/*[in]*/)
  {
    _TDispID _dispid(/* OnDisconnected */ DISPID(753));
    TAutoArgs<3> _args;
    _args[1] = disconnectReason /*[VT_I4:0]*/;
    _args[2] = ExtendedDisconnectReason /*[VT_I4:0]*/;
    _args[3] = disconnectErrorMessage /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnStatusChanged(long statusCode/*[in]*/, BSTR statusMessage/*[in]*/)
  {
    _TDispID _dispid(/* OnStatusChanged */ DISPID(754));
    TAutoArgs<2> _args;
    _args[1] = statusCode /*[VT_I4:0]*/;
    _args[2] = statusMessage /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnAutoReconnecting(long disconnectReason/*[in]*/, 
                                     long ExtendedDisconnectReason/*[in]*/, 
                                     BSTR disconnectErrorMessage/*[in]*/, 
                                     VARIANT_BOOL networkAvailable/*[in]*/, 
                                     long attemptCount/*[in]*/, long maxAttemptCount/*[in]*/)
  {
    _TDispID _dispid(/* OnAutoReconnecting */ DISPID(755));
    TAutoArgs<6> _args;
    _args[1] = disconnectReason /*[VT_I4:0]*/;
    _args[2] = ExtendedDisconnectReason /*[VT_I4:0]*/;
    _args[3] = disconnectErrorMessage /*[VT_BSTR:0]*/;
    _args[4] = networkAvailable /*[VT_BOOL:0]*/;
    _args[5] = attemptCount /*[VT_I4:0]*/;
    _args[6] = maxAttemptCount /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnAutoReconnected()
  {
    _TDispID _dispid(/* OnAutoReconnected */ DISPID(756));
    OleProcedure(_dispid);
  }

  void __fastcall OnDialogDisplaying()
  {
    _TDispID _dispid(/* OnDialogDisplaying */ DISPID(757));
    OleProcedure(_dispid);
  }

  void __fastcall OnDialogDismissed()
  {
    _TDispID _dispid(/* OnDialogDismissed */ DISPID(758));
    OleProcedure(_dispid);
  }

  void __fastcall OnNetworkStatusChanged(unsigned_long qualityLevel/*[in]*/, long bandwidth/*[in]*/
                                         , long rtt/*[in]*/)
  {
    _TDispID _dispid(/* OnNetworkStatusChanged */ DISPID(759));
    TAutoArgs<3> _args;
    _args[1] = qualityLevel /*[VT_UI4:0]*/;
    _args[2] = bandwidth /*[VT_I4:0]*/;
    _args[3] = rtt /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnAdminMessageReceived(BSTR adminMessage/*[in]*/)
  {
    _TDispID _dispid(/* OnAdminMessageReceived */ DISPID(760));
    TAutoArgs<1> _args;
    _args[1] = adminMessage /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyCombinationPressed(long keyCombination/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyCombinationPressed */ DISPID(761));
    TAutoArgs<1> _args;
    _args[1] = keyCombination /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnRemoteDesktopSizeChanged(long width/*[in]*/, long height/*[in]*/)
  {
    _TDispID _dispid(/* OnRemoteDesktopSizeChanged */ DISPID(762));
    TAutoArgs<2> _args;
    _args[1] = width /*[VT_I4:0]*/;
    _args[2] = height /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnTouchPointerCursorMoved(long x/*[in]*/, long y/*[in]*/)
  {
    _TDispID _dispid(/* OnTouchPointerCursorMoved */ DISPID(800));
    TAutoArgs<2> _args;
    _args[1] = x /*[VT_I4:0]*/;
    _args[2] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IRemoteDesktopClient
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {57D25668-625A-4905-BE4E-304CAA13F89C}
// *********************************************************************//
interface IRemoteDesktopClient  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Connect(void) = 0; // [701]
  virtual HRESULT STDMETHODCALLTYPE Disconnect(void) = 0; // [702]
  virtual HRESULT STDMETHODCALLTYPE Reconnect(unsigned_long width/*[in]*/, 
                                              unsigned_long height/*[in]*/) = 0; // [703]
  virtual HRESULT STDMETHODCALLTYPE get_Settings(Mstsclib_tlb::IRemoteDesktopClientSettings** Settings/*[out,retval]*/) = 0; // [710]
  virtual HRESULT STDMETHODCALLTYPE get_Actions(Mstsclib_tlb::IRemoteDesktopClientActions** Actions/*[out,retval]*/) = 0; // [711]
  virtual HRESULT STDMETHODCALLTYPE get_TouchPointer(Mstsclib_tlb::IRemoteDesktopClientTouchPointer** TouchPointer/*[out,retval]*/) = 0; // [712]
  virtual HRESULT STDMETHODCALLTYPE DeleteSavedCredentials(BSTR serverName/*[in]*/) = 0; // [704]
  virtual HRESULT STDMETHODCALLTYPE UpdateSessionDisplaySettings(unsigned_long width/*[in]*/, 
                                                                 unsigned_long height/*[in]*/) = 0; // [705]
  virtual HRESULT STDMETHODCALLTYPE attachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/) = 0; // [706]
  virtual HRESULT STDMETHODCALLTYPE detachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/) = 0; // [707]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mstsclib_tlb::IRemoteDesktopClientSettingsPtr __fastcall get_Settings(void)
  {
    Mstsclib_tlb::IRemoteDesktopClientSettingsPtr Settings;
    OLECHECK(this->get_Settings(&Settings));
    return Settings;
  }

  Mstsclib_tlb::IRemoteDesktopClientActionsPtr __fastcall get_Actions(void)
  {
    Mstsclib_tlb::IRemoteDesktopClientActionsPtr Actions;
    OLECHECK(this->get_Actions(&Actions));
    return Actions;
  }

  Mstsclib_tlb::IRemoteDesktopClientTouchPointerPtr __fastcall get_TouchPointer(void)
  {
    Mstsclib_tlb::IRemoteDesktopClientTouchPointerPtr TouchPointer;
    OLECHECK(this->get_TouchPointer(&TouchPointer));
    return TouchPointer;
  }


  __property   Mstsclib_tlb::IRemoteDesktopClientSettingsPtr Settings = {read = get_Settings};
  __property   Mstsclib_tlb::IRemoteDesktopClientActionsPtr Actions = {read = get_Actions};
  __property   Mstsclib_tlb::IRemoteDesktopClientTouchPointerPtr TouchPointer = {read = get_TouchPointer};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IRemoteDesktopClientSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {48A0F2A7-2713-431F-BBAC-6F4558E7D64D}
// *********************************************************************//
interface IRemoteDesktopClientSettings  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE ApplySettings(BSTR RdpFileContents/*[in]*/) = 0; // [722]
  virtual HRESULT STDMETHODCALLTYPE RetrieveSettings(BSTR* RdpFileContents/*[out,retval]*/) = 0; // [723]
  virtual HRESULT STDMETHODCALLTYPE GetRdpProperty(BSTR propertyName/*[in]*/, 
                                                   VARIANT* Value/*[out,retval]*/) = 0; // [721]
  virtual HRESULT STDMETHODCALLTYPE SetRdpProperty(BSTR propertyName/*[in]*/, VARIANT Value/*[in]*/) = 0; // [720]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall RetrieveSettings(void)
  {
    BSTR RdpFileContents = 0;
    OLECHECK(this->RetrieveSettings((BSTR*)&RdpFileContents));
    return RdpFileContents;
  }

  VARIANT __fastcall GetRdpProperty(BSTR propertyName/*[in]*/)
  {
    VARIANT Value;
    OLECHECK(this->GetRdpProperty(propertyName, (VARIANT*)&Value));
    return Value;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IRemoteDesktopClientActions
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7D54BC4E-1028-45D4-8B0A-B9B6BFFBA176}
// *********************************************************************//
interface IRemoteDesktopClientActions  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE SuspendScreenUpdates(void) = 0; // [730]
  virtual HRESULT STDMETHODCALLTYPE ResumeScreenUpdates(void) = 0; // [731]
  virtual HRESULT STDMETHODCALLTYPE ExecuteRemoteAction(Mstsclib_tlb::RemoteActionType remoteAction/*[in]*/) = 0; // [732]
  virtual HRESULT STDMETHODCALLTYPE GetSnapshot(Mstsclib_tlb::SnapshotEncodingType snapshotEncoding/*[in]*/, 
                                                Mstsclib_tlb::SnapshotFormatType snapshotFormat/*[in]*/, 
                                                unsigned_long snapshotWidth/*[in]*/, 
                                                unsigned_long snapshotHeight/*[in]*/, 
                                                BSTR* snapshotData/*[out,retval]*/) = 0; // [733]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall GetSnapshot(Mstsclib_tlb::SnapshotEncodingType snapshotEncoding/*[in]*/, 
                              Mstsclib_tlb::SnapshotFormatType snapshotFormat/*[in]*/, 
                              unsigned_long snapshotWidth/*[in]*/, 
                              unsigned_long snapshotHeight/*[in]*/)
  {
    BSTR snapshotData = 0;
    OLECHECK(this->GetSnapshot(snapshotEncoding, snapshotFormat, snapshotWidth, snapshotHeight, (BSTR*)&snapshotData));
    return snapshotData;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IRemoteDesktopClientTouchPointer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {260EC22D-8CBC-44B5-9E88-2A37F6C93AE9}
// *********************************************************************//
interface IRemoteDesktopClientTouchPointer  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Enabled/*[in]*/) = 0; // [740]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/) = 0; // [740]
  virtual HRESULT STDMETHODCALLTYPE set_EventsEnabled(VARIANT_BOOL EventsEnabled/*[in]*/) = 0; // [741]
  virtual HRESULT STDMETHODCALLTYPE get_EventsEnabled(VARIANT_BOOL* EventsEnabled/*[out,retval]*/) = 0; // [741]
  virtual HRESULT STDMETHODCALLTYPE set_PointerSpeed(unsigned_long PointerSpeed/*[in]*/) = 0; // [742]
  virtual HRESULT STDMETHODCALLTYPE get_PointerSpeed(unsigned_long* PointerSpeed/*[out,retval]*/) = 0; // [742]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Enabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Enabled));
    return Enabled;
  }

  VARIANT_BOOL __fastcall get_EventsEnabled(void)
  {
    VARIANT_BOOL EventsEnabled;
    OLECHECK(this->get_EventsEnabled((VARIANT_BOOL*)&EventsEnabled));
    return EventsEnabled;
  }

  unsigned_long __fastcall get_PointerSpeed(void)
  {
    unsigned_long PointerSpeed;
    OLECHECK(this->get_PointerSpeed((unsigned_long*)&PointerSpeed));
    return PointerSpeed;
  }


  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   VARIANT_BOOL    EventsEnabled = {read = get_EventsEnabled, write = set_EventsEnabled};
  __property   unsigned_long   PointerSpeed = {read = get_PointerSpeed, write = set_PointerSpeed};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  IMsTscAxEvents
// Flags:     (4096) Dispatchable
// GUID:      {336D5562-EFA8-482E-8CB3-C5C0FC7A7DB6}
// *********************************************************************//
template <class T>
class IMsTscAxEventsDispT : public TAutoDriver<IMsTscAxEvents>
{
public:
  IMsTscAxEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnConnecting();
  void            __fastcall OnConnected();
  void            __fastcall OnLoginComplete();
  void            __fastcall OnDisconnected(long discReason/*[in]*/);
  void            __fastcall OnEnterFullScreenMode();
  void            __fastcall OnLeaveFullScreenMode();
  void            __fastcall OnChannelReceivedData(BSTR chanName/*[in]*/, BSTR data/*[in]*/);
  void            __fastcall OnRequestGoFullScreen();
  void            __fastcall OnRequestLeaveFullScreen();
  void            __fastcall OnFatalError(long errorCode/*[in]*/);
  void            __fastcall OnWarning(long warningCode/*[in]*/);
  void            __fastcall OnRemoteDesktopSizeChange(long width/*[in]*/, long height/*[in]*/);
  void            __fastcall OnIdleTimeoutNotification();
  void            __fastcall OnRequestContainerMinimize();
  void            __fastcall OnConfirmClose(VARIANT_BOOL* pfAllowClose/*[out,retval]*/);
  VARIANT_BOOL    __fastcall OnConfirmClose(void);
  void            __fastcall OnReceivedTSPublicKey(BSTR publicKey/*[in]*/, 
                                                   VARIANT_BOOL* pfContinueLogon/*[out,retval]*/);
  VARIANT_BOOL    __fastcall OnReceivedTSPublicKey(BSTR publicKey/*[in]*/);
  void            __fastcall OnAutoReconnecting(long disconnectReason/*[in]*/, 
                                                long attemptCount/*[in]*/, 
                                                Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus/*[out,retval]*/);
  Mstsclib_tlb::AutoReconnectContinueState __fastcall OnAutoReconnecting(long disconnectReason/*[in]*/, 
                                                                         long attemptCount/*[in]*/);
  void            __fastcall OnAuthenticationWarningDisplayed();
  void            __fastcall OnAuthenticationWarningDismissed();
  void            __fastcall OnRemoteProgramResult(BSTR bstrRemoteProgram/*[in]*/, 
                                                   Mstsclib_tlb::RemoteProgramResult lError/*[in]*/
                                                   , VARIANT_BOOL vbIsExecutable/*[in]*/);
  void            __fastcall OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed/*[in]*/, 
                                                      unsigned_long uDisplayInformation/*[in]*/);
  void            __fastcall OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed/*[in]*/, 
                                                     /*AUTO_PARAM_ERROR(Mstsclib_tlb::wireHWND hwnd)*/ VARIANT  hwnd
                                                     , 
                                                     Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute/*[in]*/);
  void            __fastcall OnLogonError(long lError/*[in]*/);
  void            __fastcall OnFocusReleased(int iDirection/*[in]*/);
  void            __fastcall OnUserNameAcquired(BSTR bstrUserName/*[in]*/);
  void            __fastcall OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative/*[in]*/);
  void            __fastcall OnServiceMessageReceived(BSTR serviceMessage/*[in]*/);
  void            __fastcall OnConnectionBarPullDown();
  void            __fastcall OnNetworkStatusChanged(unsigned_long qualityLevel/*[in]*/, 
                                                    long bandwidth/*[in]*/, long rtt/*[in]*/);
  void            __fastcall OnDevicesButtonPressed();
  void            __fastcall OnAutoReconnected();
  void            __fastcall OnAutoReconnecting2(long disconnectReason/*[in]*/, 
                                                 VARIANT_BOOL networkAvailable/*[in]*/, 
                                                 long attemptCount/*[in]*/, 
                                                 long maxAttemptCount/*[in]*/);

};
typedef IMsTscAxEventsDispT<IMsTscAxEvents> IMsTscAxEventsDisp;

typedef TComInterface<IMsTscAx_Redist>  TCOMIMsTscAx_Redist;

// *********************************************************************//
// DispIntf:  IMsTscAx_Redist
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {327BB5CD-834E-4400-AEF2-B30E15E5D682}
// *********************************************************************//
template<class T>
class IMsTscAx_RedistDispT : public TAutoDriver<IMsTscAx_Redist>
{
public:
  IMsTscAx_RedistDispT(){}

  IMsTscAx_RedistDispT(IMsTscAx_Redist *pintf)
  {
    TAutoDriver<IMsTscAx_Redist>::Bind(pintf, false);
  }

  IMsTscAx_RedistDispT(IMsTscAx_RedistPtr pintf)
  {
    TAutoDriver<IMsTscAx_Redist>::Bind(pintf, true);
  }

  IMsTscAx_RedistDispT& operator=(IMsTscAx_Redist *pintf)
  {
    TAutoDriver<IMsTscAx_Redist>::Bind(pintf, false);
    return *this;
  }

  IMsTscAx_RedistDispT& operator=(IMsTscAx_RedistPtr pintf)
  {
    TAutoDriver<IMsTscAx_Redist>::Bind(pintf, true);
    return *this;
  }


};
typedef IMsTscAx_RedistDispT<IMsTscAx_Redist> IMsTscAx_RedistDisp;

// *********************************************************************//
// SmartIntf: TCOMIMsTscAx
// Interface: IMsTscAx
// *********************************************************************//
template <class T /* IMsTscAx */ >
class TCOMIMsTscAxT : public TComInterface<IMsTscAx>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMsTscAxT() {}
  TCOMIMsTscAxT(IMsTscAx *intf, bool addRef = false) : TComInterface<IMsTscAx>(intf, addRef) {}
  TCOMIMsTscAxT(const TCOMIMsTscAxT& src) : TComInterface<IMsTscAx>(src) {}
  TCOMIMsTscAxT& operator=(const TCOMIMsTscAxT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_Server(BSTR pServer/*[in]*/);
  HRESULT         __fastcall get_Server(BSTR* pServer/*[out,retval]*/);
  BSTR            __fastcall get_Server(void);
  HRESULT         __fastcall set_Domain(BSTR pDomain/*[in]*/);
  HRESULT         __fastcall get_Domain(BSTR* pDomain/*[out,retval]*/);
  BSTR            __fastcall get_Domain(void);
  HRESULT         __fastcall set_UserName(BSTR pUserName/*[in]*/);
  HRESULT         __fastcall get_UserName(BSTR* pUserName/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall set_DisconnectedText(BSTR pDisconnectedText/*[in]*/);
  HRESULT         __fastcall get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/);
  BSTR            __fastcall get_DisconnectedText(void);
  HRESULT         __fastcall set_ConnectingText(BSTR pConnectingText/*[in]*/);
  HRESULT         __fastcall get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectingText(void);
  HRESULT         __fastcall get_Connected(short* pIsConnected/*[out,retval]*/);
  short           __fastcall get_Connected(void);
  HRESULT         __fastcall set_DesktopWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopWidth(void);
  HRESULT         __fastcall set_DesktopHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopHeight(void);
  HRESULT         __fastcall set_StartConnected(long pfStartConnected/*[in]*/);
  HRESULT         __fastcall get_StartConnected(long* pfStartConnected/*[out,retval]*/);
  long            __fastcall get_StartConnected(void);
  HRESULT         __fastcall get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/);
  long            __fastcall get_HorizontalScrollBarVisible(void);
  HRESULT         __fastcall get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/);
  long            __fastcall get_VerticalScrollBarVisible(void);
  HRESULT         __fastcall set_FullScreenTitle(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_CipherStrength(long* pCipherStrength/*[out,retval]*/);
  long            __fastcall get_CipherStrength(void);
  HRESULT         __fastcall get_Version(BSTR* pVersion/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/);
  long            __fastcall get_SecuredSettingsEnabled(void);
  HRESULT         __fastcall get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall get_SecuredSettings(void);
  HRESULT         __fastcall get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall get_AdvancedSettings(void);
  HRESULT         __fastcall get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/);
  Mstsclib_tlb::IMsTscDebugPtr __fastcall get_Debugger(void);
  HRESULT         __fastcall Connect(void);
  HRESULT         __fastcall Disconnect(void);
  HRESULT         __fastcall CreateVirtualChannels(BSTR newVal/*[in]*/);
  HRESULT         __fastcall SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/);

  __property   BSTR            Server = {read = get_Server, write = set_Server};
  __property   BSTR            Domain = {read = get_Domain, write = set_Domain};
  __property   BSTR            UserName = {read = get_UserName, write = set_UserName};
  __property   BSTR            DisconnectedText = {read = get_DisconnectedText, write = set_DisconnectedText};
  __property   BSTR            ConnectingText = {read = get_ConnectingText, write = set_ConnectingText};
  __property   short           Connected = {read = get_Connected};
  __property   long            DesktopWidth = {read = get_DesktopWidth, write = set_DesktopWidth};
  __property   long            DesktopHeight = {read = get_DesktopHeight, write = set_DesktopHeight};
  __property   long            StartConnected = {read = get_StartConnected, write = set_StartConnected};
  __property   long            HorizontalScrollBarVisible = {read = get_HorizontalScrollBarVisible};
  __property   long            VerticalScrollBarVisible = {read = get_VerticalScrollBarVisible};
  __property   BSTR            FullScreenTitle = {write = set_FullScreenTitle};
  __property   long            CipherStrength = {read = get_CipherStrength};
  __property   BSTR            Version = {read = get_Version};
  __property   long            SecuredSettingsEnabled = {read = get_SecuredSettingsEnabled};
  __property   Mstsclib_tlb::IMsTscSecuredSettingsPtr SecuredSettings = {read = get_SecuredSettings};
  __property   Mstsclib_tlb::IMsTscAdvancedSettingsPtr AdvancedSettings = {read = get_AdvancedSettings};
  __property   Mstsclib_tlb::IMsTscDebugPtr Debugger = {read = get_Debugger};
};
typedef TCOMIMsTscAxT<IMsTscAx> TCOMIMsTscAx;

// *********************************************************************//
// DispIntf:  IMsTscAx
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8C11EFAE-92C3-11D1-BC1E-00C04FA31489}
// *********************************************************************//
template<class T>
class IMsTscAxDispT : public TAutoDriver<IMsTscAx>
{
public:
  IMsTscAxDispT(){}

  IMsTscAxDispT(IMsTscAx *pintf)
  {
    TAutoDriver<IMsTscAx>::Bind(pintf, false);
  }

  IMsTscAxDispT(IMsTscAxPtr pintf)
  {
    TAutoDriver<IMsTscAx>::Bind(pintf, true);
  }

  IMsTscAxDispT& operator=(IMsTscAx *pintf)
  {
    TAutoDriver<IMsTscAx>::Bind(pintf, false);
    return *this;
  }

  IMsTscAxDispT& operator=(IMsTscAxPtr pintf)
  {
    TAutoDriver<IMsTscAx>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MsTscAxNotSafeForScripting));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MsTscAxNotSafeForScripting);
  }

  HRESULT         __fastcall set_Server(BSTR pServer/*[in]*/);
  HRESULT         __fastcall get_Server(BSTR* pServer/*[out,retval]*/);
  BSTR            __fastcall get_Server(void);
  HRESULT         __fastcall set_Domain(BSTR pDomain/*[in]*/);
  HRESULT         __fastcall get_Domain(BSTR* pDomain/*[out,retval]*/);
  BSTR            __fastcall get_Domain(void);
  HRESULT         __fastcall set_UserName(BSTR pUserName/*[in]*/);
  HRESULT         __fastcall get_UserName(BSTR* pUserName/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall set_DisconnectedText(BSTR pDisconnectedText/*[in]*/);
  HRESULT         __fastcall get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/);
  BSTR            __fastcall get_DisconnectedText(void);
  HRESULT         __fastcall set_ConnectingText(BSTR pConnectingText/*[in]*/);
  HRESULT         __fastcall get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectingText(void);
  HRESULT         __fastcall get_Connected(short* pIsConnected/*[out,retval]*/);
  short           __fastcall get_Connected(void);
  HRESULT         __fastcall set_DesktopWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopWidth(void);
  HRESULT         __fastcall set_DesktopHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopHeight(void);
  HRESULT         __fastcall set_StartConnected(long pfStartConnected/*[in]*/);
  HRESULT         __fastcall get_StartConnected(long* pfStartConnected/*[out,retval]*/);
  long            __fastcall get_StartConnected(void);
  HRESULT         __fastcall get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/);
  long            __fastcall get_HorizontalScrollBarVisible(void);
  HRESULT         __fastcall get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/);
  long            __fastcall get_VerticalScrollBarVisible(void);
  HRESULT         __fastcall set_FullScreenTitle(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_CipherStrength(long* pCipherStrength/*[out,retval]*/);
  long            __fastcall get_CipherStrength(void);
  HRESULT         __fastcall get_Version(BSTR* pVersion/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/);
  long            __fastcall get_SecuredSettingsEnabled(void);
  HRESULT         __fastcall get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall get_SecuredSettings(void);
  HRESULT         __fastcall get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall get_AdvancedSettings(void);
  HRESULT         __fastcall get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/);
  Mstsclib_tlb::IMsTscDebugPtr __fastcall get_Debugger(void);
  HRESULT         __fastcall Connect();
  HRESULT         __fastcall Disconnect();
  HRESULT         __fastcall CreateVirtualChannels(BSTR newVal/*[in]*/);
  HRESULT         __fastcall SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/);

  __property   BSTR            Server = {read = get_Server, write = set_Server};
  __property   BSTR            Domain = {read = get_Domain, write = set_Domain};
  __property   BSTR            UserName = {read = get_UserName, write = set_UserName};
  __property   BSTR            DisconnectedText = {read = get_DisconnectedText, write = set_DisconnectedText};
  __property   BSTR            ConnectingText = {read = get_ConnectingText, write = set_ConnectingText};
  __property   short           Connected = {read = get_Connected};
  __property   long            DesktopWidth = {read = get_DesktopWidth, write = set_DesktopWidth};
  __property   long            DesktopHeight = {read = get_DesktopHeight, write = set_DesktopHeight};
  __property   long            StartConnected = {read = get_StartConnected, write = set_StartConnected};
  __property   long            HorizontalScrollBarVisible = {read = get_HorizontalScrollBarVisible};
  __property   long            VerticalScrollBarVisible = {read = get_VerticalScrollBarVisible};
  __property   BSTR            FullScreenTitle = {write = set_FullScreenTitle};
  __property   long            CipherStrength = {read = get_CipherStrength};
  __property   BSTR            Version = {read = get_Version};
  __property   long            SecuredSettingsEnabled = {read = get_SecuredSettingsEnabled};
  __property   Mstsclib_tlb::IMsTscSecuredSettingsPtr SecuredSettings = {read = get_SecuredSettings};
  __property   Mstsclib_tlb::IMsTscAdvancedSettingsPtr AdvancedSettings = {read = get_AdvancedSettings};
  __property   Mstsclib_tlb::IMsTscDebugPtr Debugger = {read = get_Debugger};

};
typedef IMsTscAxDispT<IMsTscAx> IMsTscAxDisp;

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient
// Interface: IMsRdpClient
// *********************************************************************//
template <class T /* IMsRdpClient */ >
class TCOMIMsRdpClientT : public TComInterface<IMsRdpClient>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMsRdpClientT() {}
  TCOMIMsRdpClientT(IMsRdpClient *intf, bool addRef = false) : TComInterface<IMsRdpClient>(intf, addRef) {}
  TCOMIMsRdpClientT(const TCOMIMsRdpClientT& src) : TComInterface<IMsRdpClient>(src) {}
  TCOMIMsRdpClientT& operator=(const TCOMIMsRdpClientT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_ColorDepth(long pcolorDepth/*[in]*/);
  HRESULT         __fastcall get_ColorDepth(long* pcolorDepth/*[out,retval]*/);
  long            __fastcall get_ColorDepth(void);
  HRESULT         __fastcall get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall get_AdvancedSettings2(void);
  HRESULT         __fastcall get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall get_SecuredSettings2(void);
  HRESULT         __fastcall get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/);
  Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall get_ExtendedDisconnectReason(void);
  HRESULT         __fastcall set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/);
  HRESULT         __fastcall get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullScreen(void);
  HRESULT         __fastcall SetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long chanOptions/*[in]*/);
  HRESULT         __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long* pChanOptions/*[out,retval]*/);
  long            __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/);
  HRESULT         __fastcall RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/);
  Mstsclib_tlb::ControlCloseStatus __fastcall RequestClose(void);

  __property   long            ColorDepth = {read = get_ColorDepth, write = set_ColorDepth};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr AdvancedSettings2 = {read = get_AdvancedSettings2};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr SecuredSettings2 = {read = get_SecuredSettings2};
  __property   Mstsclib_tlb::ExtendedDisconnectReasonCode ExtendedDisconnectReason = {read = get_ExtendedDisconnectReason};
  __property   VARIANT_BOOL    FullScreen = {read = get_FullScreen, write = set_FullScreen};
};
typedef TCOMIMsRdpClientT<IMsRdpClient> TCOMIMsRdpClient;

// *********************************************************************//
// DispIntf:  IMsRdpClient
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {92B4A539-7115-4B7C-A5A9-E5D9EFC2780A}
// *********************************************************************//
template<class T>
class IMsRdpClientDispT : public TAutoDriver<IMsRdpClient>
{
public:
  IMsRdpClientDispT(){}

  IMsRdpClientDispT(IMsRdpClient *pintf)
  {
    TAutoDriver<IMsRdpClient>::Bind(pintf, false);
  }

  IMsRdpClientDispT(IMsRdpClientPtr pintf)
  {
    TAutoDriver<IMsRdpClient>::Bind(pintf, true);
  }

  IMsRdpClientDispT& operator=(IMsRdpClient *pintf)
  {
    TAutoDriver<IMsRdpClient>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClientDispT& operator=(IMsRdpClientPtr pintf)
  {
    TAutoDriver<IMsRdpClient>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MsRdpClientNotSafeForScripting));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MsRdpClientNotSafeForScripting);
  }

  HRESULT         __fastcall set_ColorDepth(long pcolorDepth/*[in]*/);
  HRESULT         __fastcall get_ColorDepth(long* pcolorDepth/*[out,retval]*/);
  long            __fastcall get_ColorDepth(void);
  HRESULT         __fastcall get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall get_AdvancedSettings2(void);
  HRESULT         __fastcall get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall get_SecuredSettings2(void);
  HRESULT         __fastcall get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/);
  Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall get_ExtendedDisconnectReason(void);
  HRESULT         __fastcall set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/);
  HRESULT         __fastcall get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullScreen(void);
  HRESULT         __fastcall SetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long chanOptions/*[in]*/);
  HRESULT         __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long* pChanOptions/*[out,retval]*/);
  long            __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/);
  HRESULT         __fastcall RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/);
  Mstsclib_tlb::ControlCloseStatus __fastcall RequestClose(void);
  HRESULT         __fastcall set_Server(BSTR pServer/*[in]*/);
  HRESULT         __fastcall get_Server(BSTR* pServer/*[out,retval]*/);
  BSTR            __fastcall get_Server(void);
  HRESULT         __fastcall set_Domain(BSTR pDomain/*[in]*/);
  HRESULT         __fastcall get_Domain(BSTR* pDomain/*[out,retval]*/);
  BSTR            __fastcall get_Domain(void);
  HRESULT         __fastcall set_UserName(BSTR pUserName/*[in]*/);
  HRESULT         __fastcall get_UserName(BSTR* pUserName/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall set_DisconnectedText(BSTR pDisconnectedText/*[in]*/);
  HRESULT         __fastcall get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/);
  BSTR            __fastcall get_DisconnectedText(void);
  HRESULT         __fastcall set_ConnectingText(BSTR pConnectingText/*[in]*/);
  HRESULT         __fastcall get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectingText(void);
  HRESULT         __fastcall get_Connected(short* pIsConnected/*[out,retval]*/);
  short           __fastcall get_Connected(void);
  HRESULT         __fastcall set_DesktopWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopWidth(void);
  HRESULT         __fastcall set_DesktopHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopHeight(void);
  HRESULT         __fastcall set_StartConnected(long pfStartConnected/*[in]*/);
  HRESULT         __fastcall get_StartConnected(long* pfStartConnected/*[out,retval]*/);
  long            __fastcall get_StartConnected(void);
  HRESULT         __fastcall get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/);
  long            __fastcall get_HorizontalScrollBarVisible(void);
  HRESULT         __fastcall get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/);
  long            __fastcall get_VerticalScrollBarVisible(void);
  HRESULT         __fastcall set_FullScreenTitle(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_CipherStrength(long* pCipherStrength/*[out,retval]*/);
  long            __fastcall get_CipherStrength(void);
  HRESULT         __fastcall get_Version(BSTR* pVersion/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/);
  long            __fastcall get_SecuredSettingsEnabled(void);
  HRESULT         __fastcall get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall get_SecuredSettings(void);
  HRESULT         __fastcall get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall get_AdvancedSettings(void);
  HRESULT         __fastcall get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/);
  Mstsclib_tlb::IMsTscDebugPtr __fastcall get_Debugger(void);
  HRESULT         __fastcall Connect();
  HRESULT         __fastcall Disconnect();
  HRESULT         __fastcall CreateVirtualChannels(BSTR newVal/*[in]*/);
  HRESULT         __fastcall SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/);

  __property   long            ColorDepth = {read = get_ColorDepth, write = set_ColorDepth};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr AdvancedSettings2 = {read = get_AdvancedSettings2};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr SecuredSettings2 = {read = get_SecuredSettings2};
  __property   Mstsclib_tlb::ExtendedDisconnectReasonCode ExtendedDisconnectReason = {read = get_ExtendedDisconnectReason};
  __property   VARIANT_BOOL    FullScreen = {read = get_FullScreen, write = set_FullScreen};

  __property   BSTR            Server = {read = get_Server, write = set_Server};
  __property   BSTR            Domain = {read = get_Domain, write = set_Domain};
  __property   BSTR            UserName = {read = get_UserName, write = set_UserName};
  __property   BSTR            DisconnectedText = {read = get_DisconnectedText, write = set_DisconnectedText};
  __property   BSTR            ConnectingText = {read = get_ConnectingText, write = set_ConnectingText};
  __property   short           Connected = {read = get_Connected};
  __property   long            DesktopWidth = {read = get_DesktopWidth, write = set_DesktopWidth};
  __property   long            DesktopHeight = {read = get_DesktopHeight, write = set_DesktopHeight};
  __property   long            StartConnected = {read = get_StartConnected, write = set_StartConnected};
  __property   long            HorizontalScrollBarVisible = {read = get_HorizontalScrollBarVisible};
  __property   long            VerticalScrollBarVisible = {read = get_VerticalScrollBarVisible};
  __property   BSTR            FullScreenTitle = {write = set_FullScreenTitle};
  __property   long            CipherStrength = {read = get_CipherStrength};
  __property   BSTR            Version = {read = get_Version};
  __property   long            SecuredSettingsEnabled = {read = get_SecuredSettingsEnabled};
  __property   Mstsclib_tlb::IMsTscSecuredSettingsPtr SecuredSettings = {read = get_SecuredSettings};
  __property   Mstsclib_tlb::IMsTscAdvancedSettingsPtr AdvancedSettings = {read = get_AdvancedSettings};
  __property   Mstsclib_tlb::IMsTscDebugPtr Debugger = {read = get_Debugger};

};
typedef IMsRdpClientDispT<IMsRdpClient> IMsRdpClientDisp;

typedef TComInterface<IMsTscNonScriptable>  TCOMIMsTscNonScriptable;

typedef TComInterface<IMsTscSecuredSettings>  TCOMIMsTscSecuredSettings;

// *********************************************************************//
// DispIntf:  IMsTscSecuredSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C9D65442-A0F9-45B2-8F73-D61D2DB8CBB6}
// *********************************************************************//
template<class T>
class IMsTscSecuredSettingsDispT : public TAutoDriver<IMsTscSecuredSettings>
{
public:
  IMsTscSecuredSettingsDispT(){}

  IMsTscSecuredSettingsDispT(IMsTscSecuredSettings *pintf)
  {
    TAutoDriver<IMsTscSecuredSettings>::Bind(pintf, false);
  }

  IMsTscSecuredSettingsDispT(IMsTscSecuredSettingsPtr pintf)
  {
    TAutoDriver<IMsTscSecuredSettings>::Bind(pintf, true);
  }

  IMsTscSecuredSettingsDispT& operator=(IMsTscSecuredSettings *pintf)
  {
    TAutoDriver<IMsTscSecuredSettings>::Bind(pintf, false);
    return *this;
  }

  IMsTscSecuredSettingsDispT& operator=(IMsTscSecuredSettingsPtr pintf)
  {
    TAutoDriver<IMsTscSecuredSettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_StartProgram(BSTR pStartProgram/*[in]*/);
  HRESULT         __fastcall get_StartProgram(BSTR* pStartProgram/*[out,retval]*/);
  BSTR            __fastcall get_StartProgram(void);
  HRESULT         __fastcall set_WorkDir(BSTR pWorkDir/*[in]*/);
  HRESULT         __fastcall get_WorkDir(BSTR* pWorkDir/*[out,retval]*/);
  BSTR            __fastcall get_WorkDir(void);
  HRESULT         __fastcall set_FullScreen(long pfFullScreen/*[in]*/);
  HRESULT         __fastcall get_FullScreen(long* pfFullScreen/*[out,retval]*/);
  long            __fastcall get_FullScreen(void);

  __property   BSTR            StartProgram = {read = get_StartProgram, write = set_StartProgram};
  __property   BSTR            WorkDir = {read = get_WorkDir, write = set_WorkDir};
  __property   long            FullScreen = {read = get_FullScreen, write = set_FullScreen};
};
typedef IMsTscSecuredSettingsDispT<IMsTscSecuredSettings> IMsTscSecuredSettingsDisp;

typedef TComInterface<IMsTscAdvancedSettings>  TCOMIMsTscAdvancedSettings;

// *********************************************************************//
// DispIntf:  IMsTscAdvancedSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {809945CC-4B3B-4A92-A6B0-DBF9B5F2EF2D}
// *********************************************************************//
template<class T>
class IMsTscAdvancedSettingsDispT : public TAutoDriver<IMsTscAdvancedSettings>
{
public:
  IMsTscAdvancedSettingsDispT(){}

  IMsTscAdvancedSettingsDispT(IMsTscAdvancedSettings *pintf)
  {
    TAutoDriver<IMsTscAdvancedSettings>::Bind(pintf, false);
  }

  IMsTscAdvancedSettingsDispT(IMsTscAdvancedSettingsPtr pintf)
  {
    TAutoDriver<IMsTscAdvancedSettings>::Bind(pintf, true);
  }

  IMsTscAdvancedSettingsDispT& operator=(IMsTscAdvancedSettings *pintf)
  {
    TAutoDriver<IMsTscAdvancedSettings>::Bind(pintf, false);
    return *this;
  }

  IMsTscAdvancedSettingsDispT& operator=(IMsTscAdvancedSettingsPtr pintf)
  {
    TAutoDriver<IMsTscAdvancedSettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_Compress(long pcompress/*[in]*/);
  HRESULT         __fastcall get_Compress(long* pcompress/*[out,retval]*/);
  long            __fastcall get_Compress(void);
  HRESULT         __fastcall set_BitmapPeristence(long pbitmapPeristence/*[in]*/);
  HRESULT         __fastcall get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/);
  long            __fastcall get_BitmapPeristence(void);
  HRESULT         __fastcall set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/);
  HRESULT         __fastcall get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/);
  long            __fastcall get_allowBackgroundInput(void);
  HRESULT         __fastcall set_KeyBoardLayoutStr(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_PluginDlls(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconFile(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconIndex(long Param1/*[in]*/);
  HRESULT         __fastcall set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/);
  HRESULT         __fastcall get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/);
  long            __fastcall get_ContainerHandledFullScreen(void);
  HRESULT         __fastcall set_DisableRdpdr(long pDisableRdpdr/*[in]*/);
  HRESULT         __fastcall get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/);
  long            __fastcall get_DisableRdpdr(void);

  __property   long            Compress = {read = get_Compress, write = set_Compress};
  __property   long            BitmapPeristence = {read = get_BitmapPeristence, write = set_BitmapPeristence};
  __property   long            allowBackgroundInput = {read = get_allowBackgroundInput, write = set_allowBackgroundInput};
  __property   BSTR            KeyBoardLayoutStr = {write = set_KeyBoardLayoutStr};
  __property   BSTR            PluginDlls = {write = set_PluginDlls};
  __property   BSTR            IconFile = {write = set_IconFile};
  __property   long            IconIndex = {write = set_IconIndex};
  __property   long            ContainerHandledFullScreen = {read = get_ContainerHandledFullScreen, write = set_ContainerHandledFullScreen};
  __property   long            DisableRdpdr = {read = get_DisableRdpdr, write = set_DisableRdpdr};
};
typedef IMsTscAdvancedSettingsDispT<IMsTscAdvancedSettings> IMsTscAdvancedSettingsDisp;

typedef TComInterface<IMsTscDebug>  TCOMIMsTscDebug;

// *********************************************************************//
// DispIntf:  IMsTscDebug
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {209D0EB9-6254-47B1-9033-A98DAE55BB27}
// *********************************************************************//
template<class T>
class IMsTscDebugDispT : public TAutoDriver<IMsTscDebug>
{
public:
  IMsTscDebugDispT(){}

  IMsTscDebugDispT(IMsTscDebug *pintf)
  {
    TAutoDriver<IMsTscDebug>::Bind(pintf, false);
  }

  IMsTscDebugDispT(IMsTscDebugPtr pintf)
  {
    TAutoDriver<IMsTscDebug>::Bind(pintf, true);
  }

  IMsTscDebugDispT& operator=(IMsTscDebug *pintf)
  {
    TAutoDriver<IMsTscDebug>::Bind(pintf, false);
    return *this;
  }

  IMsTscDebugDispT& operator=(IMsTscDebugPtr pintf)
  {
    TAutoDriver<IMsTscDebug>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_HatchBitmapPDU(long phatchBitmapPDU/*[in]*/);
  HRESULT         __fastcall get_HatchBitmapPDU(long* phatchBitmapPDU/*[out,retval]*/);
  long            __fastcall get_HatchBitmapPDU(void);
  HRESULT         __fastcall set_HatchSSBOrder(long phatchSSBOrder/*[in]*/);
  HRESULT         __fastcall get_HatchSSBOrder(long* phatchSSBOrder/*[out,retval]*/);
  long            __fastcall get_HatchSSBOrder(void);
  HRESULT         __fastcall set_HatchMembltOrder(long phatchMembltOrder/*[in]*/);
  HRESULT         __fastcall get_HatchMembltOrder(long* phatchMembltOrder/*[out,retval]*/);
  long            __fastcall get_HatchMembltOrder(void);
  HRESULT         __fastcall set_HatchIndexPDU(long phatchIndexPDU/*[in]*/);
  HRESULT         __fastcall get_HatchIndexPDU(long* phatchIndexPDU/*[out,retval]*/);
  long            __fastcall get_HatchIndexPDU(void);
  HRESULT         __fastcall set_LabelMemblt(long plabelMemblt/*[in]*/);
  HRESULT         __fastcall get_LabelMemblt(long* plabelMemblt/*[out,retval]*/);
  long            __fastcall get_LabelMemblt(void);
  HRESULT         __fastcall set_BitmapCacheMonitor(long pbitmapCacheMonitor/*[in]*/);
  HRESULT         __fastcall get_BitmapCacheMonitor(long* pbitmapCacheMonitor/*[out,retval]*/);
  long            __fastcall get_BitmapCacheMonitor(void);
  HRESULT         __fastcall set_MallocFailuresPercent(long pmallocFailuresPercent/*[in]*/);
  HRESULT         __fastcall get_MallocFailuresPercent(long* pmallocFailuresPercent/*[out,retval]*/);
  long            __fastcall get_MallocFailuresPercent(void);
  HRESULT         __fastcall set_MallocHugeFailuresPercent(long pmallocHugeFailuresPercent/*[in]*/);
  HRESULT         __fastcall get_MallocHugeFailuresPercent(long* pmallocHugeFailuresPercent/*[out,retval]*/);
  long            __fastcall get_MallocHugeFailuresPercent(void);
  HRESULT         __fastcall set_NetThroughput(long NetThroughput/*[in]*/);
  HRESULT         __fastcall get_NetThroughput(long* NetThroughput/*[out,retval]*/);
  long            __fastcall get_NetThroughput(void);
  HRESULT         __fastcall set_CLXCmdLine(BSTR pCLXCmdLine/*[in]*/);
  HRESULT         __fastcall get_CLXCmdLine(BSTR* pCLXCmdLine/*[out,retval]*/);
  BSTR            __fastcall get_CLXCmdLine(void);
  HRESULT         __fastcall set_CLXDll(BSTR pCLXDll/*[in]*/);
  HRESULT         __fastcall get_CLXDll(BSTR* pCLXDll/*[out,retval]*/);
  BSTR            __fastcall get_CLXDll(void);
  HRESULT         __fastcall set_RemoteProgramsHatchVisibleRegion(long pcbHatch/*[in]*/);
  HRESULT         __fastcall get_RemoteProgramsHatchVisibleRegion(long* pcbHatch/*[out,retval]*/);
  long            __fastcall get_RemoteProgramsHatchVisibleRegion(void);
  HRESULT         __fastcall set_RemoteProgramsHatchVisibleNoDataRegion(long pcbHatch/*[in]*/);
  HRESULT         __fastcall get_RemoteProgramsHatchVisibleNoDataRegion(long* pcbHatch/*[out,retval]*/);
  long            __fastcall get_RemoteProgramsHatchVisibleNoDataRegion(void);
  HRESULT         __fastcall set_RemoteProgramsHatchNonVisibleRegion(long pcbHatch/*[in]*/);
  HRESULT         __fastcall get_RemoteProgramsHatchNonVisibleRegion(long* pcbHatch/*[out,retval]*/);
  long            __fastcall get_RemoteProgramsHatchNonVisibleRegion(void);
  HRESULT         __fastcall set_RemoteProgramsHatchWindow(long pcbHatch/*[in]*/);
  HRESULT         __fastcall get_RemoteProgramsHatchWindow(long* pcbHatch/*[out,retval]*/);
  long            __fastcall get_RemoteProgramsHatchWindow(void);
  HRESULT         __fastcall set_RemoteProgramsStayConnectOnBadCaps(long pcbStayConnected/*[in]*/);
  HRESULT         __fastcall get_RemoteProgramsStayConnectOnBadCaps(long* pcbStayConnected/*[out,retval]*/);
  long            __fastcall get_RemoteProgramsStayConnectOnBadCaps(void);
  HRESULT         __fastcall get_ControlType(unsigned* pControlType/*[out,retval]*/);
  unsigned        __fastcall get_ControlType(void);
  HRESULT         __fastcall set_DecodeGfx(VARIANT_BOOL Param1/*[in]*/);

  __property   long            HatchBitmapPDU = {read = get_HatchBitmapPDU, write = set_HatchBitmapPDU};
  __property   long            HatchSSBOrder = {read = get_HatchSSBOrder, write = set_HatchSSBOrder};
  __property   long            HatchMembltOrder = {read = get_HatchMembltOrder, write = set_HatchMembltOrder};
  __property   long            HatchIndexPDU = {read = get_HatchIndexPDU, write = set_HatchIndexPDU};
  __property   long            LabelMemblt = {read = get_LabelMemblt, write = set_LabelMemblt};
  __property   long            BitmapCacheMonitor = {read = get_BitmapCacheMonitor, write = set_BitmapCacheMonitor};
  __property   long            MallocFailuresPercent = {read = get_MallocFailuresPercent, write = set_MallocFailuresPercent};
  __property   long            MallocHugeFailuresPercent = {read = get_MallocHugeFailuresPercent, write = set_MallocHugeFailuresPercent};
  __property   long            NetThroughput = {read = get_NetThroughput, write = set_NetThroughput};
  __property   BSTR            CLXCmdLine = {read = get_CLXCmdLine, write = set_CLXCmdLine};
  __property   BSTR            CLXDll = {read = get_CLXDll, write = set_CLXDll};
  __property   long            RemoteProgramsHatchVisibleRegion = {read = get_RemoteProgramsHatchVisibleRegion, write = set_RemoteProgramsHatchVisibleRegion};
  __property   long            RemoteProgramsHatchVisibleNoDataRegion = {read = get_RemoteProgramsHatchVisibleNoDataRegion, write = set_RemoteProgramsHatchVisibleNoDataRegion};
  __property   long            RemoteProgramsHatchNonVisibleRegion = {read = get_RemoteProgramsHatchNonVisibleRegion, write = set_RemoteProgramsHatchNonVisibleRegion};
  __property   long            RemoteProgramsHatchWindow = {read = get_RemoteProgramsHatchWindow, write = set_RemoteProgramsHatchWindow};
  __property   long            RemoteProgramsStayConnectOnBadCaps = {read = get_RemoteProgramsStayConnectOnBadCaps, write = set_RemoteProgramsStayConnectOnBadCaps};
  __property   unsigned        ControlType = {read = get_ControlType};
  __property   VARIANT_BOOL    DecodeGfx = {write = set_DecodeGfx};
};
typedef IMsTscDebugDispT<IMsTscDebug> IMsTscDebugDisp;

typedef TComInterface<IMsRdpClientAdvancedSettings>  TCOMIMsRdpClientAdvancedSettings;

// *********************************************************************//
// DispIntf:  IMsRdpClientAdvancedSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3C65B4AB-12B3-465B-ACD4-B8DAD3BFF9E2}
// *********************************************************************//
template<class T>
class IMsRdpClientAdvancedSettingsDispT : public TAutoDriver<IMsRdpClientAdvancedSettings>
{
public:
  IMsRdpClientAdvancedSettingsDispT(){}

  IMsRdpClientAdvancedSettingsDispT(IMsRdpClientAdvancedSettings *pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings>::Bind(pintf, false);
  }

  IMsRdpClientAdvancedSettingsDispT(IMsRdpClientAdvancedSettingsPtr pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings>::Bind(pintf, true);
  }

  IMsRdpClientAdvancedSettingsDispT& operator=(IMsRdpClientAdvancedSettings *pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClientAdvancedSettingsDispT& operator=(IMsRdpClientAdvancedSettingsPtr pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_SmoothScroll(long psmoothScroll/*[in]*/);
  HRESULT         __fastcall get_SmoothScroll(long* psmoothScroll/*[out,retval]*/);
  long            __fastcall get_SmoothScroll(void);
  HRESULT         __fastcall set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/);
  HRESULT         __fastcall get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/);
  long            __fastcall get_AcceleratorPassthrough(void);
  HRESULT         __fastcall set_ShadowBitmap(long pshadowBitmap/*[in]*/);
  HRESULT         __fastcall get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/);
  long            __fastcall get_ShadowBitmap(void);
  HRESULT         __fastcall set_TransportType(long ptransportType/*[in]*/);
  HRESULT         __fastcall get_TransportType(long* ptransportType/*[out,retval]*/);
  long            __fastcall get_TransportType(void);
  HRESULT         __fastcall set_SasSequence(long psasSequence/*[in]*/);
  HRESULT         __fastcall get_SasSequence(long* psasSequence/*[out,retval]*/);
  long            __fastcall get_SasSequence(void);
  HRESULT         __fastcall set_EncryptionEnabled(long pencryptionEnabled/*[in]*/);
  HRESULT         __fastcall get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/);
  long            __fastcall get_EncryptionEnabled(void);
  HRESULT         __fastcall set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/);
  HRESULT         __fastcall get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/);
  long            __fastcall get_DedicatedTerminal(void);
  HRESULT         __fastcall set_RDPPort(long prdpPort/*[in]*/);
  HRESULT         __fastcall get_RDPPort(long* prdpPort/*[out,retval]*/);
  long            __fastcall get_RDPPort(void);
  HRESULT         __fastcall set_EnableMouse(long penableMouse/*[in]*/);
  HRESULT         __fastcall get_EnableMouse(long* penableMouse/*[out,retval]*/);
  long            __fastcall get_EnableMouse(void);
  HRESULT         __fastcall set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/);
  HRESULT         __fastcall get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/);
  long            __fastcall get_DisableCtrlAltDel(void);
  HRESULT         __fastcall set_EnableWindowsKey(long penableWindowsKey/*[in]*/);
  HRESULT         __fastcall get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/);
  long            __fastcall get_EnableWindowsKey(void);
  HRESULT         __fastcall set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/);
  HRESULT         __fastcall get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/);
  long            __fastcall get_DoubleClickDetect(void);
  HRESULT         __fastcall set_MaximizeShell(long pmaximizeShell/*[in]*/);
  HRESULT         __fastcall get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/);
  long            __fastcall get_MaximizeShell(void);
  HRESULT         __fastcall set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/);
  HRESULT         __fastcall get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/);
  long            __fastcall get_HotKeyFullScreen(void);
  HRESULT         __fastcall set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/);
  HRESULT         __fastcall get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/);
  long            __fastcall get_HotKeyCtrlEsc(void);
  HRESULT         __fastcall set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/);
  long            __fastcall get_HotKeyAltEsc(void);
  HRESULT         __fastcall set_HotKeyAltTab(long photKeyAltTab/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/);
  long            __fastcall get_HotKeyAltTab(void);
  HRESULT         __fastcall set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/);
  long            __fastcall get_HotKeyAltShiftTab(void);
  HRESULT         __fastcall set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/);
  long            __fastcall get_HotKeyAltSpace(void);
  HRESULT         __fastcall set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/);
  HRESULT         __fastcall get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/);
  long            __fastcall get_HotKeyCtrlAltDel(void);
  HRESULT         __fastcall set_orderDrawThreshold(long porderDrawThreshold/*[in]*/);
  HRESULT         __fastcall get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/);
  long            __fastcall get_orderDrawThreshold(void);
  HRESULT         __fastcall set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/);
  HRESULT         __fastcall get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/);
  long            __fastcall get_BitmapCacheSize(void);
  HRESULT         __fastcall set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCacheSize(void);
  HRESULT         __fastcall set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/);
  HRESULT         __fastcall get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/);
  long            __fastcall get_ScaleBitmapCachesByBPP(void);
  HRESULT         __fastcall set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/);
  HRESULT         __fastcall get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/);
  long            __fastcall get_NumBitmapCaches(void);
  HRESULT         __fastcall set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/);
  HRESULT         __fastcall get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/);
  long            __fastcall get_CachePersistenceActive(void);
  HRESULT         __fastcall set_PersistCacheDirectory(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_brushSupportLevel(long pbrushSupportLevel/*[in]*/);
  HRESULT         __fastcall get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/);
  long            __fastcall get_brushSupportLevel(void);
  HRESULT         __fastcall set_minInputSendInterval(long pminInputSendInterval/*[in]*/);
  HRESULT         __fastcall get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/);
  long            __fastcall get_minInputSendInterval(void);
  HRESULT         __fastcall set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/);
  HRESULT         __fastcall get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/);
  long            __fastcall get_InputEventsAtOnce(void);
  HRESULT         __fastcall set_maxEventCount(long pmaxEventCount/*[in]*/);
  HRESULT         __fastcall get_maxEventCount(long* pmaxEventCount/*[out,retval]*/);
  long            __fastcall get_maxEventCount(void);
  HRESULT         __fastcall set_keepAliveInterval(long pkeepAliveInterval/*[in]*/);
  HRESULT         __fastcall get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/);
  long            __fastcall get_keepAliveInterval(void);
  HRESULT         __fastcall set_shutdownTimeout(long pshutdownTimeout/*[in]*/);
  HRESULT         __fastcall get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/);
  long            __fastcall get_shutdownTimeout(void);
  HRESULT         __fastcall set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/);
  HRESULT         __fastcall get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/);
  long            __fastcall get_overallConnectionTimeout(void);
  HRESULT         __fastcall set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/);
  HRESULT         __fastcall get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/);
  long            __fastcall get_singleConnectionTimeout(void);
  HRESULT         __fastcall set_KeyboardType(long pkeyboardType/*[in]*/);
  HRESULT         __fastcall get_KeyboardType(long* pkeyboardType/*[out,retval]*/);
  long            __fastcall get_KeyboardType(void);
  HRESULT         __fastcall set_KeyboardSubType(long pkeyboardSubType/*[in]*/);
  HRESULT         __fastcall get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/);
  long            __fastcall get_KeyboardSubType(void);
  HRESULT         __fastcall set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/);
  HRESULT         __fastcall get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/);
  long            __fastcall get_KeyboardFunctionKey(void);
  HRESULT         __fastcall set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/);
  HRESULT         __fastcall get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/);
  long            __fastcall get_WinceFixedPalette(void);
  HRESULT         __fastcall set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/);
  HRESULT         __fastcall get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectToServerConsole(void);
  HRESULT         __fastcall set_BitmapPersistence(long pbitmapPersistence/*[in]*/);
  HRESULT         __fastcall get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/);
  long            __fastcall get_BitmapPersistence(void);
  HRESULT         __fastcall set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/);
  HRESULT         __fastcall get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/);
  long            __fastcall get_MinutesToIdleTimeout(void);
  HRESULT         __fastcall set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/);
  HRESULT         __fastcall get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SmartSizing(void);
  HRESULT         __fastcall set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/);
  HRESULT         __fastcall get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrLocalPrintingDocName(void);
  HRESULT         __fastcall set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/);
  HRESULT         __fastcall get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrClipCleanTempDirString(void);
  HRESULT         __fastcall set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/);
  HRESULT         __fastcall get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrClipPasteInfoString(void);
  HRESULT         __fastcall set_ClearTextPassword(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/);
  HRESULT         __fastcall get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayConnectionBar(void);
  HRESULT         __fastcall set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/);
  HRESULT         __fastcall get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PinConnectionBar(void);
  HRESULT         __fastcall set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/);
  HRESULT         __fastcall get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GrabFocusOnConnect(void);
  HRESULT         __fastcall set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/);
  HRESULT         __fastcall get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/);
  BSTR            __fastcall get_LoadBalanceInfo(void);
  HRESULT         __fastcall set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/);
  HRESULT         __fastcall get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectDrives(void);
  HRESULT         __fastcall set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/);
  HRESULT         __fastcall get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPrinters(void);
  HRESULT         __fastcall set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/);
  HRESULT         __fastcall get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPorts(void);
  HRESULT         __fastcall set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/);
  HRESULT         __fastcall get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectSmartCards(void);
  HRESULT         __fastcall set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache16BppSize(void);
  HRESULT         __fastcall set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache24BppSize(void);
  HRESULT         __fastcall set_PerformanceFlags(long pDisableList/*[in]*/);
  HRESULT         __fastcall get_PerformanceFlags(long* pDisableList/*[out,retval]*/);
  long            __fastcall get_PerformanceFlags(void);
  HRESULT         __fastcall set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/);
  HRESULT         __fastcall set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/);
  HRESULT         __fastcall get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NotifyTSPublicKey(void);
  HRESULT         __fastcall set_Compress(long pcompress/*[in]*/);
  HRESULT         __fastcall get_Compress(long* pcompress/*[out,retval]*/);
  long            __fastcall get_Compress(void);
  HRESULT         __fastcall set_BitmapPeristence(long pbitmapPeristence/*[in]*/);
  HRESULT         __fastcall get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/);
  long            __fastcall get_BitmapPeristence(void);
  HRESULT         __fastcall set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/);
  HRESULT         __fastcall get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/);
  long            __fastcall get_allowBackgroundInput(void);
  HRESULT         __fastcall set_KeyBoardLayoutStr(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_PluginDlls(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconFile(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconIndex(long Param1/*[in]*/);
  HRESULT         __fastcall set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/);
  HRESULT         __fastcall get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/);
  long            __fastcall get_ContainerHandledFullScreen(void);
  HRESULT         __fastcall set_DisableRdpdr(long pDisableRdpdr/*[in]*/);
  HRESULT         __fastcall get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/);
  long            __fastcall get_DisableRdpdr(void);

  __property   long            SmoothScroll = {read = get_SmoothScroll, write = set_SmoothScroll};
  __property   long            AcceleratorPassthrough = {read = get_AcceleratorPassthrough, write = set_AcceleratorPassthrough};
  __property   long            ShadowBitmap = {read = get_ShadowBitmap, write = set_ShadowBitmap};
  __property   long            TransportType = {read = get_TransportType, write = set_TransportType};
  __property   long            SasSequence = {read = get_SasSequence, write = set_SasSequence};
  __property   long            EncryptionEnabled = {read = get_EncryptionEnabled, write = set_EncryptionEnabled};
  __property   long            DedicatedTerminal = {read = get_DedicatedTerminal, write = set_DedicatedTerminal};
  __property   long            RDPPort = {read = get_RDPPort, write = set_RDPPort};
  __property   long            EnableMouse = {read = get_EnableMouse, write = set_EnableMouse};
  __property   long            DisableCtrlAltDel = {read = get_DisableCtrlAltDel, write = set_DisableCtrlAltDel};
  __property   long            EnableWindowsKey = {read = get_EnableWindowsKey, write = set_EnableWindowsKey};
  __property   long            DoubleClickDetect = {read = get_DoubleClickDetect, write = set_DoubleClickDetect};
  __property   long            MaximizeShell = {read = get_MaximizeShell, write = set_MaximizeShell};
  __property   long            HotKeyFullScreen = {read = get_HotKeyFullScreen, write = set_HotKeyFullScreen};
  __property   long            HotKeyCtrlEsc = {read = get_HotKeyCtrlEsc, write = set_HotKeyCtrlEsc};
  __property   long            HotKeyAltEsc = {read = get_HotKeyAltEsc, write = set_HotKeyAltEsc};
  __property   long            HotKeyAltTab = {read = get_HotKeyAltTab, write = set_HotKeyAltTab};
  __property   long            HotKeyAltShiftTab = {read = get_HotKeyAltShiftTab, write = set_HotKeyAltShiftTab};
  __property   long            HotKeyAltSpace = {read = get_HotKeyAltSpace, write = set_HotKeyAltSpace};
  __property   long            HotKeyCtrlAltDel = {read = get_HotKeyCtrlAltDel, write = set_HotKeyCtrlAltDel};
  __property   long            orderDrawThreshold = {read = get_orderDrawThreshold, write = set_orderDrawThreshold};
  __property   long            BitmapCacheSize = {read = get_BitmapCacheSize, write = set_BitmapCacheSize};
  __property   long            BitmapVirtualCacheSize = {read = get_BitmapVirtualCacheSize, write = set_BitmapVirtualCacheSize};
  __property   long            ScaleBitmapCachesByBPP = {read = get_ScaleBitmapCachesByBPP, write = set_ScaleBitmapCachesByBPP};
  __property   long            NumBitmapCaches = {read = get_NumBitmapCaches, write = set_NumBitmapCaches};
  __property   long            CachePersistenceActive = {read = get_CachePersistenceActive, write = set_CachePersistenceActive};
  __property   BSTR            PersistCacheDirectory = {write = set_PersistCacheDirectory};
  __property   long            brushSupportLevel = {read = get_brushSupportLevel, write = set_brushSupportLevel};
  __property   long            minInputSendInterval = {read = get_minInputSendInterval, write = set_minInputSendInterval};
  __property   long            InputEventsAtOnce = {read = get_InputEventsAtOnce, write = set_InputEventsAtOnce};
  __property   long            maxEventCount = {read = get_maxEventCount, write = set_maxEventCount};
  __property   long            keepAliveInterval = {read = get_keepAliveInterval, write = set_keepAliveInterval};
  __property   long            shutdownTimeout = {read = get_shutdownTimeout, write = set_shutdownTimeout};
  __property   long            overallConnectionTimeout = {read = get_overallConnectionTimeout, write = set_overallConnectionTimeout};
  __property   long            singleConnectionTimeout = {read = get_singleConnectionTimeout, write = set_singleConnectionTimeout};
  __property   long            KeyboardType = {read = get_KeyboardType, write = set_KeyboardType};
  __property   long            KeyboardSubType = {read = get_KeyboardSubType, write = set_KeyboardSubType};
  __property   long            KeyboardFunctionKey = {read = get_KeyboardFunctionKey, write = set_KeyboardFunctionKey};
  __property   long            WinceFixedPalette = {read = get_WinceFixedPalette, write = set_WinceFixedPalette};
  __property   VARIANT_BOOL    ConnectToServerConsole = {read = get_ConnectToServerConsole, write = set_ConnectToServerConsole};
  __property   long            BitmapPersistence = {read = get_BitmapPersistence, write = set_BitmapPersistence};
  __property   long            MinutesToIdleTimeout = {read = get_MinutesToIdleTimeout, write = set_MinutesToIdleTimeout};
  __property   VARIANT_BOOL    SmartSizing = {read = get_SmartSizing, write = set_SmartSizing};
  __property   BSTR            RdpdrLocalPrintingDocName = {read = get_RdpdrLocalPrintingDocName, write = set_RdpdrLocalPrintingDocName};
  __property   BSTR            RdpdrClipCleanTempDirString = {read = get_RdpdrClipCleanTempDirString, write = set_RdpdrClipCleanTempDirString};
  __property   BSTR            RdpdrClipPasteInfoString = {read = get_RdpdrClipPasteInfoString, write = set_RdpdrClipPasteInfoString};
  __property   BSTR            ClearTextPassword = {write = set_ClearTextPassword};
  __property   VARIANT_BOOL    DisplayConnectionBar = {read = get_DisplayConnectionBar, write = set_DisplayConnectionBar};
  __property   VARIANT_BOOL    PinConnectionBar = {read = get_PinConnectionBar, write = set_PinConnectionBar};
  __property   VARIANT_BOOL    GrabFocusOnConnect = {read = get_GrabFocusOnConnect, write = set_GrabFocusOnConnect};
  __property   BSTR            LoadBalanceInfo = {read = get_LoadBalanceInfo, write = set_LoadBalanceInfo};
  __property   VARIANT_BOOL    RedirectDrives = {read = get_RedirectDrives, write = set_RedirectDrives};
  __property   VARIANT_BOOL    RedirectPrinters = {read = get_RedirectPrinters, write = set_RedirectPrinters};
  __property   VARIANT_BOOL    RedirectPorts = {read = get_RedirectPorts, write = set_RedirectPorts};
  __property   VARIANT_BOOL    RedirectSmartCards = {read = get_RedirectSmartCards, write = set_RedirectSmartCards};
  __property   long            BitmapVirtualCache16BppSize = {read = get_BitmapVirtualCache16BppSize, write = set_BitmapVirtualCache16BppSize};
  __property   long            BitmapVirtualCache24BppSize = {read = get_BitmapVirtualCache24BppSize, write = set_BitmapVirtualCache24BppSize};
  __property   long            PerformanceFlags = {read = get_PerformanceFlags, write = set_PerformanceFlags};
  __property   VARIANT_BOOL    NotifyTSPublicKey = {read = get_NotifyTSPublicKey, write = set_NotifyTSPublicKey};

  __property   long            Compress = {read = get_Compress, write = set_Compress};
  __property   long            BitmapPeristence = {read = get_BitmapPeristence, write = set_BitmapPeristence};
  __property   long            allowBackgroundInput = {read = get_allowBackgroundInput, write = set_allowBackgroundInput};
  __property   BSTR            KeyBoardLayoutStr = {write = set_KeyBoardLayoutStr};
  __property   BSTR            PluginDlls = {write = set_PluginDlls};
  __property   BSTR            IconFile = {write = set_IconFile};
  __property   long            IconIndex = {write = set_IconIndex};
  __property   long            ContainerHandledFullScreen = {read = get_ContainerHandledFullScreen, write = set_ContainerHandledFullScreen};
  __property   long            DisableRdpdr = {read = get_DisableRdpdr, write = set_DisableRdpdr};
};
typedef IMsRdpClientAdvancedSettingsDispT<IMsRdpClientAdvancedSettings> IMsRdpClientAdvancedSettingsDisp;

typedef TComInterface<IMsRdpClientSecuredSettings>  TCOMIMsRdpClientSecuredSettings;

// *********************************************************************//
// DispIntf:  IMsRdpClientSecuredSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {605BEFCF-39C1-45CC-A811-068FB7BE346D}
// *********************************************************************//
template<class T>
class IMsRdpClientSecuredSettingsDispT : public TAutoDriver<IMsRdpClientSecuredSettings>
{
public:
  IMsRdpClientSecuredSettingsDispT(){}

  IMsRdpClientSecuredSettingsDispT(IMsRdpClientSecuredSettings *pintf)
  {
    TAutoDriver<IMsRdpClientSecuredSettings>::Bind(pintf, false);
  }

  IMsRdpClientSecuredSettingsDispT(IMsRdpClientSecuredSettingsPtr pintf)
  {
    TAutoDriver<IMsRdpClientSecuredSettings>::Bind(pintf, true);
  }

  IMsRdpClientSecuredSettingsDispT& operator=(IMsRdpClientSecuredSettings *pintf)
  {
    TAutoDriver<IMsRdpClientSecuredSettings>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClientSecuredSettingsDispT& operator=(IMsRdpClientSecuredSettingsPtr pintf)
  {
    TAutoDriver<IMsRdpClientSecuredSettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_KeyboardHookMode(long pkeyboardHookMode/*[in]*/);
  HRESULT         __fastcall get_KeyboardHookMode(long* pkeyboardHookMode/*[out,retval]*/);
  long            __fastcall get_KeyboardHookMode(void);
  HRESULT         __fastcall set_AudioRedirectionMode(long pAudioRedirectionMode/*[in]*/);
  HRESULT         __fastcall get_AudioRedirectionMode(long* pAudioRedirectionMode/*[out,retval]*/);
  long            __fastcall get_AudioRedirectionMode(void);
  HRESULT         __fastcall set_StartProgram(BSTR pStartProgram/*[in]*/);
  HRESULT         __fastcall get_StartProgram(BSTR* pStartProgram/*[out,retval]*/);
  BSTR            __fastcall get_StartProgram(void);
  HRESULT         __fastcall set_WorkDir(BSTR pWorkDir/*[in]*/);
  HRESULT         __fastcall get_WorkDir(BSTR* pWorkDir/*[out,retval]*/);
  BSTR            __fastcall get_WorkDir(void);
  HRESULT         __fastcall set_FullScreen(long pfFullScreen/*[in]*/);
  HRESULT         __fastcall get_FullScreen(long* pfFullScreen/*[out,retval]*/);
  long            __fastcall get_FullScreen(void);

  __property   long            KeyboardHookMode = {read = get_KeyboardHookMode, write = set_KeyboardHookMode};
  __property   long            AudioRedirectionMode = {read = get_AudioRedirectionMode, write = set_AudioRedirectionMode};

  __property   BSTR            StartProgram = {read = get_StartProgram, write = set_StartProgram};
  __property   BSTR            WorkDir = {read = get_WorkDir, write = set_WorkDir};
  __property   long            FullScreen = {read = get_FullScreen, write = set_FullScreen};
};
typedef IMsRdpClientSecuredSettingsDispT<IMsRdpClientSecuredSettings> IMsRdpClientSecuredSettingsDisp;

typedef TComInterface<IMsRdpClientNonScriptable>  TCOMIMsRdpClientNonScriptable;

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient2
// Interface: IMsRdpClient2
// *********************************************************************//
template <class T /* IMsRdpClient2 */ >
class TCOMIMsRdpClient2T : public TComInterface<IMsRdpClient2>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMsRdpClient2T() {}
  TCOMIMsRdpClient2T(IMsRdpClient2 *intf, bool addRef = false) : TComInterface<IMsRdpClient2>(intf, addRef) {}
  TCOMIMsRdpClient2T(const TCOMIMsRdpClient2T& src) : TComInterface<IMsRdpClient2>(src) {}
  TCOMIMsRdpClient2T& operator=(const TCOMIMsRdpClient2T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall get_AdvancedSettings3(void);
  HRESULT         __fastcall set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/);
  HRESULT         __fastcall get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectedStatusText(void);

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr AdvancedSettings3 = {read = get_AdvancedSettings3};
  __property   BSTR            ConnectedStatusText = {read = get_ConnectedStatusText, write = set_ConnectedStatusText};
};
typedef TCOMIMsRdpClient2T<IMsRdpClient2> TCOMIMsRdpClient2;

// *********************************************************************//
// DispIntf:  IMsRdpClient2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E7E17DC4-3B71-4BA7-A8E6-281FFADCA28F}
// *********************************************************************//
template<class T>
class IMsRdpClient2DispT : public TAutoDriver<IMsRdpClient2>
{
public:
  IMsRdpClient2DispT(){}

  IMsRdpClient2DispT(IMsRdpClient2 *pintf)
  {
    TAutoDriver<IMsRdpClient2>::Bind(pintf, false);
  }

  IMsRdpClient2DispT(IMsRdpClient2Ptr pintf)
  {
    TAutoDriver<IMsRdpClient2>::Bind(pintf, true);
  }

  IMsRdpClient2DispT& operator=(IMsRdpClient2 *pintf)
  {
    TAutoDriver<IMsRdpClient2>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClient2DispT& operator=(IMsRdpClient2Ptr pintf)
  {
    TAutoDriver<IMsRdpClient2>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MsRdpClient2NotSafeForScripting));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MsRdpClient2NotSafeForScripting);
  }

  HRESULT         __fastcall get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall get_AdvancedSettings3(void);
  HRESULT         __fastcall set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/);
  HRESULT         __fastcall get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectedStatusText(void);
  HRESULT         __fastcall set_ColorDepth(long pcolorDepth/*[in]*/);
  HRESULT         __fastcall get_ColorDepth(long* pcolorDepth/*[out,retval]*/);
  long            __fastcall get_ColorDepth(void);
  HRESULT         __fastcall get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall get_AdvancedSettings2(void);
  HRESULT         __fastcall get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall get_SecuredSettings2(void);
  HRESULT         __fastcall get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/);
  Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall get_ExtendedDisconnectReason(void);
  HRESULT         __fastcall set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/);
  HRESULT         __fastcall get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullScreen(void);
  HRESULT         __fastcall SetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long chanOptions/*[in]*/);
  HRESULT         __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long* pChanOptions/*[out,retval]*/);
  long            __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/);
  HRESULT         __fastcall RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/);
  Mstsclib_tlb::ControlCloseStatus __fastcall RequestClose(void);
  HRESULT         __fastcall set_Server(BSTR pServer/*[in]*/);
  HRESULT         __fastcall get_Server(BSTR* pServer/*[out,retval]*/);
  BSTR            __fastcall get_Server(void);
  HRESULT         __fastcall set_Domain(BSTR pDomain/*[in]*/);
  HRESULT         __fastcall get_Domain(BSTR* pDomain/*[out,retval]*/);
  BSTR            __fastcall get_Domain(void);
  HRESULT         __fastcall set_UserName(BSTR pUserName/*[in]*/);
  HRESULT         __fastcall get_UserName(BSTR* pUserName/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall set_DisconnectedText(BSTR pDisconnectedText/*[in]*/);
  HRESULT         __fastcall get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/);
  BSTR            __fastcall get_DisconnectedText(void);
  HRESULT         __fastcall set_ConnectingText(BSTR pConnectingText/*[in]*/);
  HRESULT         __fastcall get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectingText(void);
  HRESULT         __fastcall get_Connected(short* pIsConnected/*[out,retval]*/);
  short           __fastcall get_Connected(void);
  HRESULT         __fastcall set_DesktopWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopWidth(void);
  HRESULT         __fastcall set_DesktopHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopHeight(void);
  HRESULT         __fastcall set_StartConnected(long pfStartConnected/*[in]*/);
  HRESULT         __fastcall get_StartConnected(long* pfStartConnected/*[out,retval]*/);
  long            __fastcall get_StartConnected(void);
  HRESULT         __fastcall get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/);
  long            __fastcall get_HorizontalScrollBarVisible(void);
  HRESULT         __fastcall get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/);
  long            __fastcall get_VerticalScrollBarVisible(void);
  HRESULT         __fastcall set_FullScreenTitle(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_CipherStrength(long* pCipherStrength/*[out,retval]*/);
  long            __fastcall get_CipherStrength(void);
  HRESULT         __fastcall get_Version(BSTR* pVersion/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/);
  long            __fastcall get_SecuredSettingsEnabled(void);
  HRESULT         __fastcall get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall get_SecuredSettings(void);
  HRESULT         __fastcall get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall get_AdvancedSettings(void);
  HRESULT         __fastcall get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/);
  Mstsclib_tlb::IMsTscDebugPtr __fastcall get_Debugger(void);
  HRESULT         __fastcall Connect();
  HRESULT         __fastcall Disconnect();
  HRESULT         __fastcall CreateVirtualChannels(BSTR newVal/*[in]*/);
  HRESULT         __fastcall SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/);

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr AdvancedSettings3 = {read = get_AdvancedSettings3};
  __property   BSTR            ConnectedStatusText = {read = get_ConnectedStatusText, write = set_ConnectedStatusText};

  __property   long            ColorDepth = {read = get_ColorDepth, write = set_ColorDepth};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr AdvancedSettings2 = {read = get_AdvancedSettings2};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr SecuredSettings2 = {read = get_SecuredSettings2};
  __property   Mstsclib_tlb::ExtendedDisconnectReasonCode ExtendedDisconnectReason = {read = get_ExtendedDisconnectReason};
  __property   VARIANT_BOOL    FullScreen = {read = get_FullScreen, write = set_FullScreen};

  __property   BSTR            Server = {read = get_Server, write = set_Server};
  __property   BSTR            Domain = {read = get_Domain, write = set_Domain};
  __property   BSTR            UserName = {read = get_UserName, write = set_UserName};
  __property   BSTR            DisconnectedText = {read = get_DisconnectedText, write = set_DisconnectedText};
  __property   BSTR            ConnectingText = {read = get_ConnectingText, write = set_ConnectingText};
  __property   short           Connected = {read = get_Connected};
  __property   long            DesktopWidth = {read = get_DesktopWidth, write = set_DesktopWidth};
  __property   long            DesktopHeight = {read = get_DesktopHeight, write = set_DesktopHeight};
  __property   long            StartConnected = {read = get_StartConnected, write = set_StartConnected};
  __property   long            HorizontalScrollBarVisible = {read = get_HorizontalScrollBarVisible};
  __property   long            VerticalScrollBarVisible = {read = get_VerticalScrollBarVisible};
  __property   BSTR            FullScreenTitle = {write = set_FullScreenTitle};
  __property   long            CipherStrength = {read = get_CipherStrength};
  __property   BSTR            Version = {read = get_Version};
  __property   long            SecuredSettingsEnabled = {read = get_SecuredSettingsEnabled};
  __property   Mstsclib_tlb::IMsTscSecuredSettingsPtr SecuredSettings = {read = get_SecuredSettings};
  __property   Mstsclib_tlb::IMsTscAdvancedSettingsPtr AdvancedSettings = {read = get_AdvancedSettings};
  __property   Mstsclib_tlb::IMsTscDebugPtr Debugger = {read = get_Debugger};

};
typedef IMsRdpClient2DispT<IMsRdpClient2> IMsRdpClient2Disp;

typedef TComInterface<IMsRdpClientAdvancedSettings2>  TCOMIMsRdpClientAdvancedSettings2;

// *********************************************************************//
// DispIntf:  IMsRdpClientAdvancedSettings2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9AC42117-2B76-4320-AA44-0E616AB8437B}
// *********************************************************************//
template<class T>
class IMsRdpClientAdvancedSettings2DispT : public TAutoDriver<IMsRdpClientAdvancedSettings2>
{
public:
  IMsRdpClientAdvancedSettings2DispT(){}

  IMsRdpClientAdvancedSettings2DispT(IMsRdpClientAdvancedSettings2 *pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings2>::Bind(pintf, false);
  }

  IMsRdpClientAdvancedSettings2DispT(IMsRdpClientAdvancedSettings2Ptr pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings2>::Bind(pintf, true);
  }

  IMsRdpClientAdvancedSettings2DispT& operator=(IMsRdpClientAdvancedSettings2 *pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings2>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClientAdvancedSettings2DispT& operator=(IMsRdpClientAdvancedSettings2Ptr pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_CanAutoReconnect(VARIANT_BOOL* pfCanAutoReconnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanAutoReconnect(void);
  HRESULT         __fastcall set_EnableAutoReconnect(VARIANT_BOOL pfEnableAutoReconnect/*[in]*/);
  HRESULT         __fastcall get_EnableAutoReconnect(VARIANT_BOOL* pfEnableAutoReconnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableAutoReconnect(void);
  HRESULT         __fastcall set_MaxReconnectAttempts(long pMaxReconnectAttempts/*[in]*/);
  HRESULT         __fastcall get_MaxReconnectAttempts(long* pMaxReconnectAttempts/*[out,retval]*/);
  long            __fastcall get_MaxReconnectAttempts(void);
  HRESULT         __fastcall set_SmoothScroll(long psmoothScroll/*[in]*/);
  HRESULT         __fastcall get_SmoothScroll(long* psmoothScroll/*[out,retval]*/);
  long            __fastcall get_SmoothScroll(void);
  HRESULT         __fastcall set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/);
  HRESULT         __fastcall get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/);
  long            __fastcall get_AcceleratorPassthrough(void);
  HRESULT         __fastcall set_ShadowBitmap(long pshadowBitmap/*[in]*/);
  HRESULT         __fastcall get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/);
  long            __fastcall get_ShadowBitmap(void);
  HRESULT         __fastcall set_TransportType(long ptransportType/*[in]*/);
  HRESULT         __fastcall get_TransportType(long* ptransportType/*[out,retval]*/);
  long            __fastcall get_TransportType(void);
  HRESULT         __fastcall set_SasSequence(long psasSequence/*[in]*/);
  HRESULT         __fastcall get_SasSequence(long* psasSequence/*[out,retval]*/);
  long            __fastcall get_SasSequence(void);
  HRESULT         __fastcall set_EncryptionEnabled(long pencryptionEnabled/*[in]*/);
  HRESULT         __fastcall get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/);
  long            __fastcall get_EncryptionEnabled(void);
  HRESULT         __fastcall set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/);
  HRESULT         __fastcall get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/);
  long            __fastcall get_DedicatedTerminal(void);
  HRESULT         __fastcall set_RDPPort(long prdpPort/*[in]*/);
  HRESULT         __fastcall get_RDPPort(long* prdpPort/*[out,retval]*/);
  long            __fastcall get_RDPPort(void);
  HRESULT         __fastcall set_EnableMouse(long penableMouse/*[in]*/);
  HRESULT         __fastcall get_EnableMouse(long* penableMouse/*[out,retval]*/);
  long            __fastcall get_EnableMouse(void);
  HRESULT         __fastcall set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/);
  HRESULT         __fastcall get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/);
  long            __fastcall get_DisableCtrlAltDel(void);
  HRESULT         __fastcall set_EnableWindowsKey(long penableWindowsKey/*[in]*/);
  HRESULT         __fastcall get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/);
  long            __fastcall get_EnableWindowsKey(void);
  HRESULT         __fastcall set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/);
  HRESULT         __fastcall get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/);
  long            __fastcall get_DoubleClickDetect(void);
  HRESULT         __fastcall set_MaximizeShell(long pmaximizeShell/*[in]*/);
  HRESULT         __fastcall get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/);
  long            __fastcall get_MaximizeShell(void);
  HRESULT         __fastcall set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/);
  HRESULT         __fastcall get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/);
  long            __fastcall get_HotKeyFullScreen(void);
  HRESULT         __fastcall set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/);
  HRESULT         __fastcall get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/);
  long            __fastcall get_HotKeyCtrlEsc(void);
  HRESULT         __fastcall set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/);
  long            __fastcall get_HotKeyAltEsc(void);
  HRESULT         __fastcall set_HotKeyAltTab(long photKeyAltTab/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/);
  long            __fastcall get_HotKeyAltTab(void);
  HRESULT         __fastcall set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/);
  long            __fastcall get_HotKeyAltShiftTab(void);
  HRESULT         __fastcall set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/);
  long            __fastcall get_HotKeyAltSpace(void);
  HRESULT         __fastcall set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/);
  HRESULT         __fastcall get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/);
  long            __fastcall get_HotKeyCtrlAltDel(void);
  HRESULT         __fastcall set_orderDrawThreshold(long porderDrawThreshold/*[in]*/);
  HRESULT         __fastcall get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/);
  long            __fastcall get_orderDrawThreshold(void);
  HRESULT         __fastcall set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/);
  HRESULT         __fastcall get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/);
  long            __fastcall get_BitmapCacheSize(void);
  HRESULT         __fastcall set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCacheSize(void);
  HRESULT         __fastcall set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/);
  HRESULT         __fastcall get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/);
  long            __fastcall get_ScaleBitmapCachesByBPP(void);
  HRESULT         __fastcall set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/);
  HRESULT         __fastcall get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/);
  long            __fastcall get_NumBitmapCaches(void);
  HRESULT         __fastcall set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/);
  HRESULT         __fastcall get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/);
  long            __fastcall get_CachePersistenceActive(void);
  HRESULT         __fastcall set_PersistCacheDirectory(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_brushSupportLevel(long pbrushSupportLevel/*[in]*/);
  HRESULT         __fastcall get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/);
  long            __fastcall get_brushSupportLevel(void);
  HRESULT         __fastcall set_minInputSendInterval(long pminInputSendInterval/*[in]*/);
  HRESULT         __fastcall get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/);
  long            __fastcall get_minInputSendInterval(void);
  HRESULT         __fastcall set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/);
  HRESULT         __fastcall get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/);
  long            __fastcall get_InputEventsAtOnce(void);
  HRESULT         __fastcall set_maxEventCount(long pmaxEventCount/*[in]*/);
  HRESULT         __fastcall get_maxEventCount(long* pmaxEventCount/*[out,retval]*/);
  long            __fastcall get_maxEventCount(void);
  HRESULT         __fastcall set_keepAliveInterval(long pkeepAliveInterval/*[in]*/);
  HRESULT         __fastcall get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/);
  long            __fastcall get_keepAliveInterval(void);
  HRESULT         __fastcall set_shutdownTimeout(long pshutdownTimeout/*[in]*/);
  HRESULT         __fastcall get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/);
  long            __fastcall get_shutdownTimeout(void);
  HRESULT         __fastcall set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/);
  HRESULT         __fastcall get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/);
  long            __fastcall get_overallConnectionTimeout(void);
  HRESULT         __fastcall set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/);
  HRESULT         __fastcall get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/);
  long            __fastcall get_singleConnectionTimeout(void);
  HRESULT         __fastcall set_KeyboardType(long pkeyboardType/*[in]*/);
  HRESULT         __fastcall get_KeyboardType(long* pkeyboardType/*[out,retval]*/);
  long            __fastcall get_KeyboardType(void);
  HRESULT         __fastcall set_KeyboardSubType(long pkeyboardSubType/*[in]*/);
  HRESULT         __fastcall get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/);
  long            __fastcall get_KeyboardSubType(void);
  HRESULT         __fastcall set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/);
  HRESULT         __fastcall get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/);
  long            __fastcall get_KeyboardFunctionKey(void);
  HRESULT         __fastcall set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/);
  HRESULT         __fastcall get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/);
  long            __fastcall get_WinceFixedPalette(void);
  HRESULT         __fastcall set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/);
  HRESULT         __fastcall get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectToServerConsole(void);
  HRESULT         __fastcall set_BitmapPersistence(long pbitmapPersistence/*[in]*/);
  HRESULT         __fastcall get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/);
  long            __fastcall get_BitmapPersistence(void);
  HRESULT         __fastcall set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/);
  HRESULT         __fastcall get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/);
  long            __fastcall get_MinutesToIdleTimeout(void);
  HRESULT         __fastcall set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/);
  HRESULT         __fastcall get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SmartSizing(void);
  HRESULT         __fastcall set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/);
  HRESULT         __fastcall get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrLocalPrintingDocName(void);
  HRESULT         __fastcall set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/);
  HRESULT         __fastcall get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrClipCleanTempDirString(void);
  HRESULT         __fastcall set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/);
  HRESULT         __fastcall get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrClipPasteInfoString(void);
  HRESULT         __fastcall set_ClearTextPassword(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/);
  HRESULT         __fastcall get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayConnectionBar(void);
  HRESULT         __fastcall set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/);
  HRESULT         __fastcall get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PinConnectionBar(void);
  HRESULT         __fastcall set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/);
  HRESULT         __fastcall get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GrabFocusOnConnect(void);
  HRESULT         __fastcall set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/);
  HRESULT         __fastcall get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/);
  BSTR            __fastcall get_LoadBalanceInfo(void);
  HRESULT         __fastcall set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/);
  HRESULT         __fastcall get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectDrives(void);
  HRESULT         __fastcall set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/);
  HRESULT         __fastcall get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPrinters(void);
  HRESULT         __fastcall set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/);
  HRESULT         __fastcall get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPorts(void);
  HRESULT         __fastcall set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/);
  HRESULT         __fastcall get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectSmartCards(void);
  HRESULT         __fastcall set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache16BppSize(void);
  HRESULT         __fastcall set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache24BppSize(void);
  HRESULT         __fastcall set_PerformanceFlags(long pDisableList/*[in]*/);
  HRESULT         __fastcall get_PerformanceFlags(long* pDisableList/*[out,retval]*/);
  long            __fastcall get_PerformanceFlags(void);
  HRESULT         __fastcall set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/);
  HRESULT         __fastcall set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/);
  HRESULT         __fastcall get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NotifyTSPublicKey(void);
  HRESULT         __fastcall set_Compress(long pcompress/*[in]*/);
  HRESULT         __fastcall get_Compress(long* pcompress/*[out,retval]*/);
  long            __fastcall get_Compress(void);
  HRESULT         __fastcall set_BitmapPeristence(long pbitmapPeristence/*[in]*/);
  HRESULT         __fastcall get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/);
  long            __fastcall get_BitmapPeristence(void);
  HRESULT         __fastcall set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/);
  HRESULT         __fastcall get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/);
  long            __fastcall get_allowBackgroundInput(void);
  HRESULT         __fastcall set_KeyBoardLayoutStr(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_PluginDlls(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconFile(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconIndex(long Param1/*[in]*/);
  HRESULT         __fastcall set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/);
  HRESULT         __fastcall get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/);
  long            __fastcall get_ContainerHandledFullScreen(void);
  HRESULT         __fastcall set_DisableRdpdr(long pDisableRdpdr/*[in]*/);
  HRESULT         __fastcall get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/);
  long            __fastcall get_DisableRdpdr(void);

  __property   VARIANT_BOOL    CanAutoReconnect = {read = get_CanAutoReconnect};
  __property   VARIANT_BOOL    EnableAutoReconnect = {read = get_EnableAutoReconnect, write = set_EnableAutoReconnect};
  __property   long            MaxReconnectAttempts = {read = get_MaxReconnectAttempts, write = set_MaxReconnectAttempts};

  __property   long            SmoothScroll = {read = get_SmoothScroll, write = set_SmoothScroll};
  __property   long            AcceleratorPassthrough = {read = get_AcceleratorPassthrough, write = set_AcceleratorPassthrough};
  __property   long            ShadowBitmap = {read = get_ShadowBitmap, write = set_ShadowBitmap};
  __property   long            TransportType = {read = get_TransportType, write = set_TransportType};
  __property   long            SasSequence = {read = get_SasSequence, write = set_SasSequence};
  __property   long            EncryptionEnabled = {read = get_EncryptionEnabled, write = set_EncryptionEnabled};
  __property   long            DedicatedTerminal = {read = get_DedicatedTerminal, write = set_DedicatedTerminal};
  __property   long            RDPPort = {read = get_RDPPort, write = set_RDPPort};
  __property   long            EnableMouse = {read = get_EnableMouse, write = set_EnableMouse};
  __property   long            DisableCtrlAltDel = {read = get_DisableCtrlAltDel, write = set_DisableCtrlAltDel};
  __property   long            EnableWindowsKey = {read = get_EnableWindowsKey, write = set_EnableWindowsKey};
  __property   long            DoubleClickDetect = {read = get_DoubleClickDetect, write = set_DoubleClickDetect};
  __property   long            MaximizeShell = {read = get_MaximizeShell, write = set_MaximizeShell};
  __property   long            HotKeyFullScreen = {read = get_HotKeyFullScreen, write = set_HotKeyFullScreen};
  __property   long            HotKeyCtrlEsc = {read = get_HotKeyCtrlEsc, write = set_HotKeyCtrlEsc};
  __property   long            HotKeyAltEsc = {read = get_HotKeyAltEsc, write = set_HotKeyAltEsc};
  __property   long            HotKeyAltTab = {read = get_HotKeyAltTab, write = set_HotKeyAltTab};
  __property   long            HotKeyAltShiftTab = {read = get_HotKeyAltShiftTab, write = set_HotKeyAltShiftTab};
  __property   long            HotKeyAltSpace = {read = get_HotKeyAltSpace, write = set_HotKeyAltSpace};
  __property   long            HotKeyCtrlAltDel = {read = get_HotKeyCtrlAltDel, write = set_HotKeyCtrlAltDel};
  __property   long            orderDrawThreshold = {read = get_orderDrawThreshold, write = set_orderDrawThreshold};
  __property   long            BitmapCacheSize = {read = get_BitmapCacheSize, write = set_BitmapCacheSize};
  __property   long            BitmapVirtualCacheSize = {read = get_BitmapVirtualCacheSize, write = set_BitmapVirtualCacheSize};
  __property   long            ScaleBitmapCachesByBPP = {read = get_ScaleBitmapCachesByBPP, write = set_ScaleBitmapCachesByBPP};
  __property   long            NumBitmapCaches = {read = get_NumBitmapCaches, write = set_NumBitmapCaches};
  __property   long            CachePersistenceActive = {read = get_CachePersistenceActive, write = set_CachePersistenceActive};
  __property   BSTR            PersistCacheDirectory = {write = set_PersistCacheDirectory};
  __property   long            brushSupportLevel = {read = get_brushSupportLevel, write = set_brushSupportLevel};
  __property   long            minInputSendInterval = {read = get_minInputSendInterval, write = set_minInputSendInterval};
  __property   long            InputEventsAtOnce = {read = get_InputEventsAtOnce, write = set_InputEventsAtOnce};
  __property   long            maxEventCount = {read = get_maxEventCount, write = set_maxEventCount};
  __property   long            keepAliveInterval = {read = get_keepAliveInterval, write = set_keepAliveInterval};
  __property   long            shutdownTimeout = {read = get_shutdownTimeout, write = set_shutdownTimeout};
  __property   long            overallConnectionTimeout = {read = get_overallConnectionTimeout, write = set_overallConnectionTimeout};
  __property   long            singleConnectionTimeout = {read = get_singleConnectionTimeout, write = set_singleConnectionTimeout};
  __property   long            KeyboardType = {read = get_KeyboardType, write = set_KeyboardType};
  __property   long            KeyboardSubType = {read = get_KeyboardSubType, write = set_KeyboardSubType};
  __property   long            KeyboardFunctionKey = {read = get_KeyboardFunctionKey, write = set_KeyboardFunctionKey};
  __property   long            WinceFixedPalette = {read = get_WinceFixedPalette, write = set_WinceFixedPalette};
  __property   VARIANT_BOOL    ConnectToServerConsole = {read = get_ConnectToServerConsole, write = set_ConnectToServerConsole};
  __property   long            BitmapPersistence = {read = get_BitmapPersistence, write = set_BitmapPersistence};
  __property   long            MinutesToIdleTimeout = {read = get_MinutesToIdleTimeout, write = set_MinutesToIdleTimeout};
  __property   VARIANT_BOOL    SmartSizing = {read = get_SmartSizing, write = set_SmartSizing};
  __property   BSTR            RdpdrLocalPrintingDocName = {read = get_RdpdrLocalPrintingDocName, write = set_RdpdrLocalPrintingDocName};
  __property   BSTR            RdpdrClipCleanTempDirString = {read = get_RdpdrClipCleanTempDirString, write = set_RdpdrClipCleanTempDirString};
  __property   BSTR            RdpdrClipPasteInfoString = {read = get_RdpdrClipPasteInfoString, write = set_RdpdrClipPasteInfoString};
  __property   BSTR            ClearTextPassword = {write = set_ClearTextPassword};
  __property   VARIANT_BOOL    DisplayConnectionBar = {read = get_DisplayConnectionBar, write = set_DisplayConnectionBar};
  __property   VARIANT_BOOL    PinConnectionBar = {read = get_PinConnectionBar, write = set_PinConnectionBar};
  __property   VARIANT_BOOL    GrabFocusOnConnect = {read = get_GrabFocusOnConnect, write = set_GrabFocusOnConnect};
  __property   BSTR            LoadBalanceInfo = {read = get_LoadBalanceInfo, write = set_LoadBalanceInfo};
  __property   VARIANT_BOOL    RedirectDrives = {read = get_RedirectDrives, write = set_RedirectDrives};
  __property   VARIANT_BOOL    RedirectPrinters = {read = get_RedirectPrinters, write = set_RedirectPrinters};
  __property   VARIANT_BOOL    RedirectPorts = {read = get_RedirectPorts, write = set_RedirectPorts};
  __property   VARIANT_BOOL    RedirectSmartCards = {read = get_RedirectSmartCards, write = set_RedirectSmartCards};
  __property   long            BitmapVirtualCache16BppSize = {read = get_BitmapVirtualCache16BppSize, write = set_BitmapVirtualCache16BppSize};
  __property   long            BitmapVirtualCache24BppSize = {read = get_BitmapVirtualCache24BppSize, write = set_BitmapVirtualCache24BppSize};
  __property   long            PerformanceFlags = {read = get_PerformanceFlags, write = set_PerformanceFlags};
  __property   VARIANT_BOOL    NotifyTSPublicKey = {read = get_NotifyTSPublicKey, write = set_NotifyTSPublicKey};

  __property   long            Compress = {read = get_Compress, write = set_Compress};
  __property   long            BitmapPeristence = {read = get_BitmapPeristence, write = set_BitmapPeristence};
  __property   long            allowBackgroundInput = {read = get_allowBackgroundInput, write = set_allowBackgroundInput};
  __property   BSTR            KeyBoardLayoutStr = {write = set_KeyBoardLayoutStr};
  __property   BSTR            PluginDlls = {write = set_PluginDlls};
  __property   BSTR            IconFile = {write = set_IconFile};
  __property   long            IconIndex = {write = set_IconIndex};
  __property   long            ContainerHandledFullScreen = {read = get_ContainerHandledFullScreen, write = set_ContainerHandledFullScreen};
  __property   long            DisableRdpdr = {read = get_DisableRdpdr, write = set_DisableRdpdr};
};
typedef IMsRdpClientAdvancedSettings2DispT<IMsRdpClientAdvancedSettings2> IMsRdpClientAdvancedSettings2Disp;

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient3
// Interface: IMsRdpClient3
// *********************************************************************//
template <class T /* IMsRdpClient3 */ >
class TCOMIMsRdpClient3T : public TComInterface<IMsRdpClient3>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMsRdpClient3T() {}
  TCOMIMsRdpClient3T(IMsRdpClient3 *intf, bool addRef = false) : TComInterface<IMsRdpClient3>(intf, addRef) {}
  TCOMIMsRdpClient3T(const TCOMIMsRdpClient3T& src) : TComInterface<IMsRdpClient3>(src) {}
  TCOMIMsRdpClient3T& operator=(const TCOMIMsRdpClient3T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall get_AdvancedSettings4(void);

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr AdvancedSettings4 = {read = get_AdvancedSettings4};
};
typedef TCOMIMsRdpClient3T<IMsRdpClient3> TCOMIMsRdpClient3;

// *********************************************************************//
// DispIntf:  IMsRdpClient3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {91B7CBC5-A72E-4FA0-9300-D647D7E897FF}
// *********************************************************************//
template<class T>
class IMsRdpClient3DispT : public TAutoDriver<IMsRdpClient3>
{
public:
  IMsRdpClient3DispT(){}

  IMsRdpClient3DispT(IMsRdpClient3 *pintf)
  {
    TAutoDriver<IMsRdpClient3>::Bind(pintf, false);
  }

  IMsRdpClient3DispT(IMsRdpClient3Ptr pintf)
  {
    TAutoDriver<IMsRdpClient3>::Bind(pintf, true);
  }

  IMsRdpClient3DispT& operator=(IMsRdpClient3 *pintf)
  {
    TAutoDriver<IMsRdpClient3>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClient3DispT& operator=(IMsRdpClient3Ptr pintf)
  {
    TAutoDriver<IMsRdpClient3>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MsRdpClient3NotSafeForScripting));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MsRdpClient3NotSafeForScripting);
  }

  HRESULT         __fastcall get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall get_AdvancedSettings4(void);
  HRESULT         __fastcall get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall get_AdvancedSettings3(void);
  HRESULT         __fastcall set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/);
  HRESULT         __fastcall get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectedStatusText(void);
  HRESULT         __fastcall set_ColorDepth(long pcolorDepth/*[in]*/);
  HRESULT         __fastcall get_ColorDepth(long* pcolorDepth/*[out,retval]*/);
  long            __fastcall get_ColorDepth(void);
  HRESULT         __fastcall get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall get_AdvancedSettings2(void);
  HRESULT         __fastcall get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall get_SecuredSettings2(void);
  HRESULT         __fastcall get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/);
  Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall get_ExtendedDisconnectReason(void);
  HRESULT         __fastcall set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/);
  HRESULT         __fastcall get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullScreen(void);
  HRESULT         __fastcall SetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long chanOptions/*[in]*/);
  HRESULT         __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long* pChanOptions/*[out,retval]*/);
  long            __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/);
  HRESULT         __fastcall RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/);
  Mstsclib_tlb::ControlCloseStatus __fastcall RequestClose(void);
  HRESULT         __fastcall set_Server(BSTR pServer/*[in]*/);
  HRESULT         __fastcall get_Server(BSTR* pServer/*[out,retval]*/);
  BSTR            __fastcall get_Server(void);
  HRESULT         __fastcall set_Domain(BSTR pDomain/*[in]*/);
  HRESULT         __fastcall get_Domain(BSTR* pDomain/*[out,retval]*/);
  BSTR            __fastcall get_Domain(void);
  HRESULT         __fastcall set_UserName(BSTR pUserName/*[in]*/);
  HRESULT         __fastcall get_UserName(BSTR* pUserName/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall set_DisconnectedText(BSTR pDisconnectedText/*[in]*/);
  HRESULT         __fastcall get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/);
  BSTR            __fastcall get_DisconnectedText(void);
  HRESULT         __fastcall set_ConnectingText(BSTR pConnectingText/*[in]*/);
  HRESULT         __fastcall get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectingText(void);
  HRESULT         __fastcall get_Connected(short* pIsConnected/*[out,retval]*/);
  short           __fastcall get_Connected(void);
  HRESULT         __fastcall set_DesktopWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopWidth(void);
  HRESULT         __fastcall set_DesktopHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopHeight(void);
  HRESULT         __fastcall set_StartConnected(long pfStartConnected/*[in]*/);
  HRESULT         __fastcall get_StartConnected(long* pfStartConnected/*[out,retval]*/);
  long            __fastcall get_StartConnected(void);
  HRESULT         __fastcall get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/);
  long            __fastcall get_HorizontalScrollBarVisible(void);
  HRESULT         __fastcall get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/);
  long            __fastcall get_VerticalScrollBarVisible(void);
  HRESULT         __fastcall set_FullScreenTitle(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_CipherStrength(long* pCipherStrength/*[out,retval]*/);
  long            __fastcall get_CipherStrength(void);
  HRESULT         __fastcall get_Version(BSTR* pVersion/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/);
  long            __fastcall get_SecuredSettingsEnabled(void);
  HRESULT         __fastcall get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall get_SecuredSettings(void);
  HRESULT         __fastcall get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall get_AdvancedSettings(void);
  HRESULT         __fastcall get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/);
  Mstsclib_tlb::IMsTscDebugPtr __fastcall get_Debugger(void);
  HRESULT         __fastcall Connect();
  HRESULT         __fastcall Disconnect();
  HRESULT         __fastcall CreateVirtualChannels(BSTR newVal/*[in]*/);
  HRESULT         __fastcall SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/);

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr AdvancedSettings4 = {read = get_AdvancedSettings4};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr AdvancedSettings3 = {read = get_AdvancedSettings3};
  __property   BSTR            ConnectedStatusText = {read = get_ConnectedStatusText, write = set_ConnectedStatusText};

  __property   long            ColorDepth = {read = get_ColorDepth, write = set_ColorDepth};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr AdvancedSettings2 = {read = get_AdvancedSettings2};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr SecuredSettings2 = {read = get_SecuredSettings2};
  __property   Mstsclib_tlb::ExtendedDisconnectReasonCode ExtendedDisconnectReason = {read = get_ExtendedDisconnectReason};
  __property   VARIANT_BOOL    FullScreen = {read = get_FullScreen, write = set_FullScreen};

  __property   BSTR            Server = {read = get_Server, write = set_Server};
  __property   BSTR            Domain = {read = get_Domain, write = set_Domain};
  __property   BSTR            UserName = {read = get_UserName, write = set_UserName};
  __property   BSTR            DisconnectedText = {read = get_DisconnectedText, write = set_DisconnectedText};
  __property   BSTR            ConnectingText = {read = get_ConnectingText, write = set_ConnectingText};
  __property   short           Connected = {read = get_Connected};
  __property   long            DesktopWidth = {read = get_DesktopWidth, write = set_DesktopWidth};
  __property   long            DesktopHeight = {read = get_DesktopHeight, write = set_DesktopHeight};
  __property   long            StartConnected = {read = get_StartConnected, write = set_StartConnected};
  __property   long            HorizontalScrollBarVisible = {read = get_HorizontalScrollBarVisible};
  __property   long            VerticalScrollBarVisible = {read = get_VerticalScrollBarVisible};
  __property   BSTR            FullScreenTitle = {write = set_FullScreenTitle};
  __property   long            CipherStrength = {read = get_CipherStrength};
  __property   BSTR            Version = {read = get_Version};
  __property   long            SecuredSettingsEnabled = {read = get_SecuredSettingsEnabled};
  __property   Mstsclib_tlb::IMsTscSecuredSettingsPtr SecuredSettings = {read = get_SecuredSettings};
  __property   Mstsclib_tlb::IMsTscAdvancedSettingsPtr AdvancedSettings = {read = get_AdvancedSettings};
  __property   Mstsclib_tlb::IMsTscDebugPtr Debugger = {read = get_Debugger};

};
typedef IMsRdpClient3DispT<IMsRdpClient3> IMsRdpClient3Disp;

typedef TComInterface<IMsRdpClientAdvancedSettings3>  TCOMIMsRdpClientAdvancedSettings3;

// *********************************************************************//
// DispIntf:  IMsRdpClientAdvancedSettings3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {19CD856B-C542-4C53-ACEE-F127E3BE1A59}
// *********************************************************************//
template<class T>
class IMsRdpClientAdvancedSettings3DispT : public TAutoDriver<IMsRdpClientAdvancedSettings3>
{
public:
  IMsRdpClientAdvancedSettings3DispT(){}

  IMsRdpClientAdvancedSettings3DispT(IMsRdpClientAdvancedSettings3 *pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings3>::Bind(pintf, false);
  }

  IMsRdpClientAdvancedSettings3DispT(IMsRdpClientAdvancedSettings3Ptr pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings3>::Bind(pintf, true);
  }

  IMsRdpClientAdvancedSettings3DispT& operator=(IMsRdpClientAdvancedSettings3 *pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings3>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClientAdvancedSettings3DispT& operator=(IMsRdpClientAdvancedSettings3Ptr pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings3>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_ConnectionBarShowMinimizeButton(VARIANT_BOOL pfShowMinimize/*[in]*/);
  HRESULT         __fastcall get_ConnectionBarShowMinimizeButton(VARIANT_BOOL* pfShowMinimize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectionBarShowMinimizeButton(void);
  HRESULT         __fastcall set_ConnectionBarShowRestoreButton(VARIANT_BOOL pfShowRestore/*[in]*/);
  HRESULT         __fastcall get_ConnectionBarShowRestoreButton(VARIANT_BOOL* pfShowRestore/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectionBarShowRestoreButton(void);
  HRESULT         __fastcall get_CanAutoReconnect(VARIANT_BOOL* pfCanAutoReconnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanAutoReconnect(void);
  HRESULT         __fastcall set_EnableAutoReconnect(VARIANT_BOOL pfEnableAutoReconnect/*[in]*/);
  HRESULT         __fastcall get_EnableAutoReconnect(VARIANT_BOOL* pfEnableAutoReconnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableAutoReconnect(void);
  HRESULT         __fastcall set_MaxReconnectAttempts(long pMaxReconnectAttempts/*[in]*/);
  HRESULT         __fastcall get_MaxReconnectAttempts(long* pMaxReconnectAttempts/*[out,retval]*/);
  long            __fastcall get_MaxReconnectAttempts(void);
  HRESULT         __fastcall set_SmoothScroll(long psmoothScroll/*[in]*/);
  HRESULT         __fastcall get_SmoothScroll(long* psmoothScroll/*[out,retval]*/);
  long            __fastcall get_SmoothScroll(void);
  HRESULT         __fastcall set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/);
  HRESULT         __fastcall get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/);
  long            __fastcall get_AcceleratorPassthrough(void);
  HRESULT         __fastcall set_ShadowBitmap(long pshadowBitmap/*[in]*/);
  HRESULT         __fastcall get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/);
  long            __fastcall get_ShadowBitmap(void);
  HRESULT         __fastcall set_TransportType(long ptransportType/*[in]*/);
  HRESULT         __fastcall get_TransportType(long* ptransportType/*[out,retval]*/);
  long            __fastcall get_TransportType(void);
  HRESULT         __fastcall set_SasSequence(long psasSequence/*[in]*/);
  HRESULT         __fastcall get_SasSequence(long* psasSequence/*[out,retval]*/);
  long            __fastcall get_SasSequence(void);
  HRESULT         __fastcall set_EncryptionEnabled(long pencryptionEnabled/*[in]*/);
  HRESULT         __fastcall get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/);
  long            __fastcall get_EncryptionEnabled(void);
  HRESULT         __fastcall set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/);
  HRESULT         __fastcall get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/);
  long            __fastcall get_DedicatedTerminal(void);
  HRESULT         __fastcall set_RDPPort(long prdpPort/*[in]*/);
  HRESULT         __fastcall get_RDPPort(long* prdpPort/*[out,retval]*/);
  long            __fastcall get_RDPPort(void);
  HRESULT         __fastcall set_EnableMouse(long penableMouse/*[in]*/);
  HRESULT         __fastcall get_EnableMouse(long* penableMouse/*[out,retval]*/);
  long            __fastcall get_EnableMouse(void);
  HRESULT         __fastcall set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/);
  HRESULT         __fastcall get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/);
  long            __fastcall get_DisableCtrlAltDel(void);
  HRESULT         __fastcall set_EnableWindowsKey(long penableWindowsKey/*[in]*/);
  HRESULT         __fastcall get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/);
  long            __fastcall get_EnableWindowsKey(void);
  HRESULT         __fastcall set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/);
  HRESULT         __fastcall get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/);
  long            __fastcall get_DoubleClickDetect(void);
  HRESULT         __fastcall set_MaximizeShell(long pmaximizeShell/*[in]*/);
  HRESULT         __fastcall get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/);
  long            __fastcall get_MaximizeShell(void);
  HRESULT         __fastcall set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/);
  HRESULT         __fastcall get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/);
  long            __fastcall get_HotKeyFullScreen(void);
  HRESULT         __fastcall set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/);
  HRESULT         __fastcall get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/);
  long            __fastcall get_HotKeyCtrlEsc(void);
  HRESULT         __fastcall set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/);
  long            __fastcall get_HotKeyAltEsc(void);
  HRESULT         __fastcall set_HotKeyAltTab(long photKeyAltTab/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/);
  long            __fastcall get_HotKeyAltTab(void);
  HRESULT         __fastcall set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/);
  long            __fastcall get_HotKeyAltShiftTab(void);
  HRESULT         __fastcall set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/);
  long            __fastcall get_HotKeyAltSpace(void);
  HRESULT         __fastcall set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/);
  HRESULT         __fastcall get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/);
  long            __fastcall get_HotKeyCtrlAltDel(void);
  HRESULT         __fastcall set_orderDrawThreshold(long porderDrawThreshold/*[in]*/);
  HRESULT         __fastcall get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/);
  long            __fastcall get_orderDrawThreshold(void);
  HRESULT         __fastcall set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/);
  HRESULT         __fastcall get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/);
  long            __fastcall get_BitmapCacheSize(void);
  HRESULT         __fastcall set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCacheSize(void);
  HRESULT         __fastcall set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/);
  HRESULT         __fastcall get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/);
  long            __fastcall get_ScaleBitmapCachesByBPP(void);
  HRESULT         __fastcall set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/);
  HRESULT         __fastcall get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/);
  long            __fastcall get_NumBitmapCaches(void);
  HRESULT         __fastcall set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/);
  HRESULT         __fastcall get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/);
  long            __fastcall get_CachePersistenceActive(void);
  HRESULT         __fastcall set_PersistCacheDirectory(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_brushSupportLevel(long pbrushSupportLevel/*[in]*/);
  HRESULT         __fastcall get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/);
  long            __fastcall get_brushSupportLevel(void);
  HRESULT         __fastcall set_minInputSendInterval(long pminInputSendInterval/*[in]*/);
  HRESULT         __fastcall get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/);
  long            __fastcall get_minInputSendInterval(void);
  HRESULT         __fastcall set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/);
  HRESULT         __fastcall get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/);
  long            __fastcall get_InputEventsAtOnce(void);
  HRESULT         __fastcall set_maxEventCount(long pmaxEventCount/*[in]*/);
  HRESULT         __fastcall get_maxEventCount(long* pmaxEventCount/*[out,retval]*/);
  long            __fastcall get_maxEventCount(void);
  HRESULT         __fastcall set_keepAliveInterval(long pkeepAliveInterval/*[in]*/);
  HRESULT         __fastcall get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/);
  long            __fastcall get_keepAliveInterval(void);
  HRESULT         __fastcall set_shutdownTimeout(long pshutdownTimeout/*[in]*/);
  HRESULT         __fastcall get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/);
  long            __fastcall get_shutdownTimeout(void);
  HRESULT         __fastcall set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/);
  HRESULT         __fastcall get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/);
  long            __fastcall get_overallConnectionTimeout(void);
  HRESULT         __fastcall set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/);
  HRESULT         __fastcall get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/);
  long            __fastcall get_singleConnectionTimeout(void);
  HRESULT         __fastcall set_KeyboardType(long pkeyboardType/*[in]*/);
  HRESULT         __fastcall get_KeyboardType(long* pkeyboardType/*[out,retval]*/);
  long            __fastcall get_KeyboardType(void);
  HRESULT         __fastcall set_KeyboardSubType(long pkeyboardSubType/*[in]*/);
  HRESULT         __fastcall get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/);
  long            __fastcall get_KeyboardSubType(void);
  HRESULT         __fastcall set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/);
  HRESULT         __fastcall get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/);
  long            __fastcall get_KeyboardFunctionKey(void);
  HRESULT         __fastcall set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/);
  HRESULT         __fastcall get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/);
  long            __fastcall get_WinceFixedPalette(void);
  HRESULT         __fastcall set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/);
  HRESULT         __fastcall get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectToServerConsole(void);
  HRESULT         __fastcall set_BitmapPersistence(long pbitmapPersistence/*[in]*/);
  HRESULT         __fastcall get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/);
  long            __fastcall get_BitmapPersistence(void);
  HRESULT         __fastcall set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/);
  HRESULT         __fastcall get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/);
  long            __fastcall get_MinutesToIdleTimeout(void);
  HRESULT         __fastcall set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/);
  HRESULT         __fastcall get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SmartSizing(void);
  HRESULT         __fastcall set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/);
  HRESULT         __fastcall get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrLocalPrintingDocName(void);
  HRESULT         __fastcall set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/);
  HRESULT         __fastcall get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrClipCleanTempDirString(void);
  HRESULT         __fastcall set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/);
  HRESULT         __fastcall get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrClipPasteInfoString(void);
  HRESULT         __fastcall set_ClearTextPassword(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/);
  HRESULT         __fastcall get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayConnectionBar(void);
  HRESULT         __fastcall set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/);
  HRESULT         __fastcall get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PinConnectionBar(void);
  HRESULT         __fastcall set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/);
  HRESULT         __fastcall get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GrabFocusOnConnect(void);
  HRESULT         __fastcall set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/);
  HRESULT         __fastcall get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/);
  BSTR            __fastcall get_LoadBalanceInfo(void);
  HRESULT         __fastcall set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/);
  HRESULT         __fastcall get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectDrives(void);
  HRESULT         __fastcall set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/);
  HRESULT         __fastcall get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPrinters(void);
  HRESULT         __fastcall set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/);
  HRESULT         __fastcall get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPorts(void);
  HRESULT         __fastcall set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/);
  HRESULT         __fastcall get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectSmartCards(void);
  HRESULT         __fastcall set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache16BppSize(void);
  HRESULT         __fastcall set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache24BppSize(void);
  HRESULT         __fastcall set_PerformanceFlags(long pDisableList/*[in]*/);
  HRESULT         __fastcall get_PerformanceFlags(long* pDisableList/*[out,retval]*/);
  long            __fastcall get_PerformanceFlags(void);
  HRESULT         __fastcall set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/);
  HRESULT         __fastcall set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/);
  HRESULT         __fastcall get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NotifyTSPublicKey(void);
  HRESULT         __fastcall set_Compress(long pcompress/*[in]*/);
  HRESULT         __fastcall get_Compress(long* pcompress/*[out,retval]*/);
  long            __fastcall get_Compress(void);
  HRESULT         __fastcall set_BitmapPeristence(long pbitmapPeristence/*[in]*/);
  HRESULT         __fastcall get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/);
  long            __fastcall get_BitmapPeristence(void);
  HRESULT         __fastcall set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/);
  HRESULT         __fastcall get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/);
  long            __fastcall get_allowBackgroundInput(void);
  HRESULT         __fastcall set_KeyBoardLayoutStr(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_PluginDlls(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconFile(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconIndex(long Param1/*[in]*/);
  HRESULT         __fastcall set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/);
  HRESULT         __fastcall get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/);
  long            __fastcall get_ContainerHandledFullScreen(void);
  HRESULT         __fastcall set_DisableRdpdr(long pDisableRdpdr/*[in]*/);
  HRESULT         __fastcall get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/);
  long            __fastcall get_DisableRdpdr(void);

  __property   VARIANT_BOOL    ConnectionBarShowMinimizeButton = {read = get_ConnectionBarShowMinimizeButton, write = set_ConnectionBarShowMinimizeButton};
  __property   VARIANT_BOOL    ConnectionBarShowRestoreButton = {read = get_ConnectionBarShowRestoreButton, write = set_ConnectionBarShowRestoreButton};

  __property   VARIANT_BOOL    CanAutoReconnect = {read = get_CanAutoReconnect};
  __property   VARIANT_BOOL    EnableAutoReconnect = {read = get_EnableAutoReconnect, write = set_EnableAutoReconnect};
  __property   long            MaxReconnectAttempts = {read = get_MaxReconnectAttempts, write = set_MaxReconnectAttempts};

  __property   long            SmoothScroll = {read = get_SmoothScroll, write = set_SmoothScroll};
  __property   long            AcceleratorPassthrough = {read = get_AcceleratorPassthrough, write = set_AcceleratorPassthrough};
  __property   long            ShadowBitmap = {read = get_ShadowBitmap, write = set_ShadowBitmap};
  __property   long            TransportType = {read = get_TransportType, write = set_TransportType};
  __property   long            SasSequence = {read = get_SasSequence, write = set_SasSequence};
  __property   long            EncryptionEnabled = {read = get_EncryptionEnabled, write = set_EncryptionEnabled};
  __property   long            DedicatedTerminal = {read = get_DedicatedTerminal, write = set_DedicatedTerminal};
  __property   long            RDPPort = {read = get_RDPPort, write = set_RDPPort};
  __property   long            EnableMouse = {read = get_EnableMouse, write = set_EnableMouse};
  __property   long            DisableCtrlAltDel = {read = get_DisableCtrlAltDel, write = set_DisableCtrlAltDel};
  __property   long            EnableWindowsKey = {read = get_EnableWindowsKey, write = set_EnableWindowsKey};
  __property   long            DoubleClickDetect = {read = get_DoubleClickDetect, write = set_DoubleClickDetect};
  __property   long            MaximizeShell = {read = get_MaximizeShell, write = set_MaximizeShell};
  __property   long            HotKeyFullScreen = {read = get_HotKeyFullScreen, write = set_HotKeyFullScreen};
  __property   long            HotKeyCtrlEsc = {read = get_HotKeyCtrlEsc, write = set_HotKeyCtrlEsc};
  __property   long            HotKeyAltEsc = {read = get_HotKeyAltEsc, write = set_HotKeyAltEsc};
  __property   long            HotKeyAltTab = {read = get_HotKeyAltTab, write = set_HotKeyAltTab};
  __property   long            HotKeyAltShiftTab = {read = get_HotKeyAltShiftTab, write = set_HotKeyAltShiftTab};
  __property   long            HotKeyAltSpace = {read = get_HotKeyAltSpace, write = set_HotKeyAltSpace};
  __property   long            HotKeyCtrlAltDel = {read = get_HotKeyCtrlAltDel, write = set_HotKeyCtrlAltDel};
  __property   long            orderDrawThreshold = {read = get_orderDrawThreshold, write = set_orderDrawThreshold};
  __property   long            BitmapCacheSize = {read = get_BitmapCacheSize, write = set_BitmapCacheSize};
  __property   long            BitmapVirtualCacheSize = {read = get_BitmapVirtualCacheSize, write = set_BitmapVirtualCacheSize};
  __property   long            ScaleBitmapCachesByBPP = {read = get_ScaleBitmapCachesByBPP, write = set_ScaleBitmapCachesByBPP};
  __property   long            NumBitmapCaches = {read = get_NumBitmapCaches, write = set_NumBitmapCaches};
  __property   long            CachePersistenceActive = {read = get_CachePersistenceActive, write = set_CachePersistenceActive};
  __property   BSTR            PersistCacheDirectory = {write = set_PersistCacheDirectory};
  __property   long            brushSupportLevel = {read = get_brushSupportLevel, write = set_brushSupportLevel};
  __property   long            minInputSendInterval = {read = get_minInputSendInterval, write = set_minInputSendInterval};
  __property   long            InputEventsAtOnce = {read = get_InputEventsAtOnce, write = set_InputEventsAtOnce};
  __property   long            maxEventCount = {read = get_maxEventCount, write = set_maxEventCount};
  __property   long            keepAliveInterval = {read = get_keepAliveInterval, write = set_keepAliveInterval};
  __property   long            shutdownTimeout = {read = get_shutdownTimeout, write = set_shutdownTimeout};
  __property   long            overallConnectionTimeout = {read = get_overallConnectionTimeout, write = set_overallConnectionTimeout};
  __property   long            singleConnectionTimeout = {read = get_singleConnectionTimeout, write = set_singleConnectionTimeout};
  __property   long            KeyboardType = {read = get_KeyboardType, write = set_KeyboardType};
  __property   long            KeyboardSubType = {read = get_KeyboardSubType, write = set_KeyboardSubType};
  __property   long            KeyboardFunctionKey = {read = get_KeyboardFunctionKey, write = set_KeyboardFunctionKey};
  __property   long            WinceFixedPalette = {read = get_WinceFixedPalette, write = set_WinceFixedPalette};
  __property   VARIANT_BOOL    ConnectToServerConsole = {read = get_ConnectToServerConsole, write = set_ConnectToServerConsole};
  __property   long            BitmapPersistence = {read = get_BitmapPersistence, write = set_BitmapPersistence};
  __property   long            MinutesToIdleTimeout = {read = get_MinutesToIdleTimeout, write = set_MinutesToIdleTimeout};
  __property   VARIANT_BOOL    SmartSizing = {read = get_SmartSizing, write = set_SmartSizing};
  __property   BSTR            RdpdrLocalPrintingDocName = {read = get_RdpdrLocalPrintingDocName, write = set_RdpdrLocalPrintingDocName};
  __property   BSTR            RdpdrClipCleanTempDirString = {read = get_RdpdrClipCleanTempDirString, write = set_RdpdrClipCleanTempDirString};
  __property   BSTR            RdpdrClipPasteInfoString = {read = get_RdpdrClipPasteInfoString, write = set_RdpdrClipPasteInfoString};
  __property   BSTR            ClearTextPassword = {write = set_ClearTextPassword};
  __property   VARIANT_BOOL    DisplayConnectionBar = {read = get_DisplayConnectionBar, write = set_DisplayConnectionBar};
  __property   VARIANT_BOOL    PinConnectionBar = {read = get_PinConnectionBar, write = set_PinConnectionBar};
  __property   VARIANT_BOOL    GrabFocusOnConnect = {read = get_GrabFocusOnConnect, write = set_GrabFocusOnConnect};
  __property   BSTR            LoadBalanceInfo = {read = get_LoadBalanceInfo, write = set_LoadBalanceInfo};
  __property   VARIANT_BOOL    RedirectDrives = {read = get_RedirectDrives, write = set_RedirectDrives};
  __property   VARIANT_BOOL    RedirectPrinters = {read = get_RedirectPrinters, write = set_RedirectPrinters};
  __property   VARIANT_BOOL    RedirectPorts = {read = get_RedirectPorts, write = set_RedirectPorts};
  __property   VARIANT_BOOL    RedirectSmartCards = {read = get_RedirectSmartCards, write = set_RedirectSmartCards};
  __property   long            BitmapVirtualCache16BppSize = {read = get_BitmapVirtualCache16BppSize, write = set_BitmapVirtualCache16BppSize};
  __property   long            BitmapVirtualCache24BppSize = {read = get_BitmapVirtualCache24BppSize, write = set_BitmapVirtualCache24BppSize};
  __property   long            PerformanceFlags = {read = get_PerformanceFlags, write = set_PerformanceFlags};
  __property   VARIANT_BOOL    NotifyTSPublicKey = {read = get_NotifyTSPublicKey, write = set_NotifyTSPublicKey};

  __property   long            Compress = {read = get_Compress, write = set_Compress};
  __property   long            BitmapPeristence = {read = get_BitmapPeristence, write = set_BitmapPeristence};
  __property   long            allowBackgroundInput = {read = get_allowBackgroundInput, write = set_allowBackgroundInput};
  __property   BSTR            KeyBoardLayoutStr = {write = set_KeyBoardLayoutStr};
  __property   BSTR            PluginDlls = {write = set_PluginDlls};
  __property   BSTR            IconFile = {write = set_IconFile};
  __property   long            IconIndex = {write = set_IconIndex};
  __property   long            ContainerHandledFullScreen = {read = get_ContainerHandledFullScreen, write = set_ContainerHandledFullScreen};
  __property   long            DisableRdpdr = {read = get_DisableRdpdr, write = set_DisableRdpdr};
};
typedef IMsRdpClientAdvancedSettings3DispT<IMsRdpClientAdvancedSettings3> IMsRdpClientAdvancedSettings3Disp;

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient4
// Interface: IMsRdpClient4
// *********************************************************************//
template <class T /* IMsRdpClient4 */ >
class TCOMIMsRdpClient4T : public TComInterface<IMsRdpClient4>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMsRdpClient4T() {}
  TCOMIMsRdpClient4T(IMsRdpClient4 *intf, bool addRef = false) : TComInterface<IMsRdpClient4>(intf, addRef) {}
  TCOMIMsRdpClient4T(const TCOMIMsRdpClient4T& src) : TComInterface<IMsRdpClient4>(src) {}
  TCOMIMsRdpClient4T& operator=(const TCOMIMsRdpClient4T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall get_AdvancedSettings5(void);

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr AdvancedSettings5 = {read = get_AdvancedSettings5};
};
typedef TCOMIMsRdpClient4T<IMsRdpClient4> TCOMIMsRdpClient4;

// *********************************************************************//
// DispIntf:  IMsRdpClient4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {095E0738-D97D-488B-B9F6-DD0E8D66C0DE}
// *********************************************************************//
template<class T>
class IMsRdpClient4DispT : public TAutoDriver<IMsRdpClient4>
{
public:
  IMsRdpClient4DispT(){}

  IMsRdpClient4DispT(IMsRdpClient4 *pintf)
  {
    TAutoDriver<IMsRdpClient4>::Bind(pintf, false);
  }

  IMsRdpClient4DispT(IMsRdpClient4Ptr pintf)
  {
    TAutoDriver<IMsRdpClient4>::Bind(pintf, true);
  }

  IMsRdpClient4DispT& operator=(IMsRdpClient4 *pintf)
  {
    TAutoDriver<IMsRdpClient4>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClient4DispT& operator=(IMsRdpClient4Ptr pintf)
  {
    TAutoDriver<IMsRdpClient4>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MsRdpClient4NotSafeForScripting));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MsRdpClient4NotSafeForScripting);
  }

  HRESULT         __fastcall get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall get_AdvancedSettings5(void);
  HRESULT         __fastcall get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall get_AdvancedSettings4(void);
  HRESULT         __fastcall get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall get_AdvancedSettings3(void);
  HRESULT         __fastcall set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/);
  HRESULT         __fastcall get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectedStatusText(void);
  HRESULT         __fastcall set_ColorDepth(long pcolorDepth/*[in]*/);
  HRESULT         __fastcall get_ColorDepth(long* pcolorDepth/*[out,retval]*/);
  long            __fastcall get_ColorDepth(void);
  HRESULT         __fastcall get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall get_AdvancedSettings2(void);
  HRESULT         __fastcall get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall get_SecuredSettings2(void);
  HRESULT         __fastcall get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/);
  Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall get_ExtendedDisconnectReason(void);
  HRESULT         __fastcall set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/);
  HRESULT         __fastcall get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullScreen(void);
  HRESULT         __fastcall SetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long chanOptions/*[in]*/);
  HRESULT         __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long* pChanOptions/*[out,retval]*/);
  long            __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/);
  HRESULT         __fastcall RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/);
  Mstsclib_tlb::ControlCloseStatus __fastcall RequestClose(void);
  HRESULT         __fastcall set_Server(BSTR pServer/*[in]*/);
  HRESULT         __fastcall get_Server(BSTR* pServer/*[out,retval]*/);
  BSTR            __fastcall get_Server(void);
  HRESULT         __fastcall set_Domain(BSTR pDomain/*[in]*/);
  HRESULT         __fastcall get_Domain(BSTR* pDomain/*[out,retval]*/);
  BSTR            __fastcall get_Domain(void);
  HRESULT         __fastcall set_UserName(BSTR pUserName/*[in]*/);
  HRESULT         __fastcall get_UserName(BSTR* pUserName/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall set_DisconnectedText(BSTR pDisconnectedText/*[in]*/);
  HRESULT         __fastcall get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/);
  BSTR            __fastcall get_DisconnectedText(void);
  HRESULT         __fastcall set_ConnectingText(BSTR pConnectingText/*[in]*/);
  HRESULT         __fastcall get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectingText(void);
  HRESULT         __fastcall get_Connected(short* pIsConnected/*[out,retval]*/);
  short           __fastcall get_Connected(void);
  HRESULT         __fastcall set_DesktopWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopWidth(void);
  HRESULT         __fastcall set_DesktopHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopHeight(void);
  HRESULT         __fastcall set_StartConnected(long pfStartConnected/*[in]*/);
  HRESULT         __fastcall get_StartConnected(long* pfStartConnected/*[out,retval]*/);
  long            __fastcall get_StartConnected(void);
  HRESULT         __fastcall get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/);
  long            __fastcall get_HorizontalScrollBarVisible(void);
  HRESULT         __fastcall get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/);
  long            __fastcall get_VerticalScrollBarVisible(void);
  HRESULT         __fastcall set_FullScreenTitle(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_CipherStrength(long* pCipherStrength/*[out,retval]*/);
  long            __fastcall get_CipherStrength(void);
  HRESULT         __fastcall get_Version(BSTR* pVersion/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/);
  long            __fastcall get_SecuredSettingsEnabled(void);
  HRESULT         __fastcall get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall get_SecuredSettings(void);
  HRESULT         __fastcall get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall get_AdvancedSettings(void);
  HRESULT         __fastcall get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/);
  Mstsclib_tlb::IMsTscDebugPtr __fastcall get_Debugger(void);
  HRESULT         __fastcall Connect();
  HRESULT         __fastcall Disconnect();
  HRESULT         __fastcall CreateVirtualChannels(BSTR newVal/*[in]*/);
  HRESULT         __fastcall SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/);

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr AdvancedSettings5 = {read = get_AdvancedSettings5};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr AdvancedSettings4 = {read = get_AdvancedSettings4};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr AdvancedSettings3 = {read = get_AdvancedSettings3};
  __property   BSTR            ConnectedStatusText = {read = get_ConnectedStatusText, write = set_ConnectedStatusText};

  __property   long            ColorDepth = {read = get_ColorDepth, write = set_ColorDepth};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr AdvancedSettings2 = {read = get_AdvancedSettings2};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr SecuredSettings2 = {read = get_SecuredSettings2};
  __property   Mstsclib_tlb::ExtendedDisconnectReasonCode ExtendedDisconnectReason = {read = get_ExtendedDisconnectReason};
  __property   VARIANT_BOOL    FullScreen = {read = get_FullScreen, write = set_FullScreen};

  __property   BSTR            Server = {read = get_Server, write = set_Server};
  __property   BSTR            Domain = {read = get_Domain, write = set_Domain};
  __property   BSTR            UserName = {read = get_UserName, write = set_UserName};
  __property   BSTR            DisconnectedText = {read = get_DisconnectedText, write = set_DisconnectedText};
  __property   BSTR            ConnectingText = {read = get_ConnectingText, write = set_ConnectingText};
  __property   short           Connected = {read = get_Connected};
  __property   long            DesktopWidth = {read = get_DesktopWidth, write = set_DesktopWidth};
  __property   long            DesktopHeight = {read = get_DesktopHeight, write = set_DesktopHeight};
  __property   long            StartConnected = {read = get_StartConnected, write = set_StartConnected};
  __property   long            HorizontalScrollBarVisible = {read = get_HorizontalScrollBarVisible};
  __property   long            VerticalScrollBarVisible = {read = get_VerticalScrollBarVisible};
  __property   BSTR            FullScreenTitle = {write = set_FullScreenTitle};
  __property   long            CipherStrength = {read = get_CipherStrength};
  __property   BSTR            Version = {read = get_Version};
  __property   long            SecuredSettingsEnabled = {read = get_SecuredSettingsEnabled};
  __property   Mstsclib_tlb::IMsTscSecuredSettingsPtr SecuredSettings = {read = get_SecuredSettings};
  __property   Mstsclib_tlb::IMsTscAdvancedSettingsPtr AdvancedSettings = {read = get_AdvancedSettings};
  __property   Mstsclib_tlb::IMsTscDebugPtr Debugger = {read = get_Debugger};

};
typedef IMsRdpClient4DispT<IMsRdpClient4> IMsRdpClient4Disp;

typedef TComInterface<IMsRdpClientNonScriptable2>  TCOMIMsRdpClientNonScriptable2;

typedef TComInterface<IMsRdpClientAdvancedSettings4>  TCOMIMsRdpClientAdvancedSettings4;

// *********************************************************************//
// DispIntf:  IMsRdpClientAdvancedSettings4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FBA7F64E-7345-4405-AE50-FA4A763DC0DE}
// *********************************************************************//
template<class T>
class IMsRdpClientAdvancedSettings4DispT : public TAutoDriver<IMsRdpClientAdvancedSettings4>
{
public:
  IMsRdpClientAdvancedSettings4DispT(){}

  IMsRdpClientAdvancedSettings4DispT(IMsRdpClientAdvancedSettings4 *pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings4>::Bind(pintf, false);
  }

  IMsRdpClientAdvancedSettings4DispT(IMsRdpClientAdvancedSettings4Ptr pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings4>::Bind(pintf, true);
  }

  IMsRdpClientAdvancedSettings4DispT& operator=(IMsRdpClientAdvancedSettings4 *pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings4>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClientAdvancedSettings4DispT& operator=(IMsRdpClientAdvancedSettings4Ptr pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings4>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_AuthenticationLevel(unsigned puiAuthLevel/*[in]*/);
  HRESULT         __fastcall get_AuthenticationLevel(unsigned* puiAuthLevel/*[out,retval]*/);
  unsigned        __fastcall get_AuthenticationLevel(void);
  HRESULT         __fastcall set_ConnectionBarShowMinimizeButton(VARIANT_BOOL pfShowMinimize/*[in]*/);
  HRESULT         __fastcall get_ConnectionBarShowMinimizeButton(VARIANT_BOOL* pfShowMinimize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectionBarShowMinimizeButton(void);
  HRESULT         __fastcall set_ConnectionBarShowRestoreButton(VARIANT_BOOL pfShowRestore/*[in]*/);
  HRESULT         __fastcall get_ConnectionBarShowRestoreButton(VARIANT_BOOL* pfShowRestore/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectionBarShowRestoreButton(void);
  HRESULT         __fastcall get_CanAutoReconnect(VARIANT_BOOL* pfCanAutoReconnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanAutoReconnect(void);
  HRESULT         __fastcall set_EnableAutoReconnect(VARIANT_BOOL pfEnableAutoReconnect/*[in]*/);
  HRESULT         __fastcall get_EnableAutoReconnect(VARIANT_BOOL* pfEnableAutoReconnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableAutoReconnect(void);
  HRESULT         __fastcall set_MaxReconnectAttempts(long pMaxReconnectAttempts/*[in]*/);
  HRESULT         __fastcall get_MaxReconnectAttempts(long* pMaxReconnectAttempts/*[out,retval]*/);
  long            __fastcall get_MaxReconnectAttempts(void);
  HRESULT         __fastcall set_SmoothScroll(long psmoothScroll/*[in]*/);
  HRESULT         __fastcall get_SmoothScroll(long* psmoothScroll/*[out,retval]*/);
  long            __fastcall get_SmoothScroll(void);
  HRESULT         __fastcall set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/);
  HRESULT         __fastcall get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/);
  long            __fastcall get_AcceleratorPassthrough(void);
  HRESULT         __fastcall set_ShadowBitmap(long pshadowBitmap/*[in]*/);
  HRESULT         __fastcall get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/);
  long            __fastcall get_ShadowBitmap(void);
  HRESULT         __fastcall set_TransportType(long ptransportType/*[in]*/);
  HRESULT         __fastcall get_TransportType(long* ptransportType/*[out,retval]*/);
  long            __fastcall get_TransportType(void);
  HRESULT         __fastcall set_SasSequence(long psasSequence/*[in]*/);
  HRESULT         __fastcall get_SasSequence(long* psasSequence/*[out,retval]*/);
  long            __fastcall get_SasSequence(void);
  HRESULT         __fastcall set_EncryptionEnabled(long pencryptionEnabled/*[in]*/);
  HRESULT         __fastcall get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/);
  long            __fastcall get_EncryptionEnabled(void);
  HRESULT         __fastcall set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/);
  HRESULT         __fastcall get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/);
  long            __fastcall get_DedicatedTerminal(void);
  HRESULT         __fastcall set_RDPPort(long prdpPort/*[in]*/);
  HRESULT         __fastcall get_RDPPort(long* prdpPort/*[out,retval]*/);
  long            __fastcall get_RDPPort(void);
  HRESULT         __fastcall set_EnableMouse(long penableMouse/*[in]*/);
  HRESULT         __fastcall get_EnableMouse(long* penableMouse/*[out,retval]*/);
  long            __fastcall get_EnableMouse(void);
  HRESULT         __fastcall set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/);
  HRESULT         __fastcall get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/);
  long            __fastcall get_DisableCtrlAltDel(void);
  HRESULT         __fastcall set_EnableWindowsKey(long penableWindowsKey/*[in]*/);
  HRESULT         __fastcall get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/);
  long            __fastcall get_EnableWindowsKey(void);
  HRESULT         __fastcall set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/);
  HRESULT         __fastcall get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/);
  long            __fastcall get_DoubleClickDetect(void);
  HRESULT         __fastcall set_MaximizeShell(long pmaximizeShell/*[in]*/);
  HRESULT         __fastcall get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/);
  long            __fastcall get_MaximizeShell(void);
  HRESULT         __fastcall set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/);
  HRESULT         __fastcall get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/);
  long            __fastcall get_HotKeyFullScreen(void);
  HRESULT         __fastcall set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/);
  HRESULT         __fastcall get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/);
  long            __fastcall get_HotKeyCtrlEsc(void);
  HRESULT         __fastcall set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/);
  long            __fastcall get_HotKeyAltEsc(void);
  HRESULT         __fastcall set_HotKeyAltTab(long photKeyAltTab/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/);
  long            __fastcall get_HotKeyAltTab(void);
  HRESULT         __fastcall set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/);
  long            __fastcall get_HotKeyAltShiftTab(void);
  HRESULT         __fastcall set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/);
  long            __fastcall get_HotKeyAltSpace(void);
  HRESULT         __fastcall set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/);
  HRESULT         __fastcall get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/);
  long            __fastcall get_HotKeyCtrlAltDel(void);
  HRESULT         __fastcall set_orderDrawThreshold(long porderDrawThreshold/*[in]*/);
  HRESULT         __fastcall get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/);
  long            __fastcall get_orderDrawThreshold(void);
  HRESULT         __fastcall set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/);
  HRESULT         __fastcall get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/);
  long            __fastcall get_BitmapCacheSize(void);
  HRESULT         __fastcall set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCacheSize(void);
  HRESULT         __fastcall set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/);
  HRESULT         __fastcall get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/);
  long            __fastcall get_ScaleBitmapCachesByBPP(void);
  HRESULT         __fastcall set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/);
  HRESULT         __fastcall get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/);
  long            __fastcall get_NumBitmapCaches(void);
  HRESULT         __fastcall set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/);
  HRESULT         __fastcall get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/);
  long            __fastcall get_CachePersistenceActive(void);
  HRESULT         __fastcall set_PersistCacheDirectory(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_brushSupportLevel(long pbrushSupportLevel/*[in]*/);
  HRESULT         __fastcall get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/);
  long            __fastcall get_brushSupportLevel(void);
  HRESULT         __fastcall set_minInputSendInterval(long pminInputSendInterval/*[in]*/);
  HRESULT         __fastcall get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/);
  long            __fastcall get_minInputSendInterval(void);
  HRESULT         __fastcall set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/);
  HRESULT         __fastcall get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/);
  long            __fastcall get_InputEventsAtOnce(void);
  HRESULT         __fastcall set_maxEventCount(long pmaxEventCount/*[in]*/);
  HRESULT         __fastcall get_maxEventCount(long* pmaxEventCount/*[out,retval]*/);
  long            __fastcall get_maxEventCount(void);
  HRESULT         __fastcall set_keepAliveInterval(long pkeepAliveInterval/*[in]*/);
  HRESULT         __fastcall get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/);
  long            __fastcall get_keepAliveInterval(void);
  HRESULT         __fastcall set_shutdownTimeout(long pshutdownTimeout/*[in]*/);
  HRESULT         __fastcall get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/);
  long            __fastcall get_shutdownTimeout(void);
  HRESULT         __fastcall set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/);
  HRESULT         __fastcall get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/);
  long            __fastcall get_overallConnectionTimeout(void);
  HRESULT         __fastcall set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/);
  HRESULT         __fastcall get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/);
  long            __fastcall get_singleConnectionTimeout(void);
  HRESULT         __fastcall set_KeyboardType(long pkeyboardType/*[in]*/);
  HRESULT         __fastcall get_KeyboardType(long* pkeyboardType/*[out,retval]*/);
  long            __fastcall get_KeyboardType(void);
  HRESULT         __fastcall set_KeyboardSubType(long pkeyboardSubType/*[in]*/);
  HRESULT         __fastcall get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/);
  long            __fastcall get_KeyboardSubType(void);
  HRESULT         __fastcall set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/);
  HRESULT         __fastcall get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/);
  long            __fastcall get_KeyboardFunctionKey(void);
  HRESULT         __fastcall set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/);
  HRESULT         __fastcall get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/);
  long            __fastcall get_WinceFixedPalette(void);
  HRESULT         __fastcall set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/);
  HRESULT         __fastcall get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectToServerConsole(void);
  HRESULT         __fastcall set_BitmapPersistence(long pbitmapPersistence/*[in]*/);
  HRESULT         __fastcall get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/);
  long            __fastcall get_BitmapPersistence(void);
  HRESULT         __fastcall set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/);
  HRESULT         __fastcall get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/);
  long            __fastcall get_MinutesToIdleTimeout(void);
  HRESULT         __fastcall set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/);
  HRESULT         __fastcall get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SmartSizing(void);
  HRESULT         __fastcall set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/);
  HRESULT         __fastcall get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrLocalPrintingDocName(void);
  HRESULT         __fastcall set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/);
  HRESULT         __fastcall get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrClipCleanTempDirString(void);
  HRESULT         __fastcall set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/);
  HRESULT         __fastcall get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrClipPasteInfoString(void);
  HRESULT         __fastcall set_ClearTextPassword(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/);
  HRESULT         __fastcall get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayConnectionBar(void);
  HRESULT         __fastcall set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/);
  HRESULT         __fastcall get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PinConnectionBar(void);
  HRESULT         __fastcall set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/);
  HRESULT         __fastcall get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GrabFocusOnConnect(void);
  HRESULT         __fastcall set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/);
  HRESULT         __fastcall get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/);
  BSTR            __fastcall get_LoadBalanceInfo(void);
  HRESULT         __fastcall set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/);
  HRESULT         __fastcall get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectDrives(void);
  HRESULT         __fastcall set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/);
  HRESULT         __fastcall get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPrinters(void);
  HRESULT         __fastcall set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/);
  HRESULT         __fastcall get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPorts(void);
  HRESULT         __fastcall set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/);
  HRESULT         __fastcall get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectSmartCards(void);
  HRESULT         __fastcall set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache16BppSize(void);
  HRESULT         __fastcall set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache24BppSize(void);
  HRESULT         __fastcall set_PerformanceFlags(long pDisableList/*[in]*/);
  HRESULT         __fastcall get_PerformanceFlags(long* pDisableList/*[out,retval]*/);
  long            __fastcall get_PerformanceFlags(void);
  HRESULT         __fastcall set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/);
  HRESULT         __fastcall set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/);
  HRESULT         __fastcall get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NotifyTSPublicKey(void);
  HRESULT         __fastcall set_Compress(long pcompress/*[in]*/);
  HRESULT         __fastcall get_Compress(long* pcompress/*[out,retval]*/);
  long            __fastcall get_Compress(void);
  HRESULT         __fastcall set_BitmapPeristence(long pbitmapPeristence/*[in]*/);
  HRESULT         __fastcall get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/);
  long            __fastcall get_BitmapPeristence(void);
  HRESULT         __fastcall set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/);
  HRESULT         __fastcall get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/);
  long            __fastcall get_allowBackgroundInput(void);
  HRESULT         __fastcall set_KeyBoardLayoutStr(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_PluginDlls(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconFile(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconIndex(long Param1/*[in]*/);
  HRESULT         __fastcall set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/);
  HRESULT         __fastcall get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/);
  long            __fastcall get_ContainerHandledFullScreen(void);
  HRESULT         __fastcall set_DisableRdpdr(long pDisableRdpdr/*[in]*/);
  HRESULT         __fastcall get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/);
  long            __fastcall get_DisableRdpdr(void);

  __property   unsigned        AuthenticationLevel = {read = get_AuthenticationLevel, write = set_AuthenticationLevel};

  __property   VARIANT_BOOL    ConnectionBarShowMinimizeButton = {read = get_ConnectionBarShowMinimizeButton, write = set_ConnectionBarShowMinimizeButton};
  __property   VARIANT_BOOL    ConnectionBarShowRestoreButton = {read = get_ConnectionBarShowRestoreButton, write = set_ConnectionBarShowRestoreButton};

  __property   VARIANT_BOOL    CanAutoReconnect = {read = get_CanAutoReconnect};
  __property   VARIANT_BOOL    EnableAutoReconnect = {read = get_EnableAutoReconnect, write = set_EnableAutoReconnect};
  __property   long            MaxReconnectAttempts = {read = get_MaxReconnectAttempts, write = set_MaxReconnectAttempts};

  __property   long            SmoothScroll = {read = get_SmoothScroll, write = set_SmoothScroll};
  __property   long            AcceleratorPassthrough = {read = get_AcceleratorPassthrough, write = set_AcceleratorPassthrough};
  __property   long            ShadowBitmap = {read = get_ShadowBitmap, write = set_ShadowBitmap};
  __property   long            TransportType = {read = get_TransportType, write = set_TransportType};
  __property   long            SasSequence = {read = get_SasSequence, write = set_SasSequence};
  __property   long            EncryptionEnabled = {read = get_EncryptionEnabled, write = set_EncryptionEnabled};
  __property   long            DedicatedTerminal = {read = get_DedicatedTerminal, write = set_DedicatedTerminal};
  __property   long            RDPPort = {read = get_RDPPort, write = set_RDPPort};
  __property   long            EnableMouse = {read = get_EnableMouse, write = set_EnableMouse};
  __property   long            DisableCtrlAltDel = {read = get_DisableCtrlAltDel, write = set_DisableCtrlAltDel};
  __property   long            EnableWindowsKey = {read = get_EnableWindowsKey, write = set_EnableWindowsKey};
  __property   long            DoubleClickDetect = {read = get_DoubleClickDetect, write = set_DoubleClickDetect};
  __property   long            MaximizeShell = {read = get_MaximizeShell, write = set_MaximizeShell};
  __property   long            HotKeyFullScreen = {read = get_HotKeyFullScreen, write = set_HotKeyFullScreen};
  __property   long            HotKeyCtrlEsc = {read = get_HotKeyCtrlEsc, write = set_HotKeyCtrlEsc};
  __property   long            HotKeyAltEsc = {read = get_HotKeyAltEsc, write = set_HotKeyAltEsc};
  __property   long            HotKeyAltTab = {read = get_HotKeyAltTab, write = set_HotKeyAltTab};
  __property   long            HotKeyAltShiftTab = {read = get_HotKeyAltShiftTab, write = set_HotKeyAltShiftTab};
  __property   long            HotKeyAltSpace = {read = get_HotKeyAltSpace, write = set_HotKeyAltSpace};
  __property   long            HotKeyCtrlAltDel = {read = get_HotKeyCtrlAltDel, write = set_HotKeyCtrlAltDel};
  __property   long            orderDrawThreshold = {read = get_orderDrawThreshold, write = set_orderDrawThreshold};
  __property   long            BitmapCacheSize = {read = get_BitmapCacheSize, write = set_BitmapCacheSize};
  __property   long            BitmapVirtualCacheSize = {read = get_BitmapVirtualCacheSize, write = set_BitmapVirtualCacheSize};
  __property   long            ScaleBitmapCachesByBPP = {read = get_ScaleBitmapCachesByBPP, write = set_ScaleBitmapCachesByBPP};
  __property   long            NumBitmapCaches = {read = get_NumBitmapCaches, write = set_NumBitmapCaches};
  __property   long            CachePersistenceActive = {read = get_CachePersistenceActive, write = set_CachePersistenceActive};
  __property   BSTR            PersistCacheDirectory = {write = set_PersistCacheDirectory};
  __property   long            brushSupportLevel = {read = get_brushSupportLevel, write = set_brushSupportLevel};
  __property   long            minInputSendInterval = {read = get_minInputSendInterval, write = set_minInputSendInterval};
  __property   long            InputEventsAtOnce = {read = get_InputEventsAtOnce, write = set_InputEventsAtOnce};
  __property   long            maxEventCount = {read = get_maxEventCount, write = set_maxEventCount};
  __property   long            keepAliveInterval = {read = get_keepAliveInterval, write = set_keepAliveInterval};
  __property   long            shutdownTimeout = {read = get_shutdownTimeout, write = set_shutdownTimeout};
  __property   long            overallConnectionTimeout = {read = get_overallConnectionTimeout, write = set_overallConnectionTimeout};
  __property   long            singleConnectionTimeout = {read = get_singleConnectionTimeout, write = set_singleConnectionTimeout};
  __property   long            KeyboardType = {read = get_KeyboardType, write = set_KeyboardType};
  __property   long            KeyboardSubType = {read = get_KeyboardSubType, write = set_KeyboardSubType};
  __property   long            KeyboardFunctionKey = {read = get_KeyboardFunctionKey, write = set_KeyboardFunctionKey};
  __property   long            WinceFixedPalette = {read = get_WinceFixedPalette, write = set_WinceFixedPalette};
  __property   VARIANT_BOOL    ConnectToServerConsole = {read = get_ConnectToServerConsole, write = set_ConnectToServerConsole};
  __property   long            BitmapPersistence = {read = get_BitmapPersistence, write = set_BitmapPersistence};
  __property   long            MinutesToIdleTimeout = {read = get_MinutesToIdleTimeout, write = set_MinutesToIdleTimeout};
  __property   VARIANT_BOOL    SmartSizing = {read = get_SmartSizing, write = set_SmartSizing};
  __property   BSTR            RdpdrLocalPrintingDocName = {read = get_RdpdrLocalPrintingDocName, write = set_RdpdrLocalPrintingDocName};
  __property   BSTR            RdpdrClipCleanTempDirString = {read = get_RdpdrClipCleanTempDirString, write = set_RdpdrClipCleanTempDirString};
  __property   BSTR            RdpdrClipPasteInfoString = {read = get_RdpdrClipPasteInfoString, write = set_RdpdrClipPasteInfoString};
  __property   BSTR            ClearTextPassword = {write = set_ClearTextPassword};
  __property   VARIANT_BOOL    DisplayConnectionBar = {read = get_DisplayConnectionBar, write = set_DisplayConnectionBar};
  __property   VARIANT_BOOL    PinConnectionBar = {read = get_PinConnectionBar, write = set_PinConnectionBar};
  __property   VARIANT_BOOL    GrabFocusOnConnect = {read = get_GrabFocusOnConnect, write = set_GrabFocusOnConnect};
  __property   BSTR            LoadBalanceInfo = {read = get_LoadBalanceInfo, write = set_LoadBalanceInfo};
  __property   VARIANT_BOOL    RedirectDrives = {read = get_RedirectDrives, write = set_RedirectDrives};
  __property   VARIANT_BOOL    RedirectPrinters = {read = get_RedirectPrinters, write = set_RedirectPrinters};
  __property   VARIANT_BOOL    RedirectPorts = {read = get_RedirectPorts, write = set_RedirectPorts};
  __property   VARIANT_BOOL    RedirectSmartCards = {read = get_RedirectSmartCards, write = set_RedirectSmartCards};
  __property   long            BitmapVirtualCache16BppSize = {read = get_BitmapVirtualCache16BppSize, write = set_BitmapVirtualCache16BppSize};
  __property   long            BitmapVirtualCache24BppSize = {read = get_BitmapVirtualCache24BppSize, write = set_BitmapVirtualCache24BppSize};
  __property   long            PerformanceFlags = {read = get_PerformanceFlags, write = set_PerformanceFlags};
  __property   VARIANT_BOOL    NotifyTSPublicKey = {read = get_NotifyTSPublicKey, write = set_NotifyTSPublicKey};

  __property   long            Compress = {read = get_Compress, write = set_Compress};
  __property   long            BitmapPeristence = {read = get_BitmapPeristence, write = set_BitmapPeristence};
  __property   long            allowBackgroundInput = {read = get_allowBackgroundInput, write = set_allowBackgroundInput};
  __property   BSTR            KeyBoardLayoutStr = {write = set_KeyBoardLayoutStr};
  __property   BSTR            PluginDlls = {write = set_PluginDlls};
  __property   BSTR            IconFile = {write = set_IconFile};
  __property   long            IconIndex = {write = set_IconIndex};
  __property   long            ContainerHandledFullScreen = {read = get_ContainerHandledFullScreen, write = set_ContainerHandledFullScreen};
  __property   long            DisableRdpdr = {read = get_DisableRdpdr, write = set_DisableRdpdr};
};
typedef IMsRdpClientAdvancedSettings4DispT<IMsRdpClientAdvancedSettings4> IMsRdpClientAdvancedSettings4Disp;

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient5
// Interface: IMsRdpClient5
// *********************************************************************//
template <class T /* IMsRdpClient5 */ >
class TCOMIMsRdpClient5T : public TComInterface<IMsRdpClient5>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMsRdpClient5T() {}
  TCOMIMsRdpClient5T(IMsRdpClient5 *intf, bool addRef = false) : TComInterface<IMsRdpClient5>(intf, addRef) {}
  TCOMIMsRdpClient5T(const TCOMIMsRdpClient5T& src) : TComInterface<IMsRdpClient5>(src) {}
  TCOMIMsRdpClient5T& operator=(const TCOMIMsRdpClient5T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_TransportSettings(Mstsclib_tlb::IMsRdpClientTransportSettings** ppXportSet/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettingsPtr __fastcall get_TransportSettings(void);
  HRESULT         __fastcall get_AdvancedSettings6(Mstsclib_tlb::IMsRdpClientAdvancedSettings5** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr __fastcall get_AdvancedSettings6(void);
  HRESULT         __fastcall GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                                 unsigned ExtendedDisconnectReason/*[in]*/, 
                                                 BSTR* pBstrErrorMsg/*[out,retval]*/);
  BSTR            __fastcall GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                                 unsigned ExtendedDisconnectReason/*[in]*/);
  HRESULT         __fastcall get_RemoteProgram(Mstsclib_tlb::ITSRemoteProgram** ppRemoteProgram/*[out,retval]*/);
  Mstsclib_tlb::ITSRemoteProgramPtr __fastcall get_RemoteProgram(void);
  HRESULT         __fastcall get_MsRdpClientShell(Mstsclib_tlb::IMsRdpClientShell** ppLauncher/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientShellPtr __fastcall get_MsRdpClientShell(void);

  __property   Mstsclib_tlb::IMsRdpClientTransportSettingsPtr TransportSettings = {read = get_TransportSettings};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr AdvancedSettings6 = {read = get_AdvancedSettings6};
  __property   Mstsclib_tlb::ITSRemoteProgramPtr RemoteProgram = {read = get_RemoteProgram};
  __property   Mstsclib_tlb::IMsRdpClientShellPtr MsRdpClientShell = {read = get_MsRdpClientShell};
};
typedef TCOMIMsRdpClient5T<IMsRdpClient5> TCOMIMsRdpClient5;

// *********************************************************************//
// DispIntf:  IMsRdpClient5
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4EB5335B-6429-477D-B922-E06A28ECD8BF}
// *********************************************************************//
template<class T>
class IMsRdpClient5DispT : public TAutoDriver<IMsRdpClient5>
{
public:
  IMsRdpClient5DispT(){}

  IMsRdpClient5DispT(IMsRdpClient5 *pintf)
  {
    TAutoDriver<IMsRdpClient5>::Bind(pintf, false);
  }

  IMsRdpClient5DispT(IMsRdpClient5Ptr pintf)
  {
    TAutoDriver<IMsRdpClient5>::Bind(pintf, true);
  }

  IMsRdpClient5DispT& operator=(IMsRdpClient5 *pintf)
  {
    TAutoDriver<IMsRdpClient5>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClient5DispT& operator=(IMsRdpClient5Ptr pintf)
  {
    TAutoDriver<IMsRdpClient5>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MsRdpClient5NotSafeForScripting));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MsRdpClient5NotSafeForScripting);
  }

  HRESULT         __fastcall get_TransportSettings(Mstsclib_tlb::IMsRdpClientTransportSettings** ppXportSet/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettingsPtr __fastcall get_TransportSettings(void);
  HRESULT         __fastcall get_AdvancedSettings6(Mstsclib_tlb::IMsRdpClientAdvancedSettings5** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr __fastcall get_AdvancedSettings6(void);
  HRESULT         __fastcall GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                                 unsigned ExtendedDisconnectReason/*[in]*/, 
                                                 BSTR* pBstrErrorMsg/*[out,retval]*/);
  BSTR            __fastcall GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                                 unsigned ExtendedDisconnectReason/*[in]*/);
  HRESULT         __fastcall get_RemoteProgram(Mstsclib_tlb::ITSRemoteProgram** ppRemoteProgram/*[out,retval]*/);
  Mstsclib_tlb::ITSRemoteProgramPtr __fastcall get_RemoteProgram(void);
  HRESULT         __fastcall get_MsRdpClientShell(Mstsclib_tlb::IMsRdpClientShell** ppLauncher/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientShellPtr __fastcall get_MsRdpClientShell(void);
  HRESULT         __fastcall get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall get_AdvancedSettings5(void);
  HRESULT         __fastcall get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall get_AdvancedSettings4(void);
  HRESULT         __fastcall get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall get_AdvancedSettings3(void);
  HRESULT         __fastcall set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/);
  HRESULT         __fastcall get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectedStatusText(void);
  HRESULT         __fastcall set_ColorDepth(long pcolorDepth/*[in]*/);
  HRESULT         __fastcall get_ColorDepth(long* pcolorDepth/*[out,retval]*/);
  long            __fastcall get_ColorDepth(void);
  HRESULT         __fastcall get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall get_AdvancedSettings2(void);
  HRESULT         __fastcall get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall get_SecuredSettings2(void);
  HRESULT         __fastcall get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/);
  Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall get_ExtendedDisconnectReason(void);
  HRESULT         __fastcall set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/);
  HRESULT         __fastcall get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullScreen(void);
  HRESULT         __fastcall SetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long chanOptions/*[in]*/);
  HRESULT         __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long* pChanOptions/*[out,retval]*/);
  long            __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/);
  HRESULT         __fastcall RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/);
  Mstsclib_tlb::ControlCloseStatus __fastcall RequestClose(void);
  HRESULT         __fastcall set_Server(BSTR pServer/*[in]*/);
  HRESULT         __fastcall get_Server(BSTR* pServer/*[out,retval]*/);
  BSTR            __fastcall get_Server(void);
  HRESULT         __fastcall set_Domain(BSTR pDomain/*[in]*/);
  HRESULT         __fastcall get_Domain(BSTR* pDomain/*[out,retval]*/);
  BSTR            __fastcall get_Domain(void);
  HRESULT         __fastcall set_UserName(BSTR pUserName/*[in]*/);
  HRESULT         __fastcall get_UserName(BSTR* pUserName/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall set_DisconnectedText(BSTR pDisconnectedText/*[in]*/);
  HRESULT         __fastcall get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/);
  BSTR            __fastcall get_DisconnectedText(void);
  HRESULT         __fastcall set_ConnectingText(BSTR pConnectingText/*[in]*/);
  HRESULT         __fastcall get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectingText(void);
  HRESULT         __fastcall get_Connected(short* pIsConnected/*[out,retval]*/);
  short           __fastcall get_Connected(void);
  HRESULT         __fastcall set_DesktopWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopWidth(void);
  HRESULT         __fastcall set_DesktopHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopHeight(void);
  HRESULT         __fastcall set_StartConnected(long pfStartConnected/*[in]*/);
  HRESULT         __fastcall get_StartConnected(long* pfStartConnected/*[out,retval]*/);
  long            __fastcall get_StartConnected(void);
  HRESULT         __fastcall get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/);
  long            __fastcall get_HorizontalScrollBarVisible(void);
  HRESULT         __fastcall get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/);
  long            __fastcall get_VerticalScrollBarVisible(void);
  HRESULT         __fastcall set_FullScreenTitle(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_CipherStrength(long* pCipherStrength/*[out,retval]*/);
  long            __fastcall get_CipherStrength(void);
  HRESULT         __fastcall get_Version(BSTR* pVersion/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/);
  long            __fastcall get_SecuredSettingsEnabled(void);
  HRESULT         __fastcall get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall get_SecuredSettings(void);
  HRESULT         __fastcall get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall get_AdvancedSettings(void);
  HRESULT         __fastcall get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/);
  Mstsclib_tlb::IMsTscDebugPtr __fastcall get_Debugger(void);
  HRESULT         __fastcall Connect();
  HRESULT         __fastcall Disconnect();
  HRESULT         __fastcall CreateVirtualChannels(BSTR newVal/*[in]*/);
  HRESULT         __fastcall SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/);

  __property   Mstsclib_tlb::IMsRdpClientTransportSettingsPtr TransportSettings = {read = get_TransportSettings};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr AdvancedSettings6 = {read = get_AdvancedSettings6};
  __property   Mstsclib_tlb::ITSRemoteProgramPtr RemoteProgram = {read = get_RemoteProgram};
  __property   Mstsclib_tlb::IMsRdpClientShellPtr MsRdpClientShell = {read = get_MsRdpClientShell};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr AdvancedSettings5 = {read = get_AdvancedSettings5};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr AdvancedSettings4 = {read = get_AdvancedSettings4};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr AdvancedSettings3 = {read = get_AdvancedSettings3};
  __property   BSTR            ConnectedStatusText = {read = get_ConnectedStatusText, write = set_ConnectedStatusText};

  __property   long            ColorDepth = {read = get_ColorDepth, write = set_ColorDepth};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr AdvancedSettings2 = {read = get_AdvancedSettings2};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr SecuredSettings2 = {read = get_SecuredSettings2};
  __property   Mstsclib_tlb::ExtendedDisconnectReasonCode ExtendedDisconnectReason = {read = get_ExtendedDisconnectReason};
  __property   VARIANT_BOOL    FullScreen = {read = get_FullScreen, write = set_FullScreen};

  __property   BSTR            Server = {read = get_Server, write = set_Server};
  __property   BSTR            Domain = {read = get_Domain, write = set_Domain};
  __property   BSTR            UserName = {read = get_UserName, write = set_UserName};
  __property   BSTR            DisconnectedText = {read = get_DisconnectedText, write = set_DisconnectedText};
  __property   BSTR            ConnectingText = {read = get_ConnectingText, write = set_ConnectingText};
  __property   short           Connected = {read = get_Connected};
  __property   long            DesktopWidth = {read = get_DesktopWidth, write = set_DesktopWidth};
  __property   long            DesktopHeight = {read = get_DesktopHeight, write = set_DesktopHeight};
  __property   long            StartConnected = {read = get_StartConnected, write = set_StartConnected};
  __property   long            HorizontalScrollBarVisible = {read = get_HorizontalScrollBarVisible};
  __property   long            VerticalScrollBarVisible = {read = get_VerticalScrollBarVisible};
  __property   BSTR            FullScreenTitle = {write = set_FullScreenTitle};
  __property   long            CipherStrength = {read = get_CipherStrength};
  __property   BSTR            Version = {read = get_Version};
  __property   long            SecuredSettingsEnabled = {read = get_SecuredSettingsEnabled};
  __property   Mstsclib_tlb::IMsTscSecuredSettingsPtr SecuredSettings = {read = get_SecuredSettings};
  __property   Mstsclib_tlb::IMsTscAdvancedSettingsPtr AdvancedSettings = {read = get_AdvancedSettings};
  __property   Mstsclib_tlb::IMsTscDebugPtr Debugger = {read = get_Debugger};

};
typedef IMsRdpClient5DispT<IMsRdpClient5> IMsRdpClient5Disp;

typedef TComInterface<IMsRdpClientNonScriptable3>  TCOMIMsRdpClientNonScriptable3;

typedef TComInterface<IMsRdpClientTransportSettings>  TCOMIMsRdpClientTransportSettings;

// *********************************************************************//
// DispIntf:  IMsRdpClientTransportSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {720298C0-A099-46F5-9F82-96921BAE4701}
// *********************************************************************//
template<class T>
class IMsRdpClientTransportSettingsDispT : public TAutoDriver<IMsRdpClientTransportSettings>
{
public:
  IMsRdpClientTransportSettingsDispT(){}

  IMsRdpClientTransportSettingsDispT(IMsRdpClientTransportSettings *pintf)
  {
    TAutoDriver<IMsRdpClientTransportSettings>::Bind(pintf, false);
  }

  IMsRdpClientTransportSettingsDispT(IMsRdpClientTransportSettingsPtr pintf)
  {
    TAutoDriver<IMsRdpClientTransportSettings>::Bind(pintf, true);
  }

  IMsRdpClientTransportSettingsDispT& operator=(IMsRdpClientTransportSettings *pintf)
  {
    TAutoDriver<IMsRdpClientTransportSettings>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClientTransportSettingsDispT& operator=(IMsRdpClientTransportSettingsPtr pintf)
  {
    TAutoDriver<IMsRdpClientTransportSettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_GatewayHostname(BSTR pProxyHostname/*[in]*/);
  HRESULT         __fastcall get_GatewayHostname(BSTR* pProxyHostname/*[out,retval]*/);
  BSTR            __fastcall get_GatewayHostname(void);
  HRESULT         __fastcall set_GatewayUsageMethod(unsigned_long pulProxyUsageMethod/*[in]*/);
  HRESULT         __fastcall get_GatewayUsageMethod(unsigned_long* pulProxyUsageMethod/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayUsageMethod(void);
  HRESULT         __fastcall set_GatewayProfileUsageMethod(unsigned_long pulProxyProfileUsageMethod/*[in]*/);
  HRESULT         __fastcall get_GatewayProfileUsageMethod(unsigned_long* pulProxyProfileUsageMethod/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayProfileUsageMethod(void);
  HRESULT         __fastcall set_GatewayCredsSource(unsigned_long pulProxyCredsSource/*[in]*/);
  HRESULT         __fastcall get_GatewayCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayCredsSource(void);
  HRESULT         __fastcall set_GatewayUserSelectedCredsSource(unsigned_long pulProxyCredsSource/*[in]*/);
  HRESULT         __fastcall get_GatewayUserSelectedCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayUserSelectedCredsSource(void);
  HRESULT         __fastcall get_GatewayIsSupported(long* pfProxyIsSupported/*[out,retval]*/);
  long            __fastcall get_GatewayIsSupported(void);
  HRESULT         __fastcall get_GatewayDefaultUsageMethod(unsigned_long* pulProxyDefaultUsageMethod/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayDefaultUsageMethod(void);

  __property   BSTR            GatewayHostname = {read = get_GatewayHostname, write = set_GatewayHostname};
  __property   unsigned_long   GatewayUsageMethod = {read = get_GatewayUsageMethod, write = set_GatewayUsageMethod};
  __property   unsigned_long   GatewayProfileUsageMethod = {read = get_GatewayProfileUsageMethod, write = set_GatewayProfileUsageMethod};
  __property   unsigned_long   GatewayCredsSource = {read = get_GatewayCredsSource, write = set_GatewayCredsSource};
  __property   unsigned_long   GatewayUserSelectedCredsSource = {read = get_GatewayUserSelectedCredsSource, write = set_GatewayUserSelectedCredsSource};
  __property   long            GatewayIsSupported = {read = get_GatewayIsSupported};
  __property   unsigned_long   GatewayDefaultUsageMethod = {read = get_GatewayDefaultUsageMethod};
};
typedef IMsRdpClientTransportSettingsDispT<IMsRdpClientTransportSettings> IMsRdpClientTransportSettingsDisp;

typedef TComInterface<IMsRdpClientAdvancedSettings5>  TCOMIMsRdpClientAdvancedSettings5;

// *********************************************************************//
// DispIntf:  IMsRdpClientAdvancedSettings5
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FBA7F64E-6783-4405-DA45-FA4A763DABD0}
// *********************************************************************//
template<class T>
class IMsRdpClientAdvancedSettings5DispT : public TAutoDriver<IMsRdpClientAdvancedSettings5>
{
public:
  IMsRdpClientAdvancedSettings5DispT(){}

  IMsRdpClientAdvancedSettings5DispT(IMsRdpClientAdvancedSettings5 *pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings5>::Bind(pintf, false);
  }

  IMsRdpClientAdvancedSettings5DispT(IMsRdpClientAdvancedSettings5Ptr pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings5>::Bind(pintf, true);
  }

  IMsRdpClientAdvancedSettings5DispT& operator=(IMsRdpClientAdvancedSettings5 *pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings5>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClientAdvancedSettings5DispT& operator=(IMsRdpClientAdvancedSettings5Ptr pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings5>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_RedirectClipboard(VARIANT_BOOL pfRedirectClipboard/*[in]*/);
  HRESULT         __fastcall get_RedirectClipboard(VARIANT_BOOL* pfRedirectClipboard/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectClipboard(void);
  HRESULT         __fastcall set_AudioRedirectionMode(unsigned puiAudioRedirectionMode/*[in]*/);
  HRESULT         __fastcall get_AudioRedirectionMode(unsigned* puiAudioRedirectionMode/*[out,retval]*/);
  unsigned        __fastcall get_AudioRedirectionMode(void);
  HRESULT         __fastcall set_ConnectionBarShowPinButton(VARIANT_BOOL pfShowPin/*[in]*/);
  HRESULT         __fastcall get_ConnectionBarShowPinButton(VARIANT_BOOL* pfShowPin/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectionBarShowPinButton(void);
  HRESULT         __fastcall set_PublicMode(VARIANT_BOOL pfPublicMode/*[in]*/);
  HRESULT         __fastcall get_PublicMode(VARIANT_BOOL* pfPublicMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PublicMode(void);
  HRESULT         __fastcall set_RedirectDevices(VARIANT_BOOL pfRedirectPnPDevices/*[in]*/);
  HRESULT         __fastcall get_RedirectDevices(VARIANT_BOOL* pfRedirectPnPDevices/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectDevices(void);
  HRESULT         __fastcall set_RedirectPOSDevices(VARIANT_BOOL pfRedirectPOSDevices/*[in]*/);
  HRESULT         __fastcall get_RedirectPOSDevices(VARIANT_BOOL* pfRedirectPOSDevices/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPOSDevices(void);
  HRESULT         __fastcall set_BitmapVirtualCache32BppSize(long pBitmapVirtualCache32BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache32BppSize(long* pBitmapVirtualCache32BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache32BppSize(void);
  HRESULT         __fastcall set_AuthenticationLevel(unsigned puiAuthLevel/*[in]*/);
  HRESULT         __fastcall get_AuthenticationLevel(unsigned* puiAuthLevel/*[out,retval]*/);
  unsigned        __fastcall get_AuthenticationLevel(void);
  HRESULT         __fastcall set_ConnectionBarShowMinimizeButton(VARIANT_BOOL pfShowMinimize/*[in]*/);
  HRESULT         __fastcall get_ConnectionBarShowMinimizeButton(VARIANT_BOOL* pfShowMinimize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectionBarShowMinimizeButton(void);
  HRESULT         __fastcall set_ConnectionBarShowRestoreButton(VARIANT_BOOL pfShowRestore/*[in]*/);
  HRESULT         __fastcall get_ConnectionBarShowRestoreButton(VARIANT_BOOL* pfShowRestore/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectionBarShowRestoreButton(void);
  HRESULT         __fastcall get_CanAutoReconnect(VARIANT_BOOL* pfCanAutoReconnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanAutoReconnect(void);
  HRESULT         __fastcall set_EnableAutoReconnect(VARIANT_BOOL pfEnableAutoReconnect/*[in]*/);
  HRESULT         __fastcall get_EnableAutoReconnect(VARIANT_BOOL* pfEnableAutoReconnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableAutoReconnect(void);
  HRESULT         __fastcall set_MaxReconnectAttempts(long pMaxReconnectAttempts/*[in]*/);
  HRESULT         __fastcall get_MaxReconnectAttempts(long* pMaxReconnectAttempts/*[out,retval]*/);
  long            __fastcall get_MaxReconnectAttempts(void);
  HRESULT         __fastcall set_SmoothScroll(long psmoothScroll/*[in]*/);
  HRESULT         __fastcall get_SmoothScroll(long* psmoothScroll/*[out,retval]*/);
  long            __fastcall get_SmoothScroll(void);
  HRESULT         __fastcall set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/);
  HRESULT         __fastcall get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/);
  long            __fastcall get_AcceleratorPassthrough(void);
  HRESULT         __fastcall set_ShadowBitmap(long pshadowBitmap/*[in]*/);
  HRESULT         __fastcall get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/);
  long            __fastcall get_ShadowBitmap(void);
  HRESULT         __fastcall set_TransportType(long ptransportType/*[in]*/);
  HRESULT         __fastcall get_TransportType(long* ptransportType/*[out,retval]*/);
  long            __fastcall get_TransportType(void);
  HRESULT         __fastcall set_SasSequence(long psasSequence/*[in]*/);
  HRESULT         __fastcall get_SasSequence(long* psasSequence/*[out,retval]*/);
  long            __fastcall get_SasSequence(void);
  HRESULT         __fastcall set_EncryptionEnabled(long pencryptionEnabled/*[in]*/);
  HRESULT         __fastcall get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/);
  long            __fastcall get_EncryptionEnabled(void);
  HRESULT         __fastcall set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/);
  HRESULT         __fastcall get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/);
  long            __fastcall get_DedicatedTerminal(void);
  HRESULT         __fastcall set_RDPPort(long prdpPort/*[in]*/);
  HRESULT         __fastcall get_RDPPort(long* prdpPort/*[out,retval]*/);
  long            __fastcall get_RDPPort(void);
  HRESULT         __fastcall set_EnableMouse(long penableMouse/*[in]*/);
  HRESULT         __fastcall get_EnableMouse(long* penableMouse/*[out,retval]*/);
  long            __fastcall get_EnableMouse(void);
  HRESULT         __fastcall set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/);
  HRESULT         __fastcall get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/);
  long            __fastcall get_DisableCtrlAltDel(void);
  HRESULT         __fastcall set_EnableWindowsKey(long penableWindowsKey/*[in]*/);
  HRESULT         __fastcall get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/);
  long            __fastcall get_EnableWindowsKey(void);
  HRESULT         __fastcall set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/);
  HRESULT         __fastcall get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/);
  long            __fastcall get_DoubleClickDetect(void);
  HRESULT         __fastcall set_MaximizeShell(long pmaximizeShell/*[in]*/);
  HRESULT         __fastcall get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/);
  long            __fastcall get_MaximizeShell(void);
  HRESULT         __fastcall set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/);
  HRESULT         __fastcall get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/);
  long            __fastcall get_HotKeyFullScreen(void);
  HRESULT         __fastcall set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/);
  HRESULT         __fastcall get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/);
  long            __fastcall get_HotKeyCtrlEsc(void);
  HRESULT         __fastcall set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/);
  long            __fastcall get_HotKeyAltEsc(void);
  HRESULT         __fastcall set_HotKeyAltTab(long photKeyAltTab/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/);
  long            __fastcall get_HotKeyAltTab(void);
  HRESULT         __fastcall set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/);
  long            __fastcall get_HotKeyAltShiftTab(void);
  HRESULT         __fastcall set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/);
  long            __fastcall get_HotKeyAltSpace(void);
  HRESULT         __fastcall set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/);
  HRESULT         __fastcall get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/);
  long            __fastcall get_HotKeyCtrlAltDel(void);
  HRESULT         __fastcall set_orderDrawThreshold(long porderDrawThreshold/*[in]*/);
  HRESULT         __fastcall get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/);
  long            __fastcall get_orderDrawThreshold(void);
  HRESULT         __fastcall set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/);
  HRESULT         __fastcall get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/);
  long            __fastcall get_BitmapCacheSize(void);
  HRESULT         __fastcall set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCacheSize(void);
  HRESULT         __fastcall set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/);
  HRESULT         __fastcall get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/);
  long            __fastcall get_ScaleBitmapCachesByBPP(void);
  HRESULT         __fastcall set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/);
  HRESULT         __fastcall get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/);
  long            __fastcall get_NumBitmapCaches(void);
  HRESULT         __fastcall set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/);
  HRESULT         __fastcall get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/);
  long            __fastcall get_CachePersistenceActive(void);
  HRESULT         __fastcall set_PersistCacheDirectory(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_brushSupportLevel(long pbrushSupportLevel/*[in]*/);
  HRESULT         __fastcall get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/);
  long            __fastcall get_brushSupportLevel(void);
  HRESULT         __fastcall set_minInputSendInterval(long pminInputSendInterval/*[in]*/);
  HRESULT         __fastcall get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/);
  long            __fastcall get_minInputSendInterval(void);
  HRESULT         __fastcall set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/);
  HRESULT         __fastcall get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/);
  long            __fastcall get_InputEventsAtOnce(void);
  HRESULT         __fastcall set_maxEventCount(long pmaxEventCount/*[in]*/);
  HRESULT         __fastcall get_maxEventCount(long* pmaxEventCount/*[out,retval]*/);
  long            __fastcall get_maxEventCount(void);
  HRESULT         __fastcall set_keepAliveInterval(long pkeepAliveInterval/*[in]*/);
  HRESULT         __fastcall get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/);
  long            __fastcall get_keepAliveInterval(void);
  HRESULT         __fastcall set_shutdownTimeout(long pshutdownTimeout/*[in]*/);
  HRESULT         __fastcall get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/);
  long            __fastcall get_shutdownTimeout(void);
  HRESULT         __fastcall set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/);
  HRESULT         __fastcall get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/);
  long            __fastcall get_overallConnectionTimeout(void);
  HRESULT         __fastcall set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/);
  HRESULT         __fastcall get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/);
  long            __fastcall get_singleConnectionTimeout(void);
  HRESULT         __fastcall set_KeyboardType(long pkeyboardType/*[in]*/);
  HRESULT         __fastcall get_KeyboardType(long* pkeyboardType/*[out,retval]*/);
  long            __fastcall get_KeyboardType(void);
  HRESULT         __fastcall set_KeyboardSubType(long pkeyboardSubType/*[in]*/);
  HRESULT         __fastcall get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/);
  long            __fastcall get_KeyboardSubType(void);
  HRESULT         __fastcall set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/);
  HRESULT         __fastcall get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/);
  long            __fastcall get_KeyboardFunctionKey(void);
  HRESULT         __fastcall set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/);
  HRESULT         __fastcall get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/);
  long            __fastcall get_WinceFixedPalette(void);
  HRESULT         __fastcall set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/);
  HRESULT         __fastcall get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectToServerConsole(void);
  HRESULT         __fastcall set_BitmapPersistence(long pbitmapPersistence/*[in]*/);
  HRESULT         __fastcall get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/);
  long            __fastcall get_BitmapPersistence(void);
  HRESULT         __fastcall set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/);
  HRESULT         __fastcall get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/);
  long            __fastcall get_MinutesToIdleTimeout(void);
  HRESULT         __fastcall set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/);
  HRESULT         __fastcall get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SmartSizing(void);
  HRESULT         __fastcall set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/);
  HRESULT         __fastcall get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrLocalPrintingDocName(void);
  HRESULT         __fastcall set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/);
  HRESULT         __fastcall get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrClipCleanTempDirString(void);
  HRESULT         __fastcall set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/);
  HRESULT         __fastcall get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrClipPasteInfoString(void);
  HRESULT         __fastcall set_ClearTextPassword(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/);
  HRESULT         __fastcall get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayConnectionBar(void);
  HRESULT         __fastcall set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/);
  HRESULT         __fastcall get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PinConnectionBar(void);
  HRESULT         __fastcall set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/);
  HRESULT         __fastcall get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GrabFocusOnConnect(void);
  HRESULT         __fastcall set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/);
  HRESULT         __fastcall get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/);
  BSTR            __fastcall get_LoadBalanceInfo(void);
  HRESULT         __fastcall set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/);
  HRESULT         __fastcall get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectDrives(void);
  HRESULT         __fastcall set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/);
  HRESULT         __fastcall get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPrinters(void);
  HRESULT         __fastcall set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/);
  HRESULT         __fastcall get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPorts(void);
  HRESULT         __fastcall set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/);
  HRESULT         __fastcall get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectSmartCards(void);
  HRESULT         __fastcall set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache16BppSize(void);
  HRESULT         __fastcall set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache24BppSize(void);
  HRESULT         __fastcall set_PerformanceFlags(long pDisableList/*[in]*/);
  HRESULT         __fastcall get_PerformanceFlags(long* pDisableList/*[out,retval]*/);
  long            __fastcall get_PerformanceFlags(void);
  HRESULT         __fastcall set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/);
  HRESULT         __fastcall set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/);
  HRESULT         __fastcall get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NotifyTSPublicKey(void);
  HRESULT         __fastcall set_Compress(long pcompress/*[in]*/);
  HRESULT         __fastcall get_Compress(long* pcompress/*[out,retval]*/);
  long            __fastcall get_Compress(void);
  HRESULT         __fastcall set_BitmapPeristence(long pbitmapPeristence/*[in]*/);
  HRESULT         __fastcall get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/);
  long            __fastcall get_BitmapPeristence(void);
  HRESULT         __fastcall set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/);
  HRESULT         __fastcall get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/);
  long            __fastcall get_allowBackgroundInput(void);
  HRESULT         __fastcall set_KeyBoardLayoutStr(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_PluginDlls(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconFile(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconIndex(long Param1/*[in]*/);
  HRESULT         __fastcall set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/);
  HRESULT         __fastcall get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/);
  long            __fastcall get_ContainerHandledFullScreen(void);
  HRESULT         __fastcall set_DisableRdpdr(long pDisableRdpdr/*[in]*/);
  HRESULT         __fastcall get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/);
  long            __fastcall get_DisableRdpdr(void);

  __property   VARIANT_BOOL    RedirectClipboard = {read = get_RedirectClipboard, write = set_RedirectClipboard};
  __property   unsigned        AudioRedirectionMode = {read = get_AudioRedirectionMode, write = set_AudioRedirectionMode};
  __property   VARIANT_BOOL    ConnectionBarShowPinButton = {read = get_ConnectionBarShowPinButton, write = set_ConnectionBarShowPinButton};
  __property   VARIANT_BOOL    PublicMode = {read = get_PublicMode, write = set_PublicMode};
  __property   VARIANT_BOOL    RedirectDevices = {read = get_RedirectDevices, write = set_RedirectDevices};
  __property   VARIANT_BOOL    RedirectPOSDevices = {read = get_RedirectPOSDevices, write = set_RedirectPOSDevices};
  __property   long            BitmapVirtualCache32BppSize = {read = get_BitmapVirtualCache32BppSize, write = set_BitmapVirtualCache32BppSize};

  __property   unsigned        AuthenticationLevel = {read = get_AuthenticationLevel, write = set_AuthenticationLevel};

  __property   VARIANT_BOOL    ConnectionBarShowMinimizeButton = {read = get_ConnectionBarShowMinimizeButton, write = set_ConnectionBarShowMinimizeButton};
  __property   VARIANT_BOOL    ConnectionBarShowRestoreButton = {read = get_ConnectionBarShowRestoreButton, write = set_ConnectionBarShowRestoreButton};

  __property   VARIANT_BOOL    CanAutoReconnect = {read = get_CanAutoReconnect};
  __property   VARIANT_BOOL    EnableAutoReconnect = {read = get_EnableAutoReconnect, write = set_EnableAutoReconnect};
  __property   long            MaxReconnectAttempts = {read = get_MaxReconnectAttempts, write = set_MaxReconnectAttempts};

  __property   long            SmoothScroll = {read = get_SmoothScroll, write = set_SmoothScroll};
  __property   long            AcceleratorPassthrough = {read = get_AcceleratorPassthrough, write = set_AcceleratorPassthrough};
  __property   long            ShadowBitmap = {read = get_ShadowBitmap, write = set_ShadowBitmap};
  __property   long            TransportType = {read = get_TransportType, write = set_TransportType};
  __property   long            SasSequence = {read = get_SasSequence, write = set_SasSequence};
  __property   long            EncryptionEnabled = {read = get_EncryptionEnabled, write = set_EncryptionEnabled};
  __property   long            DedicatedTerminal = {read = get_DedicatedTerminal, write = set_DedicatedTerminal};
  __property   long            RDPPort = {read = get_RDPPort, write = set_RDPPort};
  __property   long            EnableMouse = {read = get_EnableMouse, write = set_EnableMouse};
  __property   long            DisableCtrlAltDel = {read = get_DisableCtrlAltDel, write = set_DisableCtrlAltDel};
  __property   long            EnableWindowsKey = {read = get_EnableWindowsKey, write = set_EnableWindowsKey};
  __property   long            DoubleClickDetect = {read = get_DoubleClickDetect, write = set_DoubleClickDetect};
  __property   long            MaximizeShell = {read = get_MaximizeShell, write = set_MaximizeShell};
  __property   long            HotKeyFullScreen = {read = get_HotKeyFullScreen, write = set_HotKeyFullScreen};
  __property   long            HotKeyCtrlEsc = {read = get_HotKeyCtrlEsc, write = set_HotKeyCtrlEsc};
  __property   long            HotKeyAltEsc = {read = get_HotKeyAltEsc, write = set_HotKeyAltEsc};
  __property   long            HotKeyAltTab = {read = get_HotKeyAltTab, write = set_HotKeyAltTab};
  __property   long            HotKeyAltShiftTab = {read = get_HotKeyAltShiftTab, write = set_HotKeyAltShiftTab};
  __property   long            HotKeyAltSpace = {read = get_HotKeyAltSpace, write = set_HotKeyAltSpace};
  __property   long            HotKeyCtrlAltDel = {read = get_HotKeyCtrlAltDel, write = set_HotKeyCtrlAltDel};
  __property   long            orderDrawThreshold = {read = get_orderDrawThreshold, write = set_orderDrawThreshold};
  __property   long            BitmapCacheSize = {read = get_BitmapCacheSize, write = set_BitmapCacheSize};
  __property   long            BitmapVirtualCacheSize = {read = get_BitmapVirtualCacheSize, write = set_BitmapVirtualCacheSize};
  __property   long            ScaleBitmapCachesByBPP = {read = get_ScaleBitmapCachesByBPP, write = set_ScaleBitmapCachesByBPP};
  __property   long            NumBitmapCaches = {read = get_NumBitmapCaches, write = set_NumBitmapCaches};
  __property   long            CachePersistenceActive = {read = get_CachePersistenceActive, write = set_CachePersistenceActive};
  __property   BSTR            PersistCacheDirectory = {write = set_PersistCacheDirectory};
  __property   long            brushSupportLevel = {read = get_brushSupportLevel, write = set_brushSupportLevel};
  __property   long            minInputSendInterval = {read = get_minInputSendInterval, write = set_minInputSendInterval};
  __property   long            InputEventsAtOnce = {read = get_InputEventsAtOnce, write = set_InputEventsAtOnce};
  __property   long            maxEventCount = {read = get_maxEventCount, write = set_maxEventCount};
  __property   long            keepAliveInterval = {read = get_keepAliveInterval, write = set_keepAliveInterval};
  __property   long            shutdownTimeout = {read = get_shutdownTimeout, write = set_shutdownTimeout};
  __property   long            overallConnectionTimeout = {read = get_overallConnectionTimeout, write = set_overallConnectionTimeout};
  __property   long            singleConnectionTimeout = {read = get_singleConnectionTimeout, write = set_singleConnectionTimeout};
  __property   long            KeyboardType = {read = get_KeyboardType, write = set_KeyboardType};
  __property   long            KeyboardSubType = {read = get_KeyboardSubType, write = set_KeyboardSubType};
  __property   long            KeyboardFunctionKey = {read = get_KeyboardFunctionKey, write = set_KeyboardFunctionKey};
  __property   long            WinceFixedPalette = {read = get_WinceFixedPalette, write = set_WinceFixedPalette};
  __property   VARIANT_BOOL    ConnectToServerConsole = {read = get_ConnectToServerConsole, write = set_ConnectToServerConsole};
  __property   long            BitmapPersistence = {read = get_BitmapPersistence, write = set_BitmapPersistence};
  __property   long            MinutesToIdleTimeout = {read = get_MinutesToIdleTimeout, write = set_MinutesToIdleTimeout};
  __property   VARIANT_BOOL    SmartSizing = {read = get_SmartSizing, write = set_SmartSizing};
  __property   BSTR            RdpdrLocalPrintingDocName = {read = get_RdpdrLocalPrintingDocName, write = set_RdpdrLocalPrintingDocName};
  __property   BSTR            RdpdrClipCleanTempDirString = {read = get_RdpdrClipCleanTempDirString, write = set_RdpdrClipCleanTempDirString};
  __property   BSTR            RdpdrClipPasteInfoString = {read = get_RdpdrClipPasteInfoString, write = set_RdpdrClipPasteInfoString};
  __property   BSTR            ClearTextPassword = {write = set_ClearTextPassword};
  __property   VARIANT_BOOL    DisplayConnectionBar = {read = get_DisplayConnectionBar, write = set_DisplayConnectionBar};
  __property   VARIANT_BOOL    PinConnectionBar = {read = get_PinConnectionBar, write = set_PinConnectionBar};
  __property   VARIANT_BOOL    GrabFocusOnConnect = {read = get_GrabFocusOnConnect, write = set_GrabFocusOnConnect};
  __property   BSTR            LoadBalanceInfo = {read = get_LoadBalanceInfo, write = set_LoadBalanceInfo};
  __property   VARIANT_BOOL    RedirectDrives = {read = get_RedirectDrives, write = set_RedirectDrives};
  __property   VARIANT_BOOL    RedirectPrinters = {read = get_RedirectPrinters, write = set_RedirectPrinters};
  __property   VARIANT_BOOL    RedirectPorts = {read = get_RedirectPorts, write = set_RedirectPorts};
  __property   VARIANT_BOOL    RedirectSmartCards = {read = get_RedirectSmartCards, write = set_RedirectSmartCards};
  __property   long            BitmapVirtualCache16BppSize = {read = get_BitmapVirtualCache16BppSize, write = set_BitmapVirtualCache16BppSize};
  __property   long            BitmapVirtualCache24BppSize = {read = get_BitmapVirtualCache24BppSize, write = set_BitmapVirtualCache24BppSize};
  __property   long            PerformanceFlags = {read = get_PerformanceFlags, write = set_PerformanceFlags};
  __property   VARIANT_BOOL    NotifyTSPublicKey = {read = get_NotifyTSPublicKey, write = set_NotifyTSPublicKey};

  __property   long            Compress = {read = get_Compress, write = set_Compress};
  __property   long            BitmapPeristence = {read = get_BitmapPeristence, write = set_BitmapPeristence};
  __property   long            allowBackgroundInput = {read = get_allowBackgroundInput, write = set_allowBackgroundInput};
  __property   BSTR            KeyBoardLayoutStr = {write = set_KeyBoardLayoutStr};
  __property   BSTR            PluginDlls = {write = set_PluginDlls};
  __property   BSTR            IconFile = {write = set_IconFile};
  __property   long            IconIndex = {write = set_IconIndex};
  __property   long            ContainerHandledFullScreen = {read = get_ContainerHandledFullScreen, write = set_ContainerHandledFullScreen};
  __property   long            DisableRdpdr = {read = get_DisableRdpdr, write = set_DisableRdpdr};
};
typedef IMsRdpClientAdvancedSettings5DispT<IMsRdpClientAdvancedSettings5> IMsRdpClientAdvancedSettings5Disp;

typedef TComInterface<ITSRemoteProgram>  TCOMITSRemoteProgram;

// *********************************************************************//
// DispIntf:  ITSRemoteProgram
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FDD029F9-467A-4C49-8529-64B521DBD1B4}
// *********************************************************************//
template<class T>
class ITSRemoteProgramDispT : public TAutoDriver<ITSRemoteProgram>
{
public:
  ITSRemoteProgramDispT(){}

  ITSRemoteProgramDispT(ITSRemoteProgram *pintf)
  {
    TAutoDriver<ITSRemoteProgram>::Bind(pintf, false);
  }

  ITSRemoteProgramDispT(ITSRemoteProgramPtr pintf)
  {
    TAutoDriver<ITSRemoteProgram>::Bind(pintf, true);
  }

  ITSRemoteProgramDispT& operator=(ITSRemoteProgram *pintf)
  {
    TAutoDriver<ITSRemoteProgram>::Bind(pintf, false);
    return *this;
  }

  ITSRemoteProgramDispT& operator=(ITSRemoteProgramPtr pintf)
  {
    TAutoDriver<ITSRemoteProgram>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_RemoteProgramMode(VARIANT_BOOL pvboolRemoteProgramMode/*[in]*/);
  HRESULT         __fastcall get_RemoteProgramMode(VARIANT_BOOL* pvboolRemoteProgramMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RemoteProgramMode(void);
  HRESULT         __fastcall ServerStartProgram(BSTR bstrExecutablePath/*[in]*/, 
                                                BSTR bstrFilePath/*[in]*/, 
                                                BSTR bstrWorkingDirectory/*[in]*/, 
                                                VARIANT_BOOL vbExpandEnvVarInWorkingDirectoryOnServer/*[in]*/
                                                , BSTR bstrArguments/*[in]*/, 
                                                VARIANT_BOOL vbExpandEnvVarInArgumentsOnServer/*[in]*/);

  __property   VARIANT_BOOL    RemoteProgramMode = {read = get_RemoteProgramMode, write = set_RemoteProgramMode};
};
typedef ITSRemoteProgramDispT<ITSRemoteProgram> ITSRemoteProgramDisp;

typedef TComInterface<IMsRdpClientShell>  TCOMIMsRdpClientShell;

// *********************************************************************//
// DispIntf:  IMsRdpClientShell
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D012AE6D-C19A-4BFE-B367-201F8911F134}
// *********************************************************************//
template<class T>
class IMsRdpClientShellDispT : public TAutoDriver<IMsRdpClientShell>
{
public:
  IMsRdpClientShellDispT(){}

  IMsRdpClientShellDispT(IMsRdpClientShell *pintf)
  {
    TAutoDriver<IMsRdpClientShell>::Bind(pintf, false);
  }

  IMsRdpClientShellDispT(IMsRdpClientShellPtr pintf)
  {
    TAutoDriver<IMsRdpClientShell>::Bind(pintf, true);
  }

  IMsRdpClientShellDispT& operator=(IMsRdpClientShell *pintf)
  {
    TAutoDriver<IMsRdpClientShell>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClientShellDispT& operator=(IMsRdpClientShellPtr pintf)
  {
    TAutoDriver<IMsRdpClientShell>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall Launch();
  HRESULT         __fastcall set_RdpFileContents(BSTR pszRdpFile/*[in]*/);
  HRESULT         __fastcall get_RdpFileContents(BSTR* pszRdpFile/*[out,retval]*/);
  BSTR            __fastcall get_RdpFileContents(void);
  HRESULT         __fastcall SetRdpProperty(BSTR szProperty/*[in]*/, VARIANT Value/*[in]*/);
  HRESULT         __fastcall GetRdpProperty(BSTR szProperty/*[in]*/, VARIANT* pValue/*[out,retval]*/);
  VARIANT         __fastcall GetRdpProperty(BSTR szProperty/*[in]*/);
  HRESULT         __fastcall get_IsRemoteProgramClientInstalled(VARIANT_BOOL* pbClientInstalled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsRemoteProgramClientInstalled(void);
  HRESULT         __fastcall set_PublicMode(VARIANT_BOOL pfPublicMode/*[in]*/);
  HRESULT         __fastcall get_PublicMode(VARIANT_BOOL* pfPublicMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PublicMode(void);
  HRESULT         __fastcall ShowTrustedSitesManagementDialog();

  __property   BSTR            RdpFileContents = {read = get_RdpFileContents, write = set_RdpFileContents};
  __property   VARIANT_BOOL    IsRemoteProgramClientInstalled = {read = get_IsRemoteProgramClientInstalled};
  __property   VARIANT_BOOL    PublicMode = {read = get_PublicMode, write = set_PublicMode};
};
typedef IMsRdpClientShellDispT<IMsRdpClientShell> IMsRdpClientShellDisp;

typedef TComInterface<IMsRdpDeviceCollection>  TCOMIMsRdpDeviceCollection;

typedef TComInterface<IMsRdpDevice>  TCOMIMsRdpDevice;

typedef TComInterface<IMsRdpDriveCollection>  TCOMIMsRdpDriveCollection;

typedef TComInterface<IMsRdpDrive>  TCOMIMsRdpDrive;

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient6
// Interface: IMsRdpClient6
// *********************************************************************//
template <class T /* IMsRdpClient6 */ >
class TCOMIMsRdpClient6T : public TComInterface<IMsRdpClient6>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMsRdpClient6T() {}
  TCOMIMsRdpClient6T(IMsRdpClient6 *intf, bool addRef = false) : TComInterface<IMsRdpClient6>(intf, addRef) {}
  TCOMIMsRdpClient6T(const TCOMIMsRdpClient6T& src) : TComInterface<IMsRdpClient6>(src) {}
  TCOMIMsRdpClient6T& operator=(const TCOMIMsRdpClient6T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_AdvancedSettings7(Mstsclib_tlb::IMsRdpClientAdvancedSettings6** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr __fastcall get_AdvancedSettings7(void);
  HRESULT         __fastcall get_TransportSettings2(Mstsclib_tlb::IMsRdpClientTransportSettings2** ppXportSet2/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr __fastcall get_TransportSettings2(void);

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr AdvancedSettings7 = {read = get_AdvancedSettings7};
  __property   Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr TransportSettings2 = {read = get_TransportSettings2};
};
typedef TCOMIMsRdpClient6T<IMsRdpClient6> TCOMIMsRdpClient6;

// *********************************************************************//
// DispIntf:  IMsRdpClient6
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D43B7D80-8517-4B6D-9EAC-96AD6800D7F2}
// *********************************************************************//
template<class T>
class IMsRdpClient6DispT : public TAutoDriver<IMsRdpClient6>
{
public:
  IMsRdpClient6DispT(){}

  IMsRdpClient6DispT(IMsRdpClient6 *pintf)
  {
    TAutoDriver<IMsRdpClient6>::Bind(pintf, false);
  }

  IMsRdpClient6DispT(IMsRdpClient6Ptr pintf)
  {
    TAutoDriver<IMsRdpClient6>::Bind(pintf, true);
  }

  IMsRdpClient6DispT& operator=(IMsRdpClient6 *pintf)
  {
    TAutoDriver<IMsRdpClient6>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClient6DispT& operator=(IMsRdpClient6Ptr pintf)
  {
    TAutoDriver<IMsRdpClient6>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MsRdpClient6NotSafeForScripting));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MsRdpClient6NotSafeForScripting);
  }

  HRESULT         __fastcall get_AdvancedSettings7(Mstsclib_tlb::IMsRdpClientAdvancedSettings6** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr __fastcall get_AdvancedSettings7(void);
  HRESULT         __fastcall get_TransportSettings2(Mstsclib_tlb::IMsRdpClientTransportSettings2** ppXportSet2/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr __fastcall get_TransportSettings2(void);
  HRESULT         __fastcall get_TransportSettings(Mstsclib_tlb::IMsRdpClientTransportSettings** ppXportSet/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettingsPtr __fastcall get_TransportSettings(void);
  HRESULT         __fastcall get_AdvancedSettings6(Mstsclib_tlb::IMsRdpClientAdvancedSettings5** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr __fastcall get_AdvancedSettings6(void);
  HRESULT         __fastcall GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                                 unsigned ExtendedDisconnectReason/*[in]*/, 
                                                 BSTR* pBstrErrorMsg/*[out,retval]*/);
  BSTR            __fastcall GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                                 unsigned ExtendedDisconnectReason/*[in]*/);
  HRESULT         __fastcall get_RemoteProgram(Mstsclib_tlb::ITSRemoteProgram** ppRemoteProgram/*[out,retval]*/);
  Mstsclib_tlb::ITSRemoteProgramPtr __fastcall get_RemoteProgram(void);
  HRESULT         __fastcall get_MsRdpClientShell(Mstsclib_tlb::IMsRdpClientShell** ppLauncher/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientShellPtr __fastcall get_MsRdpClientShell(void);
  HRESULT         __fastcall get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall get_AdvancedSettings5(void);
  HRESULT         __fastcall get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall get_AdvancedSettings4(void);
  HRESULT         __fastcall get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall get_AdvancedSettings3(void);
  HRESULT         __fastcall set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/);
  HRESULT         __fastcall get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectedStatusText(void);
  HRESULT         __fastcall set_ColorDepth(long pcolorDepth/*[in]*/);
  HRESULT         __fastcall get_ColorDepth(long* pcolorDepth/*[out,retval]*/);
  long            __fastcall get_ColorDepth(void);
  HRESULT         __fastcall get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall get_AdvancedSettings2(void);
  HRESULT         __fastcall get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall get_SecuredSettings2(void);
  HRESULT         __fastcall get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/);
  Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall get_ExtendedDisconnectReason(void);
  HRESULT         __fastcall set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/);
  HRESULT         __fastcall get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullScreen(void);
  HRESULT         __fastcall SetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long chanOptions/*[in]*/);
  HRESULT         __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long* pChanOptions/*[out,retval]*/);
  long            __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/);
  HRESULT         __fastcall RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/);
  Mstsclib_tlb::ControlCloseStatus __fastcall RequestClose(void);
  HRESULT         __fastcall set_Server(BSTR pServer/*[in]*/);
  HRESULT         __fastcall get_Server(BSTR* pServer/*[out,retval]*/);
  BSTR            __fastcall get_Server(void);
  HRESULT         __fastcall set_Domain(BSTR pDomain/*[in]*/);
  HRESULT         __fastcall get_Domain(BSTR* pDomain/*[out,retval]*/);
  BSTR            __fastcall get_Domain(void);
  HRESULT         __fastcall set_UserName(BSTR pUserName/*[in]*/);
  HRESULT         __fastcall get_UserName(BSTR* pUserName/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall set_DisconnectedText(BSTR pDisconnectedText/*[in]*/);
  HRESULT         __fastcall get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/);
  BSTR            __fastcall get_DisconnectedText(void);
  HRESULT         __fastcall set_ConnectingText(BSTR pConnectingText/*[in]*/);
  HRESULT         __fastcall get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectingText(void);
  HRESULT         __fastcall get_Connected(short* pIsConnected/*[out,retval]*/);
  short           __fastcall get_Connected(void);
  HRESULT         __fastcall set_DesktopWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopWidth(void);
  HRESULT         __fastcall set_DesktopHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopHeight(void);
  HRESULT         __fastcall set_StartConnected(long pfStartConnected/*[in]*/);
  HRESULT         __fastcall get_StartConnected(long* pfStartConnected/*[out,retval]*/);
  long            __fastcall get_StartConnected(void);
  HRESULT         __fastcall get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/);
  long            __fastcall get_HorizontalScrollBarVisible(void);
  HRESULT         __fastcall get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/);
  long            __fastcall get_VerticalScrollBarVisible(void);
  HRESULT         __fastcall set_FullScreenTitle(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_CipherStrength(long* pCipherStrength/*[out,retval]*/);
  long            __fastcall get_CipherStrength(void);
  HRESULT         __fastcall get_Version(BSTR* pVersion/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/);
  long            __fastcall get_SecuredSettingsEnabled(void);
  HRESULT         __fastcall get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall get_SecuredSettings(void);
  HRESULT         __fastcall get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall get_AdvancedSettings(void);
  HRESULT         __fastcall get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/);
  Mstsclib_tlb::IMsTscDebugPtr __fastcall get_Debugger(void);
  HRESULT         __fastcall Connect();
  HRESULT         __fastcall Disconnect();
  HRESULT         __fastcall CreateVirtualChannels(BSTR newVal/*[in]*/);
  HRESULT         __fastcall SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/);

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr AdvancedSettings7 = {read = get_AdvancedSettings7};
  __property   Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr TransportSettings2 = {read = get_TransportSettings2};

  __property   Mstsclib_tlb::IMsRdpClientTransportSettingsPtr TransportSettings = {read = get_TransportSettings};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr AdvancedSettings6 = {read = get_AdvancedSettings6};
  __property   Mstsclib_tlb::ITSRemoteProgramPtr RemoteProgram = {read = get_RemoteProgram};
  __property   Mstsclib_tlb::IMsRdpClientShellPtr MsRdpClientShell = {read = get_MsRdpClientShell};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr AdvancedSettings5 = {read = get_AdvancedSettings5};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr AdvancedSettings4 = {read = get_AdvancedSettings4};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr AdvancedSettings3 = {read = get_AdvancedSettings3};
  __property   BSTR            ConnectedStatusText = {read = get_ConnectedStatusText, write = set_ConnectedStatusText};

  __property   long            ColorDepth = {read = get_ColorDepth, write = set_ColorDepth};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr AdvancedSettings2 = {read = get_AdvancedSettings2};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr SecuredSettings2 = {read = get_SecuredSettings2};
  __property   Mstsclib_tlb::ExtendedDisconnectReasonCode ExtendedDisconnectReason = {read = get_ExtendedDisconnectReason};
  __property   VARIANT_BOOL    FullScreen = {read = get_FullScreen, write = set_FullScreen};

  __property   BSTR            Server = {read = get_Server, write = set_Server};
  __property   BSTR            Domain = {read = get_Domain, write = set_Domain};
  __property   BSTR            UserName = {read = get_UserName, write = set_UserName};
  __property   BSTR            DisconnectedText = {read = get_DisconnectedText, write = set_DisconnectedText};
  __property   BSTR            ConnectingText = {read = get_ConnectingText, write = set_ConnectingText};
  __property   short           Connected = {read = get_Connected};
  __property   long            DesktopWidth = {read = get_DesktopWidth, write = set_DesktopWidth};
  __property   long            DesktopHeight = {read = get_DesktopHeight, write = set_DesktopHeight};
  __property   long            StartConnected = {read = get_StartConnected, write = set_StartConnected};
  __property   long            HorizontalScrollBarVisible = {read = get_HorizontalScrollBarVisible};
  __property   long            VerticalScrollBarVisible = {read = get_VerticalScrollBarVisible};
  __property   BSTR            FullScreenTitle = {write = set_FullScreenTitle};
  __property   long            CipherStrength = {read = get_CipherStrength};
  __property   BSTR            Version = {read = get_Version};
  __property   long            SecuredSettingsEnabled = {read = get_SecuredSettingsEnabled};
  __property   Mstsclib_tlb::IMsTscSecuredSettingsPtr SecuredSettings = {read = get_SecuredSettings};
  __property   Mstsclib_tlb::IMsTscAdvancedSettingsPtr AdvancedSettings = {read = get_AdvancedSettings};
  __property   Mstsclib_tlb::IMsTscDebugPtr Debugger = {read = get_Debugger};

};
typedef IMsRdpClient6DispT<IMsRdpClient6> IMsRdpClient6Disp;

typedef TComInterface<IMsRdpClientNonScriptable4>  TCOMIMsRdpClientNonScriptable4;

typedef TComInterface<IMsRdpClientAdvancedSettings6>  TCOMIMsRdpClientAdvancedSettings6;

// *********************************************************************//
// DispIntf:  IMsRdpClientAdvancedSettings6
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {222C4B5D-45D9-4DF0-A7C6-60CF9089D285}
// *********************************************************************//
template<class T>
class IMsRdpClientAdvancedSettings6DispT : public TAutoDriver<IMsRdpClientAdvancedSettings6>
{
public:
  IMsRdpClientAdvancedSettings6DispT(){}

  IMsRdpClientAdvancedSettings6DispT(IMsRdpClientAdvancedSettings6 *pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings6>::Bind(pintf, false);
  }

  IMsRdpClientAdvancedSettings6DispT(IMsRdpClientAdvancedSettings6Ptr pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings6>::Bind(pintf, true);
  }

  IMsRdpClientAdvancedSettings6DispT& operator=(IMsRdpClientAdvancedSettings6 *pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings6>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClientAdvancedSettings6DispT& operator=(IMsRdpClientAdvancedSettings6Ptr pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings6>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_RelativeMouseMode(VARIANT_BOOL pfRelativeMouseMode/*[in]*/);
  HRESULT         __fastcall get_RelativeMouseMode(VARIANT_BOOL* pfRelativeMouseMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RelativeMouseMode(void);
  HRESULT         __fastcall get_AuthenticationServiceClass(BSTR* pbstrAuthServiceClass/*[out,retval]*/);
  BSTR            __fastcall get_AuthenticationServiceClass(void);
  HRESULT         __fastcall set_AuthenticationServiceClass(BSTR pbstrAuthServiceClass/*[in]*/);
  HRESULT         __fastcall get_PCB(BSTR* bstrPCB/*[out,retval]*/);
  BSTR            __fastcall get_PCB(void);
  HRESULT         __fastcall set_PCB(BSTR bstrPCB/*[in]*/);
  HRESULT         __fastcall set_HotKeyFocusReleaseLeft(long HotKeyFocusReleaseLeft/*[in]*/);
  HRESULT         __fastcall get_HotKeyFocusReleaseLeft(long* HotKeyFocusReleaseLeft/*[out,retval]*/);
  long            __fastcall get_HotKeyFocusReleaseLeft(void);
  HRESULT         __fastcall set_HotKeyFocusReleaseRight(long HotKeyFocusReleaseRight/*[in]*/);
  HRESULT         __fastcall get_HotKeyFocusReleaseRight(long* HotKeyFocusReleaseRight/*[out,retval]*/);
  long            __fastcall get_HotKeyFocusReleaseRight(void);
  HRESULT         __fastcall set_EnableCredSspSupport(VARIANT_BOOL pfEnableSupport/*[in]*/);
  HRESULT         __fastcall get_EnableCredSspSupport(VARIANT_BOOL* pfEnableSupport/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableCredSspSupport(void);
  HRESULT         __fastcall get_AuthenticationType(unsigned* puiAuthType/*[out,retval]*/);
  unsigned        __fastcall get_AuthenticationType(void);
  HRESULT         __fastcall set_ConnectToAdministerServer(VARIANT_BOOL pConnectToAdministerServer/*[in]*/);
  HRESULT         __fastcall get_ConnectToAdministerServer(VARIANT_BOOL* pConnectToAdministerServer/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectToAdministerServer(void);
  HRESULT         __fastcall set_RedirectClipboard(VARIANT_BOOL pfRedirectClipboard/*[in]*/);
  HRESULT         __fastcall get_RedirectClipboard(VARIANT_BOOL* pfRedirectClipboard/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectClipboard(void);
  HRESULT         __fastcall set_AudioRedirectionMode(unsigned puiAudioRedirectionMode/*[in]*/);
  HRESULT         __fastcall get_AudioRedirectionMode(unsigned* puiAudioRedirectionMode/*[out,retval]*/);
  unsigned        __fastcall get_AudioRedirectionMode(void);
  HRESULT         __fastcall set_ConnectionBarShowPinButton(VARIANT_BOOL pfShowPin/*[in]*/);
  HRESULT         __fastcall get_ConnectionBarShowPinButton(VARIANT_BOOL* pfShowPin/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectionBarShowPinButton(void);
  HRESULT         __fastcall set_PublicMode(VARIANT_BOOL pfPublicMode/*[in]*/);
  HRESULT         __fastcall get_PublicMode(VARIANT_BOOL* pfPublicMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PublicMode(void);
  HRESULT         __fastcall set_RedirectDevices(VARIANT_BOOL pfRedirectPnPDevices/*[in]*/);
  HRESULT         __fastcall get_RedirectDevices(VARIANT_BOOL* pfRedirectPnPDevices/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectDevices(void);
  HRESULT         __fastcall set_RedirectPOSDevices(VARIANT_BOOL pfRedirectPOSDevices/*[in]*/);
  HRESULT         __fastcall get_RedirectPOSDevices(VARIANT_BOOL* pfRedirectPOSDevices/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPOSDevices(void);
  HRESULT         __fastcall set_BitmapVirtualCache32BppSize(long pBitmapVirtualCache32BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache32BppSize(long* pBitmapVirtualCache32BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache32BppSize(void);
  HRESULT         __fastcall set_AuthenticationLevel(unsigned puiAuthLevel/*[in]*/);
  HRESULT         __fastcall get_AuthenticationLevel(unsigned* puiAuthLevel/*[out,retval]*/);
  unsigned        __fastcall get_AuthenticationLevel(void);
  HRESULT         __fastcall set_ConnectionBarShowMinimizeButton(VARIANT_BOOL pfShowMinimize/*[in]*/);
  HRESULT         __fastcall get_ConnectionBarShowMinimizeButton(VARIANT_BOOL* pfShowMinimize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectionBarShowMinimizeButton(void);
  HRESULT         __fastcall set_ConnectionBarShowRestoreButton(VARIANT_BOOL pfShowRestore/*[in]*/);
  HRESULT         __fastcall get_ConnectionBarShowRestoreButton(VARIANT_BOOL* pfShowRestore/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectionBarShowRestoreButton(void);
  HRESULT         __fastcall get_CanAutoReconnect(VARIANT_BOOL* pfCanAutoReconnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanAutoReconnect(void);
  HRESULT         __fastcall set_EnableAutoReconnect(VARIANT_BOOL pfEnableAutoReconnect/*[in]*/);
  HRESULT         __fastcall get_EnableAutoReconnect(VARIANT_BOOL* pfEnableAutoReconnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableAutoReconnect(void);
  HRESULT         __fastcall set_MaxReconnectAttempts(long pMaxReconnectAttempts/*[in]*/);
  HRESULT         __fastcall get_MaxReconnectAttempts(long* pMaxReconnectAttempts/*[out,retval]*/);
  long            __fastcall get_MaxReconnectAttempts(void);
  HRESULT         __fastcall set_SmoothScroll(long psmoothScroll/*[in]*/);
  HRESULT         __fastcall get_SmoothScroll(long* psmoothScroll/*[out,retval]*/);
  long            __fastcall get_SmoothScroll(void);
  HRESULT         __fastcall set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/);
  HRESULT         __fastcall get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/);
  long            __fastcall get_AcceleratorPassthrough(void);
  HRESULT         __fastcall set_ShadowBitmap(long pshadowBitmap/*[in]*/);
  HRESULT         __fastcall get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/);
  long            __fastcall get_ShadowBitmap(void);
  HRESULT         __fastcall set_TransportType(long ptransportType/*[in]*/);
  HRESULT         __fastcall get_TransportType(long* ptransportType/*[out,retval]*/);
  long            __fastcall get_TransportType(void);
  HRESULT         __fastcall set_SasSequence(long psasSequence/*[in]*/);
  HRESULT         __fastcall get_SasSequence(long* psasSequence/*[out,retval]*/);
  long            __fastcall get_SasSequence(void);
  HRESULT         __fastcall set_EncryptionEnabled(long pencryptionEnabled/*[in]*/);
  HRESULT         __fastcall get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/);
  long            __fastcall get_EncryptionEnabled(void);
  HRESULT         __fastcall set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/);
  HRESULT         __fastcall get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/);
  long            __fastcall get_DedicatedTerminal(void);
  HRESULT         __fastcall set_RDPPort(long prdpPort/*[in]*/);
  HRESULT         __fastcall get_RDPPort(long* prdpPort/*[out,retval]*/);
  long            __fastcall get_RDPPort(void);
  HRESULT         __fastcall set_EnableMouse(long penableMouse/*[in]*/);
  HRESULT         __fastcall get_EnableMouse(long* penableMouse/*[out,retval]*/);
  long            __fastcall get_EnableMouse(void);
  HRESULT         __fastcall set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/);
  HRESULT         __fastcall get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/);
  long            __fastcall get_DisableCtrlAltDel(void);
  HRESULT         __fastcall set_EnableWindowsKey(long penableWindowsKey/*[in]*/);
  HRESULT         __fastcall get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/);
  long            __fastcall get_EnableWindowsKey(void);
  HRESULT         __fastcall set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/);
  HRESULT         __fastcall get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/);
  long            __fastcall get_DoubleClickDetect(void);
  HRESULT         __fastcall set_MaximizeShell(long pmaximizeShell/*[in]*/);
  HRESULT         __fastcall get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/);
  long            __fastcall get_MaximizeShell(void);
  HRESULT         __fastcall set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/);
  HRESULT         __fastcall get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/);
  long            __fastcall get_HotKeyFullScreen(void);
  HRESULT         __fastcall set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/);
  HRESULT         __fastcall get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/);
  long            __fastcall get_HotKeyCtrlEsc(void);
  HRESULT         __fastcall set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/);
  long            __fastcall get_HotKeyAltEsc(void);
  HRESULT         __fastcall set_HotKeyAltTab(long photKeyAltTab/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/);
  long            __fastcall get_HotKeyAltTab(void);
  HRESULT         __fastcall set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/);
  long            __fastcall get_HotKeyAltShiftTab(void);
  HRESULT         __fastcall set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/);
  long            __fastcall get_HotKeyAltSpace(void);
  HRESULT         __fastcall set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/);
  HRESULT         __fastcall get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/);
  long            __fastcall get_HotKeyCtrlAltDel(void);
  HRESULT         __fastcall set_orderDrawThreshold(long porderDrawThreshold/*[in]*/);
  HRESULT         __fastcall get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/);
  long            __fastcall get_orderDrawThreshold(void);
  HRESULT         __fastcall set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/);
  HRESULT         __fastcall get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/);
  long            __fastcall get_BitmapCacheSize(void);
  HRESULT         __fastcall set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCacheSize(void);
  HRESULT         __fastcall set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/);
  HRESULT         __fastcall get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/);
  long            __fastcall get_ScaleBitmapCachesByBPP(void);
  HRESULT         __fastcall set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/);
  HRESULT         __fastcall get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/);
  long            __fastcall get_NumBitmapCaches(void);
  HRESULT         __fastcall set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/);
  HRESULT         __fastcall get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/);
  long            __fastcall get_CachePersistenceActive(void);
  HRESULT         __fastcall set_PersistCacheDirectory(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_brushSupportLevel(long pbrushSupportLevel/*[in]*/);
  HRESULT         __fastcall get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/);
  long            __fastcall get_brushSupportLevel(void);
  HRESULT         __fastcall set_minInputSendInterval(long pminInputSendInterval/*[in]*/);
  HRESULT         __fastcall get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/);
  long            __fastcall get_minInputSendInterval(void);
  HRESULT         __fastcall set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/);
  HRESULT         __fastcall get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/);
  long            __fastcall get_InputEventsAtOnce(void);
  HRESULT         __fastcall set_maxEventCount(long pmaxEventCount/*[in]*/);
  HRESULT         __fastcall get_maxEventCount(long* pmaxEventCount/*[out,retval]*/);
  long            __fastcall get_maxEventCount(void);
  HRESULT         __fastcall set_keepAliveInterval(long pkeepAliveInterval/*[in]*/);
  HRESULT         __fastcall get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/);
  long            __fastcall get_keepAliveInterval(void);
  HRESULT         __fastcall set_shutdownTimeout(long pshutdownTimeout/*[in]*/);
  HRESULT         __fastcall get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/);
  long            __fastcall get_shutdownTimeout(void);
  HRESULT         __fastcall set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/);
  HRESULT         __fastcall get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/);
  long            __fastcall get_overallConnectionTimeout(void);
  HRESULT         __fastcall set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/);
  HRESULT         __fastcall get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/);
  long            __fastcall get_singleConnectionTimeout(void);
  HRESULT         __fastcall set_KeyboardType(long pkeyboardType/*[in]*/);
  HRESULT         __fastcall get_KeyboardType(long* pkeyboardType/*[out,retval]*/);
  long            __fastcall get_KeyboardType(void);
  HRESULT         __fastcall set_KeyboardSubType(long pkeyboardSubType/*[in]*/);
  HRESULT         __fastcall get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/);
  long            __fastcall get_KeyboardSubType(void);
  HRESULT         __fastcall set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/);
  HRESULT         __fastcall get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/);
  long            __fastcall get_KeyboardFunctionKey(void);
  HRESULT         __fastcall set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/);
  HRESULT         __fastcall get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/);
  long            __fastcall get_WinceFixedPalette(void);
  HRESULT         __fastcall set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/);
  HRESULT         __fastcall get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectToServerConsole(void);
  HRESULT         __fastcall set_BitmapPersistence(long pbitmapPersistence/*[in]*/);
  HRESULT         __fastcall get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/);
  long            __fastcall get_BitmapPersistence(void);
  HRESULT         __fastcall set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/);
  HRESULT         __fastcall get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/);
  long            __fastcall get_MinutesToIdleTimeout(void);
  HRESULT         __fastcall set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/);
  HRESULT         __fastcall get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SmartSizing(void);
  HRESULT         __fastcall set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/);
  HRESULT         __fastcall get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrLocalPrintingDocName(void);
  HRESULT         __fastcall set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/);
  HRESULT         __fastcall get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrClipCleanTempDirString(void);
  HRESULT         __fastcall set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/);
  HRESULT         __fastcall get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrClipPasteInfoString(void);
  HRESULT         __fastcall set_ClearTextPassword(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/);
  HRESULT         __fastcall get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayConnectionBar(void);
  HRESULT         __fastcall set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/);
  HRESULT         __fastcall get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PinConnectionBar(void);
  HRESULT         __fastcall set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/);
  HRESULT         __fastcall get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GrabFocusOnConnect(void);
  HRESULT         __fastcall set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/);
  HRESULT         __fastcall get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/);
  BSTR            __fastcall get_LoadBalanceInfo(void);
  HRESULT         __fastcall set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/);
  HRESULT         __fastcall get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectDrives(void);
  HRESULT         __fastcall set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/);
  HRESULT         __fastcall get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPrinters(void);
  HRESULT         __fastcall set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/);
  HRESULT         __fastcall get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPorts(void);
  HRESULT         __fastcall set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/);
  HRESULT         __fastcall get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectSmartCards(void);
  HRESULT         __fastcall set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache16BppSize(void);
  HRESULT         __fastcall set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache24BppSize(void);
  HRESULT         __fastcall set_PerformanceFlags(long pDisableList/*[in]*/);
  HRESULT         __fastcall get_PerformanceFlags(long* pDisableList/*[out,retval]*/);
  long            __fastcall get_PerformanceFlags(void);
  HRESULT         __fastcall set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/);
  HRESULT         __fastcall set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/);
  HRESULT         __fastcall get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NotifyTSPublicKey(void);
  HRESULT         __fastcall set_Compress(long pcompress/*[in]*/);
  HRESULT         __fastcall get_Compress(long* pcompress/*[out,retval]*/);
  long            __fastcall get_Compress(void);
  HRESULT         __fastcall set_BitmapPeristence(long pbitmapPeristence/*[in]*/);
  HRESULT         __fastcall get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/);
  long            __fastcall get_BitmapPeristence(void);
  HRESULT         __fastcall set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/);
  HRESULT         __fastcall get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/);
  long            __fastcall get_allowBackgroundInput(void);
  HRESULT         __fastcall set_KeyBoardLayoutStr(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_PluginDlls(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconFile(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconIndex(long Param1/*[in]*/);
  HRESULT         __fastcall set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/);
  HRESULT         __fastcall get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/);
  long            __fastcall get_ContainerHandledFullScreen(void);
  HRESULT         __fastcall set_DisableRdpdr(long pDisableRdpdr/*[in]*/);
  HRESULT         __fastcall get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/);
  long            __fastcall get_DisableRdpdr(void);

  __property   VARIANT_BOOL    RelativeMouseMode = {read = get_RelativeMouseMode, write = set_RelativeMouseMode};
  __property   BSTR            AuthenticationServiceClass = {read = get_AuthenticationServiceClass, write = set_AuthenticationServiceClass};
  __property   BSTR            PCB = {read = get_PCB, write = set_PCB};
  __property   long            HotKeyFocusReleaseLeft = {read = get_HotKeyFocusReleaseLeft, write = set_HotKeyFocusReleaseLeft};
  __property   long            HotKeyFocusReleaseRight = {read = get_HotKeyFocusReleaseRight, write = set_HotKeyFocusReleaseRight};
  __property   VARIANT_BOOL    EnableCredSspSupport = {read = get_EnableCredSspSupport, write = set_EnableCredSspSupport};
  __property   unsigned        AuthenticationType = {read = get_AuthenticationType};
  __property   VARIANT_BOOL    ConnectToAdministerServer = {read = get_ConnectToAdministerServer, write = set_ConnectToAdministerServer};

  __property   VARIANT_BOOL    RedirectClipboard = {read = get_RedirectClipboard, write = set_RedirectClipboard};
  __property   unsigned        AudioRedirectionMode = {read = get_AudioRedirectionMode, write = set_AudioRedirectionMode};
  __property   VARIANT_BOOL    ConnectionBarShowPinButton = {read = get_ConnectionBarShowPinButton, write = set_ConnectionBarShowPinButton};
  __property   VARIANT_BOOL    PublicMode = {read = get_PublicMode, write = set_PublicMode};
  __property   VARIANT_BOOL    RedirectDevices = {read = get_RedirectDevices, write = set_RedirectDevices};
  __property   VARIANT_BOOL    RedirectPOSDevices = {read = get_RedirectPOSDevices, write = set_RedirectPOSDevices};
  __property   long            BitmapVirtualCache32BppSize = {read = get_BitmapVirtualCache32BppSize, write = set_BitmapVirtualCache32BppSize};

  __property   unsigned        AuthenticationLevel = {read = get_AuthenticationLevel, write = set_AuthenticationLevel};

  __property   VARIANT_BOOL    ConnectionBarShowMinimizeButton = {read = get_ConnectionBarShowMinimizeButton, write = set_ConnectionBarShowMinimizeButton};
  __property   VARIANT_BOOL    ConnectionBarShowRestoreButton = {read = get_ConnectionBarShowRestoreButton, write = set_ConnectionBarShowRestoreButton};

  __property   VARIANT_BOOL    CanAutoReconnect = {read = get_CanAutoReconnect};
  __property   VARIANT_BOOL    EnableAutoReconnect = {read = get_EnableAutoReconnect, write = set_EnableAutoReconnect};
  __property   long            MaxReconnectAttempts = {read = get_MaxReconnectAttempts, write = set_MaxReconnectAttempts};

  __property   long            SmoothScroll = {read = get_SmoothScroll, write = set_SmoothScroll};
  __property   long            AcceleratorPassthrough = {read = get_AcceleratorPassthrough, write = set_AcceleratorPassthrough};
  __property   long            ShadowBitmap = {read = get_ShadowBitmap, write = set_ShadowBitmap};
  __property   long            TransportType = {read = get_TransportType, write = set_TransportType};
  __property   long            SasSequence = {read = get_SasSequence, write = set_SasSequence};
  __property   long            EncryptionEnabled = {read = get_EncryptionEnabled, write = set_EncryptionEnabled};
  __property   long            DedicatedTerminal = {read = get_DedicatedTerminal, write = set_DedicatedTerminal};
  __property   long            RDPPort = {read = get_RDPPort, write = set_RDPPort};
  __property   long            EnableMouse = {read = get_EnableMouse, write = set_EnableMouse};
  __property   long            DisableCtrlAltDel = {read = get_DisableCtrlAltDel, write = set_DisableCtrlAltDel};
  __property   long            EnableWindowsKey = {read = get_EnableWindowsKey, write = set_EnableWindowsKey};
  __property   long            DoubleClickDetect = {read = get_DoubleClickDetect, write = set_DoubleClickDetect};
  __property   long            MaximizeShell = {read = get_MaximizeShell, write = set_MaximizeShell};
  __property   long            HotKeyFullScreen = {read = get_HotKeyFullScreen, write = set_HotKeyFullScreen};
  __property   long            HotKeyCtrlEsc = {read = get_HotKeyCtrlEsc, write = set_HotKeyCtrlEsc};
  __property   long            HotKeyAltEsc = {read = get_HotKeyAltEsc, write = set_HotKeyAltEsc};
  __property   long            HotKeyAltTab = {read = get_HotKeyAltTab, write = set_HotKeyAltTab};
  __property   long            HotKeyAltShiftTab = {read = get_HotKeyAltShiftTab, write = set_HotKeyAltShiftTab};
  __property   long            HotKeyAltSpace = {read = get_HotKeyAltSpace, write = set_HotKeyAltSpace};
  __property   long            HotKeyCtrlAltDel = {read = get_HotKeyCtrlAltDel, write = set_HotKeyCtrlAltDel};
  __property   long            orderDrawThreshold = {read = get_orderDrawThreshold, write = set_orderDrawThreshold};
  __property   long            BitmapCacheSize = {read = get_BitmapCacheSize, write = set_BitmapCacheSize};
  __property   long            BitmapVirtualCacheSize = {read = get_BitmapVirtualCacheSize, write = set_BitmapVirtualCacheSize};
  __property   long            ScaleBitmapCachesByBPP = {read = get_ScaleBitmapCachesByBPP, write = set_ScaleBitmapCachesByBPP};
  __property   long            NumBitmapCaches = {read = get_NumBitmapCaches, write = set_NumBitmapCaches};
  __property   long            CachePersistenceActive = {read = get_CachePersistenceActive, write = set_CachePersistenceActive};
  __property   BSTR            PersistCacheDirectory = {write = set_PersistCacheDirectory};
  __property   long            brushSupportLevel = {read = get_brushSupportLevel, write = set_brushSupportLevel};
  __property   long            minInputSendInterval = {read = get_minInputSendInterval, write = set_minInputSendInterval};
  __property   long            InputEventsAtOnce = {read = get_InputEventsAtOnce, write = set_InputEventsAtOnce};
  __property   long            maxEventCount = {read = get_maxEventCount, write = set_maxEventCount};
  __property   long            keepAliveInterval = {read = get_keepAliveInterval, write = set_keepAliveInterval};
  __property   long            shutdownTimeout = {read = get_shutdownTimeout, write = set_shutdownTimeout};
  __property   long            overallConnectionTimeout = {read = get_overallConnectionTimeout, write = set_overallConnectionTimeout};
  __property   long            singleConnectionTimeout = {read = get_singleConnectionTimeout, write = set_singleConnectionTimeout};
  __property   long            KeyboardType = {read = get_KeyboardType, write = set_KeyboardType};
  __property   long            KeyboardSubType = {read = get_KeyboardSubType, write = set_KeyboardSubType};
  __property   long            KeyboardFunctionKey = {read = get_KeyboardFunctionKey, write = set_KeyboardFunctionKey};
  __property   long            WinceFixedPalette = {read = get_WinceFixedPalette, write = set_WinceFixedPalette};
  __property   VARIANT_BOOL    ConnectToServerConsole = {read = get_ConnectToServerConsole, write = set_ConnectToServerConsole};
  __property   long            BitmapPersistence = {read = get_BitmapPersistence, write = set_BitmapPersistence};
  __property   long            MinutesToIdleTimeout = {read = get_MinutesToIdleTimeout, write = set_MinutesToIdleTimeout};
  __property   VARIANT_BOOL    SmartSizing = {read = get_SmartSizing, write = set_SmartSizing};
  __property   BSTR            RdpdrLocalPrintingDocName = {read = get_RdpdrLocalPrintingDocName, write = set_RdpdrLocalPrintingDocName};
  __property   BSTR            RdpdrClipCleanTempDirString = {read = get_RdpdrClipCleanTempDirString, write = set_RdpdrClipCleanTempDirString};
  __property   BSTR            RdpdrClipPasteInfoString = {read = get_RdpdrClipPasteInfoString, write = set_RdpdrClipPasteInfoString};
  __property   BSTR            ClearTextPassword = {write = set_ClearTextPassword};
  __property   VARIANT_BOOL    DisplayConnectionBar = {read = get_DisplayConnectionBar, write = set_DisplayConnectionBar};
  __property   VARIANT_BOOL    PinConnectionBar = {read = get_PinConnectionBar, write = set_PinConnectionBar};
  __property   VARIANT_BOOL    GrabFocusOnConnect = {read = get_GrabFocusOnConnect, write = set_GrabFocusOnConnect};
  __property   BSTR            LoadBalanceInfo = {read = get_LoadBalanceInfo, write = set_LoadBalanceInfo};
  __property   VARIANT_BOOL    RedirectDrives = {read = get_RedirectDrives, write = set_RedirectDrives};
  __property   VARIANT_BOOL    RedirectPrinters = {read = get_RedirectPrinters, write = set_RedirectPrinters};
  __property   VARIANT_BOOL    RedirectPorts = {read = get_RedirectPorts, write = set_RedirectPorts};
  __property   VARIANT_BOOL    RedirectSmartCards = {read = get_RedirectSmartCards, write = set_RedirectSmartCards};
  __property   long            BitmapVirtualCache16BppSize = {read = get_BitmapVirtualCache16BppSize, write = set_BitmapVirtualCache16BppSize};
  __property   long            BitmapVirtualCache24BppSize = {read = get_BitmapVirtualCache24BppSize, write = set_BitmapVirtualCache24BppSize};
  __property   long            PerformanceFlags = {read = get_PerformanceFlags, write = set_PerformanceFlags};
  __property   VARIANT_BOOL    NotifyTSPublicKey = {read = get_NotifyTSPublicKey, write = set_NotifyTSPublicKey};

  __property   long            Compress = {read = get_Compress, write = set_Compress};
  __property   long            BitmapPeristence = {read = get_BitmapPeristence, write = set_BitmapPeristence};
  __property   long            allowBackgroundInput = {read = get_allowBackgroundInput, write = set_allowBackgroundInput};
  __property   BSTR            KeyBoardLayoutStr = {write = set_KeyBoardLayoutStr};
  __property   BSTR            PluginDlls = {write = set_PluginDlls};
  __property   BSTR            IconFile = {write = set_IconFile};
  __property   long            IconIndex = {write = set_IconIndex};
  __property   long            ContainerHandledFullScreen = {read = get_ContainerHandledFullScreen, write = set_ContainerHandledFullScreen};
  __property   long            DisableRdpdr = {read = get_DisableRdpdr, write = set_DisableRdpdr};
};
typedef IMsRdpClientAdvancedSettings6DispT<IMsRdpClientAdvancedSettings6> IMsRdpClientAdvancedSettings6Disp;

typedef TComInterface<IMsRdpClientTransportSettings2>  TCOMIMsRdpClientTransportSettings2;

// *********************************************************************//
// DispIntf:  IMsRdpClientTransportSettings2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {67341688-D606-4C73-A5D2-2E0489009319}
// *********************************************************************//
template<class T>
class IMsRdpClientTransportSettings2DispT : public TAutoDriver<IMsRdpClientTransportSettings2>
{
public:
  IMsRdpClientTransportSettings2DispT(){}

  IMsRdpClientTransportSettings2DispT(IMsRdpClientTransportSettings2 *pintf)
  {
    TAutoDriver<IMsRdpClientTransportSettings2>::Bind(pintf, false);
  }

  IMsRdpClientTransportSettings2DispT(IMsRdpClientTransportSettings2Ptr pintf)
  {
    TAutoDriver<IMsRdpClientTransportSettings2>::Bind(pintf, true);
  }

  IMsRdpClientTransportSettings2DispT& operator=(IMsRdpClientTransportSettings2 *pintf)
  {
    TAutoDriver<IMsRdpClientTransportSettings2>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClientTransportSettings2DispT& operator=(IMsRdpClientTransportSettings2Ptr pintf)
  {
    TAutoDriver<IMsRdpClientTransportSettings2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_GatewayCredSharing(unsigned_long pulProxyCredSharing/*[in]*/);
  HRESULT         __fastcall get_GatewayCredSharing(unsigned_long* pulProxyCredSharing/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayCredSharing(void);
  HRESULT         __fastcall set_GatewayPreAuthRequirement(unsigned_long pulProxyPreAuthRequirement/*[in]*/);
  HRESULT         __fastcall get_GatewayPreAuthRequirement(unsigned_long* pulProxyPreAuthRequirement/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayPreAuthRequirement(void);
  HRESULT         __fastcall set_GatewayPreAuthServerAddr(BSTR pbstrProxyPreAuthServerAddr/*[in]*/);
  HRESULT         __fastcall get_GatewayPreAuthServerAddr(BSTR* pbstrProxyPreAuthServerAddr/*[out,retval]*/);
  BSTR            __fastcall get_GatewayPreAuthServerAddr(void);
  HRESULT         __fastcall set_GatewaySupportUrl(BSTR pbstrProxySupportUrl/*[in]*/);
  HRESULT         __fastcall get_GatewaySupportUrl(BSTR* pbstrProxySupportUrl/*[out,retval]*/);
  BSTR            __fastcall get_GatewaySupportUrl(void);
  HRESULT         __fastcall set_GatewayEncryptedOtpCookie(BSTR pbstrEncryptedOtpCookie/*[in]*/);
  HRESULT         __fastcall get_GatewayEncryptedOtpCookie(BSTR* pbstrEncryptedOtpCookie/*[out,retval]*/);
  BSTR            __fastcall get_GatewayEncryptedOtpCookie(void);
  HRESULT         __fastcall set_GatewayEncryptedOtpCookieSize(unsigned_long pulEncryptedOtpCookieSize/*[in]*/);
  HRESULT         __fastcall get_GatewayEncryptedOtpCookieSize(unsigned_long* pulEncryptedOtpCookieSize/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayEncryptedOtpCookieSize(void);
  HRESULT         __fastcall set_GatewayUsername(BSTR pProxyUsername/*[in]*/);
  HRESULT         __fastcall get_GatewayUsername(BSTR* pProxyUsername/*[out,retval]*/);
  BSTR            __fastcall get_GatewayUsername(void);
  HRESULT         __fastcall set_GatewayDomain(BSTR pProxyDomain/*[in]*/);
  HRESULT         __fastcall get_GatewayDomain(BSTR* pProxyDomain/*[out,retval]*/);
  BSTR            __fastcall get_GatewayDomain(void);
  HRESULT         __fastcall set_GatewayPassword(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_GatewayHostname(BSTR pProxyHostname/*[in]*/);
  HRESULT         __fastcall get_GatewayHostname(BSTR* pProxyHostname/*[out,retval]*/);
  BSTR            __fastcall get_GatewayHostname(void);
  HRESULT         __fastcall set_GatewayUsageMethod(unsigned_long pulProxyUsageMethod/*[in]*/);
  HRESULT         __fastcall get_GatewayUsageMethod(unsigned_long* pulProxyUsageMethod/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayUsageMethod(void);
  HRESULT         __fastcall set_GatewayProfileUsageMethod(unsigned_long pulProxyProfileUsageMethod/*[in]*/);
  HRESULT         __fastcall get_GatewayProfileUsageMethod(unsigned_long* pulProxyProfileUsageMethod/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayProfileUsageMethod(void);
  HRESULT         __fastcall set_GatewayCredsSource(unsigned_long pulProxyCredsSource/*[in]*/);
  HRESULT         __fastcall get_GatewayCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayCredsSource(void);
  HRESULT         __fastcall set_GatewayUserSelectedCredsSource(unsigned_long pulProxyCredsSource/*[in]*/);
  HRESULT         __fastcall get_GatewayUserSelectedCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayUserSelectedCredsSource(void);
  HRESULT         __fastcall get_GatewayIsSupported(long* pfProxyIsSupported/*[out,retval]*/);
  long            __fastcall get_GatewayIsSupported(void);
  HRESULT         __fastcall get_GatewayDefaultUsageMethod(unsigned_long* pulProxyDefaultUsageMethod/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayDefaultUsageMethod(void);

  __property   unsigned_long   GatewayCredSharing = {read = get_GatewayCredSharing, write = set_GatewayCredSharing};
  __property   unsigned_long   GatewayPreAuthRequirement = {read = get_GatewayPreAuthRequirement, write = set_GatewayPreAuthRequirement};
  __property   BSTR            GatewayPreAuthServerAddr = {read = get_GatewayPreAuthServerAddr, write = set_GatewayPreAuthServerAddr};
  __property   BSTR            GatewaySupportUrl = {read = get_GatewaySupportUrl, write = set_GatewaySupportUrl};
  __property   BSTR            GatewayEncryptedOtpCookie = {read = get_GatewayEncryptedOtpCookie, write = set_GatewayEncryptedOtpCookie};
  __property   unsigned_long   GatewayEncryptedOtpCookieSize = {read = get_GatewayEncryptedOtpCookieSize, write = set_GatewayEncryptedOtpCookieSize};
  __property   BSTR            GatewayUsername = {read = get_GatewayUsername, write = set_GatewayUsername};
  __property   BSTR            GatewayDomain = {read = get_GatewayDomain, write = set_GatewayDomain};
  __property   BSTR            GatewayPassword = {write = set_GatewayPassword};

  __property   BSTR            GatewayHostname = {read = get_GatewayHostname, write = set_GatewayHostname};
  __property   unsigned_long   GatewayUsageMethod = {read = get_GatewayUsageMethod, write = set_GatewayUsageMethod};
  __property   unsigned_long   GatewayProfileUsageMethod = {read = get_GatewayProfileUsageMethod, write = set_GatewayProfileUsageMethod};
  __property   unsigned_long   GatewayCredsSource = {read = get_GatewayCredsSource, write = set_GatewayCredsSource};
  __property   unsigned_long   GatewayUserSelectedCredsSource = {read = get_GatewayUserSelectedCredsSource, write = set_GatewayUserSelectedCredsSource};
  __property   long            GatewayIsSupported = {read = get_GatewayIsSupported};
  __property   unsigned_long   GatewayDefaultUsageMethod = {read = get_GatewayDefaultUsageMethod};
};
typedef IMsRdpClientTransportSettings2DispT<IMsRdpClientTransportSettings2> IMsRdpClientTransportSettings2Disp;

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient7
// Interface: IMsRdpClient7
// *********************************************************************//
template <class T /* IMsRdpClient7 */ >
class TCOMIMsRdpClient7T : public TComInterface<IMsRdpClient7>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMsRdpClient7T() {}
  TCOMIMsRdpClient7T(IMsRdpClient7 *intf, bool addRef = false) : TComInterface<IMsRdpClient7>(intf, addRef) {}
  TCOMIMsRdpClient7T(const TCOMIMsRdpClient7T& src) : TComInterface<IMsRdpClient7>(src) {}
  TCOMIMsRdpClient7T& operator=(const TCOMIMsRdpClient7T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_AdvancedSettings8(Mstsclib_tlb::IMsRdpClientAdvancedSettings7** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr __fastcall get_AdvancedSettings8(void);
  HRESULT         __fastcall get_TransportSettings3(Mstsclib_tlb::IMsRdpClientTransportSettings3** ppXportSet3/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr __fastcall get_TransportSettings3(void);
  HRESULT         __fastcall GetStatusText(unsigned statusCode/*[in]*/, 
                                           BSTR* pBstrStatusText/*[out,retval]*/);
  BSTR            __fastcall GetStatusText(unsigned statusCode/*[in]*/);
  HRESULT         __fastcall get_SecuredSettings3(Mstsclib_tlb::IMsRdpClientSecuredSettings2** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr __fastcall get_SecuredSettings3(void);
  HRESULT         __fastcall get_RemoteProgram2(Mstsclib_tlb::ITSRemoteProgram2** ppRemoteProgram/*[out,retval]*/);
  Mstsclib_tlb::ITSRemoteProgram2Ptr __fastcall get_RemoteProgram2(void);

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr AdvancedSettings8 = {read = get_AdvancedSettings8};
  __property   Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr TransportSettings3 = {read = get_TransportSettings3};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr SecuredSettings3 = {read = get_SecuredSettings3};
  __property   Mstsclib_tlb::ITSRemoteProgram2Ptr RemoteProgram2 = {read = get_RemoteProgram2};
};
typedef TCOMIMsRdpClient7T<IMsRdpClient7> TCOMIMsRdpClient7;

// *********************************************************************//
// DispIntf:  IMsRdpClient7
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B2A5B5CE-3461-444A-91D4-ADD26D070638}
// *********************************************************************//
template<class T>
class IMsRdpClient7DispT : public TAutoDriver<IMsRdpClient7>
{
public:
  IMsRdpClient7DispT(){}

  IMsRdpClient7DispT(IMsRdpClient7 *pintf)
  {
    TAutoDriver<IMsRdpClient7>::Bind(pintf, false);
  }

  IMsRdpClient7DispT(IMsRdpClient7Ptr pintf)
  {
    TAutoDriver<IMsRdpClient7>::Bind(pintf, true);
  }

  IMsRdpClient7DispT& operator=(IMsRdpClient7 *pintf)
  {
    TAutoDriver<IMsRdpClient7>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClient7DispT& operator=(IMsRdpClient7Ptr pintf)
  {
    TAutoDriver<IMsRdpClient7>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MsRdpClient7NotSafeForScripting));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MsRdpClient7NotSafeForScripting);
  }

  HRESULT         __fastcall get_AdvancedSettings8(Mstsclib_tlb::IMsRdpClientAdvancedSettings7** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr __fastcall get_AdvancedSettings8(void);
  HRESULT         __fastcall get_TransportSettings3(Mstsclib_tlb::IMsRdpClientTransportSettings3** ppXportSet3/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr __fastcall get_TransportSettings3(void);
  HRESULT         __fastcall GetStatusText(unsigned statusCode/*[in]*/, 
                                           BSTR* pBstrStatusText/*[out,retval]*/);
  BSTR            __fastcall GetStatusText(unsigned statusCode/*[in]*/);
  HRESULT         __fastcall get_SecuredSettings3(Mstsclib_tlb::IMsRdpClientSecuredSettings2** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr __fastcall get_SecuredSettings3(void);
  HRESULT         __fastcall get_RemoteProgram2(Mstsclib_tlb::ITSRemoteProgram2** ppRemoteProgram/*[out,retval]*/);
  Mstsclib_tlb::ITSRemoteProgram2Ptr __fastcall get_RemoteProgram2(void);
  HRESULT         __fastcall get_AdvancedSettings7(Mstsclib_tlb::IMsRdpClientAdvancedSettings6** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr __fastcall get_AdvancedSettings7(void);
  HRESULT         __fastcall get_TransportSettings2(Mstsclib_tlb::IMsRdpClientTransportSettings2** ppXportSet2/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr __fastcall get_TransportSettings2(void);
  HRESULT         __fastcall get_TransportSettings(Mstsclib_tlb::IMsRdpClientTransportSettings** ppXportSet/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettingsPtr __fastcall get_TransportSettings(void);
  HRESULT         __fastcall get_AdvancedSettings6(Mstsclib_tlb::IMsRdpClientAdvancedSettings5** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr __fastcall get_AdvancedSettings6(void);
  HRESULT         __fastcall GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                                 unsigned ExtendedDisconnectReason/*[in]*/, 
                                                 BSTR* pBstrErrorMsg/*[out,retval]*/);
  BSTR            __fastcall GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                                 unsigned ExtendedDisconnectReason/*[in]*/);
  HRESULT         __fastcall get_RemoteProgram(Mstsclib_tlb::ITSRemoteProgram** ppRemoteProgram/*[out,retval]*/);
  Mstsclib_tlb::ITSRemoteProgramPtr __fastcall get_RemoteProgram(void);
  HRESULT         __fastcall get_MsRdpClientShell(Mstsclib_tlb::IMsRdpClientShell** ppLauncher/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientShellPtr __fastcall get_MsRdpClientShell(void);
  HRESULT         __fastcall get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall get_AdvancedSettings5(void);
  HRESULT         __fastcall get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall get_AdvancedSettings4(void);
  HRESULT         __fastcall get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall get_AdvancedSettings3(void);
  HRESULT         __fastcall set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/);
  HRESULT         __fastcall get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectedStatusText(void);
  HRESULT         __fastcall set_ColorDepth(long pcolorDepth/*[in]*/);
  HRESULT         __fastcall get_ColorDepth(long* pcolorDepth/*[out,retval]*/);
  long            __fastcall get_ColorDepth(void);
  HRESULT         __fastcall get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall get_AdvancedSettings2(void);
  HRESULT         __fastcall get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall get_SecuredSettings2(void);
  HRESULT         __fastcall get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/);
  Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall get_ExtendedDisconnectReason(void);
  HRESULT         __fastcall set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/);
  HRESULT         __fastcall get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullScreen(void);
  HRESULT         __fastcall SetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long chanOptions/*[in]*/);
  HRESULT         __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long* pChanOptions/*[out,retval]*/);
  long            __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/);
  HRESULT         __fastcall RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/);
  Mstsclib_tlb::ControlCloseStatus __fastcall RequestClose(void);
  HRESULT         __fastcall set_Server(BSTR pServer/*[in]*/);
  HRESULT         __fastcall get_Server(BSTR* pServer/*[out,retval]*/);
  BSTR            __fastcall get_Server(void);
  HRESULT         __fastcall set_Domain(BSTR pDomain/*[in]*/);
  HRESULT         __fastcall get_Domain(BSTR* pDomain/*[out,retval]*/);
  BSTR            __fastcall get_Domain(void);
  HRESULT         __fastcall set_UserName(BSTR pUserName/*[in]*/);
  HRESULT         __fastcall get_UserName(BSTR* pUserName/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall set_DisconnectedText(BSTR pDisconnectedText/*[in]*/);
  HRESULT         __fastcall get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/);
  BSTR            __fastcall get_DisconnectedText(void);
  HRESULT         __fastcall set_ConnectingText(BSTR pConnectingText/*[in]*/);
  HRESULT         __fastcall get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectingText(void);
  HRESULT         __fastcall get_Connected(short* pIsConnected/*[out,retval]*/);
  short           __fastcall get_Connected(void);
  HRESULT         __fastcall set_DesktopWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopWidth(void);
  HRESULT         __fastcall set_DesktopHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopHeight(void);
  HRESULT         __fastcall set_StartConnected(long pfStartConnected/*[in]*/);
  HRESULT         __fastcall get_StartConnected(long* pfStartConnected/*[out,retval]*/);
  long            __fastcall get_StartConnected(void);
  HRESULT         __fastcall get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/);
  long            __fastcall get_HorizontalScrollBarVisible(void);
  HRESULT         __fastcall get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/);
  long            __fastcall get_VerticalScrollBarVisible(void);
  HRESULT         __fastcall set_FullScreenTitle(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_CipherStrength(long* pCipherStrength/*[out,retval]*/);
  long            __fastcall get_CipherStrength(void);
  HRESULT         __fastcall get_Version(BSTR* pVersion/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/);
  long            __fastcall get_SecuredSettingsEnabled(void);
  HRESULT         __fastcall get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall get_SecuredSettings(void);
  HRESULT         __fastcall get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall get_AdvancedSettings(void);
  HRESULT         __fastcall get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/);
  Mstsclib_tlb::IMsTscDebugPtr __fastcall get_Debugger(void);
  HRESULT         __fastcall Connect();
  HRESULT         __fastcall Disconnect();
  HRESULT         __fastcall CreateVirtualChannels(BSTR newVal/*[in]*/);
  HRESULT         __fastcall SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/);

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr AdvancedSettings8 = {read = get_AdvancedSettings8};
  __property   Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr TransportSettings3 = {read = get_TransportSettings3};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr SecuredSettings3 = {read = get_SecuredSettings3};
  __property   Mstsclib_tlb::ITSRemoteProgram2Ptr RemoteProgram2 = {read = get_RemoteProgram2};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr AdvancedSettings7 = {read = get_AdvancedSettings7};
  __property   Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr TransportSettings2 = {read = get_TransportSettings2};

  __property   Mstsclib_tlb::IMsRdpClientTransportSettingsPtr TransportSettings = {read = get_TransportSettings};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr AdvancedSettings6 = {read = get_AdvancedSettings6};
  __property   Mstsclib_tlb::ITSRemoteProgramPtr RemoteProgram = {read = get_RemoteProgram};
  __property   Mstsclib_tlb::IMsRdpClientShellPtr MsRdpClientShell = {read = get_MsRdpClientShell};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr AdvancedSettings5 = {read = get_AdvancedSettings5};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr AdvancedSettings4 = {read = get_AdvancedSettings4};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr AdvancedSettings3 = {read = get_AdvancedSettings3};
  __property   BSTR            ConnectedStatusText = {read = get_ConnectedStatusText, write = set_ConnectedStatusText};

  __property   long            ColorDepth = {read = get_ColorDepth, write = set_ColorDepth};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr AdvancedSettings2 = {read = get_AdvancedSettings2};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr SecuredSettings2 = {read = get_SecuredSettings2};
  __property   Mstsclib_tlb::ExtendedDisconnectReasonCode ExtendedDisconnectReason = {read = get_ExtendedDisconnectReason};
  __property   VARIANT_BOOL    FullScreen = {read = get_FullScreen, write = set_FullScreen};

  __property   BSTR            Server = {read = get_Server, write = set_Server};
  __property   BSTR            Domain = {read = get_Domain, write = set_Domain};
  __property   BSTR            UserName = {read = get_UserName, write = set_UserName};
  __property   BSTR            DisconnectedText = {read = get_DisconnectedText, write = set_DisconnectedText};
  __property   BSTR            ConnectingText = {read = get_ConnectingText, write = set_ConnectingText};
  __property   short           Connected = {read = get_Connected};
  __property   long            DesktopWidth = {read = get_DesktopWidth, write = set_DesktopWidth};
  __property   long            DesktopHeight = {read = get_DesktopHeight, write = set_DesktopHeight};
  __property   long            StartConnected = {read = get_StartConnected, write = set_StartConnected};
  __property   long            HorizontalScrollBarVisible = {read = get_HorizontalScrollBarVisible};
  __property   long            VerticalScrollBarVisible = {read = get_VerticalScrollBarVisible};
  __property   BSTR            FullScreenTitle = {write = set_FullScreenTitle};
  __property   long            CipherStrength = {read = get_CipherStrength};
  __property   BSTR            Version = {read = get_Version};
  __property   long            SecuredSettingsEnabled = {read = get_SecuredSettingsEnabled};
  __property   Mstsclib_tlb::IMsTscSecuredSettingsPtr SecuredSettings = {read = get_SecuredSettings};
  __property   Mstsclib_tlb::IMsTscAdvancedSettingsPtr AdvancedSettings = {read = get_AdvancedSettings};
  __property   Mstsclib_tlb::IMsTscDebugPtr Debugger = {read = get_Debugger};

};
typedef IMsRdpClient7DispT<IMsRdpClient7> IMsRdpClient7Disp;

typedef TComInterface<IMsRdpClientNonScriptable5>  TCOMIMsRdpClientNonScriptable5;

typedef TComInterface<IMsRdpClientAdvancedSettings7>  TCOMIMsRdpClientAdvancedSettings7;

// *********************************************************************//
// DispIntf:  IMsRdpClientAdvancedSettings7
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {26036036-4010-4578-8091-0DB9A1EDF9C3}
// *********************************************************************//
template<class T>
class IMsRdpClientAdvancedSettings7DispT : public TAutoDriver<IMsRdpClientAdvancedSettings7>
{
public:
  IMsRdpClientAdvancedSettings7DispT(){}

  IMsRdpClientAdvancedSettings7DispT(IMsRdpClientAdvancedSettings7 *pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings7>::Bind(pintf, false);
  }

  IMsRdpClientAdvancedSettings7DispT(IMsRdpClientAdvancedSettings7Ptr pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings7>::Bind(pintf, true);
  }

  IMsRdpClientAdvancedSettings7DispT& operator=(IMsRdpClientAdvancedSettings7 *pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings7>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClientAdvancedSettings7DispT& operator=(IMsRdpClientAdvancedSettings7Ptr pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings7>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_AudioCaptureRedirectionMode(VARIANT_BOOL pfRedir/*[in]*/);
  HRESULT         __fastcall get_AudioCaptureRedirectionMode(VARIANT_BOOL* pfRedir/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AudioCaptureRedirectionMode(void);
  HRESULT         __fastcall set_VideoPlaybackMode(unsigned pVideoPlaybackMode/*[in]*/);
  HRESULT         __fastcall get_VideoPlaybackMode(unsigned* pVideoPlaybackMode/*[out,retval]*/);
  unsigned        __fastcall get_VideoPlaybackMode(void);
  HRESULT         __fastcall set_EnableSuperPan(VARIANT_BOOL pfEnableSuperPan/*[in]*/);
  HRESULT         __fastcall get_EnableSuperPan(VARIANT_BOOL* pfEnableSuperPan/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableSuperPan(void);
  HRESULT         __fastcall set_SuperPanAccelerationFactor(unsigned_long puAccelFactor/*[in]*/);
  HRESULT         __fastcall get_SuperPanAccelerationFactor(unsigned_long* puAccelFactor/*[out,retval]*/);
  unsigned_long   __fastcall get_SuperPanAccelerationFactor(void);
  HRESULT         __fastcall set_NegotiateSecurityLayer(VARIANT_BOOL pfNegotiate/*[in]*/);
  HRESULT         __fastcall get_NegotiateSecurityLayer(VARIANT_BOOL* pfNegotiate/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NegotiateSecurityLayer(void);
  HRESULT         __fastcall set_AudioQualityMode(unsigned pAudioQualityMode/*[in]*/);
  HRESULT         __fastcall get_AudioQualityMode(unsigned* pAudioQualityMode/*[out,retval]*/);
  unsigned        __fastcall get_AudioQualityMode(void);
  HRESULT         __fastcall set_RedirectDirectX(VARIANT_BOOL pfRedirectDirectX/*[in]*/);
  HRESULT         __fastcall get_RedirectDirectX(VARIANT_BOOL* pfRedirectDirectX/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectDirectX(void);
  HRESULT         __fastcall set_NetworkConnectionType(unsigned pConnectionType/*[in]*/);
  HRESULT         __fastcall get_NetworkConnectionType(unsigned* pConnectionType/*[out,retval]*/);
  unsigned        __fastcall get_NetworkConnectionType(void);
  HRESULT         __fastcall set_RelativeMouseMode(VARIANT_BOOL pfRelativeMouseMode/*[in]*/);
  HRESULT         __fastcall get_RelativeMouseMode(VARIANT_BOOL* pfRelativeMouseMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RelativeMouseMode(void);
  HRESULT         __fastcall get_AuthenticationServiceClass(BSTR* pbstrAuthServiceClass/*[out,retval]*/);
  BSTR            __fastcall get_AuthenticationServiceClass(void);
  HRESULT         __fastcall set_AuthenticationServiceClass(BSTR pbstrAuthServiceClass/*[in]*/);
  HRESULT         __fastcall get_PCB(BSTR* bstrPCB/*[out,retval]*/);
  BSTR            __fastcall get_PCB(void);
  HRESULT         __fastcall set_PCB(BSTR bstrPCB/*[in]*/);
  HRESULT         __fastcall set_HotKeyFocusReleaseLeft(long HotKeyFocusReleaseLeft/*[in]*/);
  HRESULT         __fastcall get_HotKeyFocusReleaseLeft(long* HotKeyFocusReleaseLeft/*[out,retval]*/);
  long            __fastcall get_HotKeyFocusReleaseLeft(void);
  HRESULT         __fastcall set_HotKeyFocusReleaseRight(long HotKeyFocusReleaseRight/*[in]*/);
  HRESULT         __fastcall get_HotKeyFocusReleaseRight(long* HotKeyFocusReleaseRight/*[out,retval]*/);
  long            __fastcall get_HotKeyFocusReleaseRight(void);
  HRESULT         __fastcall set_EnableCredSspSupport(VARIANT_BOOL pfEnableSupport/*[in]*/);
  HRESULT         __fastcall get_EnableCredSspSupport(VARIANT_BOOL* pfEnableSupport/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableCredSspSupport(void);
  HRESULT         __fastcall get_AuthenticationType(unsigned* puiAuthType/*[out,retval]*/);
  unsigned        __fastcall get_AuthenticationType(void);
  HRESULT         __fastcall set_ConnectToAdministerServer(VARIANT_BOOL pConnectToAdministerServer/*[in]*/);
  HRESULT         __fastcall get_ConnectToAdministerServer(VARIANT_BOOL* pConnectToAdministerServer/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectToAdministerServer(void);
  HRESULT         __fastcall set_RedirectClipboard(VARIANT_BOOL pfRedirectClipboard/*[in]*/);
  HRESULT         __fastcall get_RedirectClipboard(VARIANT_BOOL* pfRedirectClipboard/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectClipboard(void);
  HRESULT         __fastcall set_AudioRedirectionMode(unsigned puiAudioRedirectionMode/*[in]*/);
  HRESULT         __fastcall get_AudioRedirectionMode(unsigned* puiAudioRedirectionMode/*[out,retval]*/);
  unsigned        __fastcall get_AudioRedirectionMode(void);
  HRESULT         __fastcall set_ConnectionBarShowPinButton(VARIANT_BOOL pfShowPin/*[in]*/);
  HRESULT         __fastcall get_ConnectionBarShowPinButton(VARIANT_BOOL* pfShowPin/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectionBarShowPinButton(void);
  HRESULT         __fastcall set_PublicMode(VARIANT_BOOL pfPublicMode/*[in]*/);
  HRESULT         __fastcall get_PublicMode(VARIANT_BOOL* pfPublicMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PublicMode(void);
  HRESULT         __fastcall set_RedirectDevices(VARIANT_BOOL pfRedirectPnPDevices/*[in]*/);
  HRESULT         __fastcall get_RedirectDevices(VARIANT_BOOL* pfRedirectPnPDevices/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectDevices(void);
  HRESULT         __fastcall set_RedirectPOSDevices(VARIANT_BOOL pfRedirectPOSDevices/*[in]*/);
  HRESULT         __fastcall get_RedirectPOSDevices(VARIANT_BOOL* pfRedirectPOSDevices/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPOSDevices(void);
  HRESULT         __fastcall set_BitmapVirtualCache32BppSize(long pBitmapVirtualCache32BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache32BppSize(long* pBitmapVirtualCache32BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache32BppSize(void);
  HRESULT         __fastcall set_AuthenticationLevel(unsigned puiAuthLevel/*[in]*/);
  HRESULT         __fastcall get_AuthenticationLevel(unsigned* puiAuthLevel/*[out,retval]*/);
  unsigned        __fastcall get_AuthenticationLevel(void);
  HRESULT         __fastcall set_ConnectionBarShowMinimizeButton(VARIANT_BOOL pfShowMinimize/*[in]*/);
  HRESULT         __fastcall get_ConnectionBarShowMinimizeButton(VARIANT_BOOL* pfShowMinimize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectionBarShowMinimizeButton(void);
  HRESULT         __fastcall set_ConnectionBarShowRestoreButton(VARIANT_BOOL pfShowRestore/*[in]*/);
  HRESULT         __fastcall get_ConnectionBarShowRestoreButton(VARIANT_BOOL* pfShowRestore/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectionBarShowRestoreButton(void);
  HRESULT         __fastcall get_CanAutoReconnect(VARIANT_BOOL* pfCanAutoReconnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanAutoReconnect(void);
  HRESULT         __fastcall set_EnableAutoReconnect(VARIANT_BOOL pfEnableAutoReconnect/*[in]*/);
  HRESULT         __fastcall get_EnableAutoReconnect(VARIANT_BOOL* pfEnableAutoReconnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableAutoReconnect(void);
  HRESULT         __fastcall set_MaxReconnectAttempts(long pMaxReconnectAttempts/*[in]*/);
  HRESULT         __fastcall get_MaxReconnectAttempts(long* pMaxReconnectAttempts/*[out,retval]*/);
  long            __fastcall get_MaxReconnectAttempts(void);
  HRESULT         __fastcall set_SmoothScroll(long psmoothScroll/*[in]*/);
  HRESULT         __fastcall get_SmoothScroll(long* psmoothScroll/*[out,retval]*/);
  long            __fastcall get_SmoothScroll(void);
  HRESULT         __fastcall set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/);
  HRESULT         __fastcall get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/);
  long            __fastcall get_AcceleratorPassthrough(void);
  HRESULT         __fastcall set_ShadowBitmap(long pshadowBitmap/*[in]*/);
  HRESULT         __fastcall get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/);
  long            __fastcall get_ShadowBitmap(void);
  HRESULT         __fastcall set_TransportType(long ptransportType/*[in]*/);
  HRESULT         __fastcall get_TransportType(long* ptransportType/*[out,retval]*/);
  long            __fastcall get_TransportType(void);
  HRESULT         __fastcall set_SasSequence(long psasSequence/*[in]*/);
  HRESULT         __fastcall get_SasSequence(long* psasSequence/*[out,retval]*/);
  long            __fastcall get_SasSequence(void);
  HRESULT         __fastcall set_EncryptionEnabled(long pencryptionEnabled/*[in]*/);
  HRESULT         __fastcall get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/);
  long            __fastcall get_EncryptionEnabled(void);
  HRESULT         __fastcall set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/);
  HRESULT         __fastcall get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/);
  long            __fastcall get_DedicatedTerminal(void);
  HRESULT         __fastcall set_RDPPort(long prdpPort/*[in]*/);
  HRESULT         __fastcall get_RDPPort(long* prdpPort/*[out,retval]*/);
  long            __fastcall get_RDPPort(void);
  HRESULT         __fastcall set_EnableMouse(long penableMouse/*[in]*/);
  HRESULT         __fastcall get_EnableMouse(long* penableMouse/*[out,retval]*/);
  long            __fastcall get_EnableMouse(void);
  HRESULT         __fastcall set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/);
  HRESULT         __fastcall get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/);
  long            __fastcall get_DisableCtrlAltDel(void);
  HRESULT         __fastcall set_EnableWindowsKey(long penableWindowsKey/*[in]*/);
  HRESULT         __fastcall get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/);
  long            __fastcall get_EnableWindowsKey(void);
  HRESULT         __fastcall set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/);
  HRESULT         __fastcall get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/);
  long            __fastcall get_DoubleClickDetect(void);
  HRESULT         __fastcall set_MaximizeShell(long pmaximizeShell/*[in]*/);
  HRESULT         __fastcall get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/);
  long            __fastcall get_MaximizeShell(void);
  HRESULT         __fastcall set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/);
  HRESULT         __fastcall get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/);
  long            __fastcall get_HotKeyFullScreen(void);
  HRESULT         __fastcall set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/);
  HRESULT         __fastcall get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/);
  long            __fastcall get_HotKeyCtrlEsc(void);
  HRESULT         __fastcall set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/);
  long            __fastcall get_HotKeyAltEsc(void);
  HRESULT         __fastcall set_HotKeyAltTab(long photKeyAltTab/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/);
  long            __fastcall get_HotKeyAltTab(void);
  HRESULT         __fastcall set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/);
  long            __fastcall get_HotKeyAltShiftTab(void);
  HRESULT         __fastcall set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/);
  long            __fastcall get_HotKeyAltSpace(void);
  HRESULT         __fastcall set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/);
  HRESULT         __fastcall get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/);
  long            __fastcall get_HotKeyCtrlAltDel(void);
  HRESULT         __fastcall set_orderDrawThreshold(long porderDrawThreshold/*[in]*/);
  HRESULT         __fastcall get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/);
  long            __fastcall get_orderDrawThreshold(void);
  HRESULT         __fastcall set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/);
  HRESULT         __fastcall get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/);
  long            __fastcall get_BitmapCacheSize(void);
  HRESULT         __fastcall set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCacheSize(void);
  HRESULT         __fastcall set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/);
  HRESULT         __fastcall get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/);
  long            __fastcall get_ScaleBitmapCachesByBPP(void);
  HRESULT         __fastcall set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/);
  HRESULT         __fastcall get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/);
  long            __fastcall get_NumBitmapCaches(void);
  HRESULT         __fastcall set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/);
  HRESULT         __fastcall get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/);
  long            __fastcall get_CachePersistenceActive(void);
  HRESULT         __fastcall set_PersistCacheDirectory(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_brushSupportLevel(long pbrushSupportLevel/*[in]*/);
  HRESULT         __fastcall get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/);
  long            __fastcall get_brushSupportLevel(void);
  HRESULT         __fastcall set_minInputSendInterval(long pminInputSendInterval/*[in]*/);
  HRESULT         __fastcall get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/);
  long            __fastcall get_minInputSendInterval(void);
  HRESULT         __fastcall set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/);
  HRESULT         __fastcall get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/);
  long            __fastcall get_InputEventsAtOnce(void);
  HRESULT         __fastcall set_maxEventCount(long pmaxEventCount/*[in]*/);
  HRESULT         __fastcall get_maxEventCount(long* pmaxEventCount/*[out,retval]*/);
  long            __fastcall get_maxEventCount(void);
  HRESULT         __fastcall set_keepAliveInterval(long pkeepAliveInterval/*[in]*/);
  HRESULT         __fastcall get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/);
  long            __fastcall get_keepAliveInterval(void);
  HRESULT         __fastcall set_shutdownTimeout(long pshutdownTimeout/*[in]*/);
  HRESULT         __fastcall get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/);
  long            __fastcall get_shutdownTimeout(void);
  HRESULT         __fastcall set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/);
  HRESULT         __fastcall get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/);
  long            __fastcall get_overallConnectionTimeout(void);
  HRESULT         __fastcall set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/);
  HRESULT         __fastcall get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/);
  long            __fastcall get_singleConnectionTimeout(void);
  HRESULT         __fastcall set_KeyboardType(long pkeyboardType/*[in]*/);
  HRESULT         __fastcall get_KeyboardType(long* pkeyboardType/*[out,retval]*/);
  long            __fastcall get_KeyboardType(void);
  HRESULT         __fastcall set_KeyboardSubType(long pkeyboardSubType/*[in]*/);
  HRESULT         __fastcall get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/);
  long            __fastcall get_KeyboardSubType(void);
  HRESULT         __fastcall set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/);
  HRESULT         __fastcall get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/);
  long            __fastcall get_KeyboardFunctionKey(void);
  HRESULT         __fastcall set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/);
  HRESULT         __fastcall get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/);
  long            __fastcall get_WinceFixedPalette(void);
  HRESULT         __fastcall set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/);
  HRESULT         __fastcall get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectToServerConsole(void);
  HRESULT         __fastcall set_BitmapPersistence(long pbitmapPersistence/*[in]*/);
  HRESULT         __fastcall get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/);
  long            __fastcall get_BitmapPersistence(void);
  HRESULT         __fastcall set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/);
  HRESULT         __fastcall get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/);
  long            __fastcall get_MinutesToIdleTimeout(void);
  HRESULT         __fastcall set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/);
  HRESULT         __fastcall get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SmartSizing(void);
  HRESULT         __fastcall set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/);
  HRESULT         __fastcall get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrLocalPrintingDocName(void);
  HRESULT         __fastcall set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/);
  HRESULT         __fastcall get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrClipCleanTempDirString(void);
  HRESULT         __fastcall set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/);
  HRESULT         __fastcall get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrClipPasteInfoString(void);
  HRESULT         __fastcall set_ClearTextPassword(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/);
  HRESULT         __fastcall get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayConnectionBar(void);
  HRESULT         __fastcall set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/);
  HRESULT         __fastcall get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PinConnectionBar(void);
  HRESULT         __fastcall set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/);
  HRESULT         __fastcall get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GrabFocusOnConnect(void);
  HRESULT         __fastcall set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/);
  HRESULT         __fastcall get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/);
  BSTR            __fastcall get_LoadBalanceInfo(void);
  HRESULT         __fastcall set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/);
  HRESULT         __fastcall get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectDrives(void);
  HRESULT         __fastcall set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/);
  HRESULT         __fastcall get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPrinters(void);
  HRESULT         __fastcall set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/);
  HRESULT         __fastcall get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPorts(void);
  HRESULT         __fastcall set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/);
  HRESULT         __fastcall get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectSmartCards(void);
  HRESULT         __fastcall set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache16BppSize(void);
  HRESULT         __fastcall set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache24BppSize(void);
  HRESULT         __fastcall set_PerformanceFlags(long pDisableList/*[in]*/);
  HRESULT         __fastcall get_PerformanceFlags(long* pDisableList/*[out,retval]*/);
  long            __fastcall get_PerformanceFlags(void);
  HRESULT         __fastcall set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/);
  HRESULT         __fastcall set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/);
  HRESULT         __fastcall get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NotifyTSPublicKey(void);
  HRESULT         __fastcall set_Compress(long pcompress/*[in]*/);
  HRESULT         __fastcall get_Compress(long* pcompress/*[out,retval]*/);
  long            __fastcall get_Compress(void);
  HRESULT         __fastcall set_BitmapPeristence(long pbitmapPeristence/*[in]*/);
  HRESULT         __fastcall get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/);
  long            __fastcall get_BitmapPeristence(void);
  HRESULT         __fastcall set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/);
  HRESULT         __fastcall get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/);
  long            __fastcall get_allowBackgroundInput(void);
  HRESULT         __fastcall set_KeyBoardLayoutStr(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_PluginDlls(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconFile(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconIndex(long Param1/*[in]*/);
  HRESULT         __fastcall set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/);
  HRESULT         __fastcall get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/);
  long            __fastcall get_ContainerHandledFullScreen(void);
  HRESULT         __fastcall set_DisableRdpdr(long pDisableRdpdr/*[in]*/);
  HRESULT         __fastcall get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/);
  long            __fastcall get_DisableRdpdr(void);

  __property   VARIANT_BOOL    AudioCaptureRedirectionMode = {read = get_AudioCaptureRedirectionMode, write = set_AudioCaptureRedirectionMode};
  __property   unsigned        VideoPlaybackMode = {read = get_VideoPlaybackMode, write = set_VideoPlaybackMode};
  __property   VARIANT_BOOL    EnableSuperPan = {read = get_EnableSuperPan, write = set_EnableSuperPan};
  __property   unsigned_long   SuperPanAccelerationFactor = {read = get_SuperPanAccelerationFactor, write = set_SuperPanAccelerationFactor};
  __property   VARIANT_BOOL    NegotiateSecurityLayer = {read = get_NegotiateSecurityLayer, write = set_NegotiateSecurityLayer};
  __property   unsigned        AudioQualityMode = {read = get_AudioQualityMode, write = set_AudioQualityMode};
  __property   VARIANT_BOOL    RedirectDirectX = {read = get_RedirectDirectX, write = set_RedirectDirectX};
  __property   unsigned        NetworkConnectionType = {read = get_NetworkConnectionType, write = set_NetworkConnectionType};

  __property   VARIANT_BOOL    RelativeMouseMode = {read = get_RelativeMouseMode, write = set_RelativeMouseMode};
  __property   BSTR            AuthenticationServiceClass = {read = get_AuthenticationServiceClass, write = set_AuthenticationServiceClass};
  __property   BSTR            PCB = {read = get_PCB, write = set_PCB};
  __property   long            HotKeyFocusReleaseLeft = {read = get_HotKeyFocusReleaseLeft, write = set_HotKeyFocusReleaseLeft};
  __property   long            HotKeyFocusReleaseRight = {read = get_HotKeyFocusReleaseRight, write = set_HotKeyFocusReleaseRight};
  __property   VARIANT_BOOL    EnableCredSspSupport = {read = get_EnableCredSspSupport, write = set_EnableCredSspSupport};
  __property   unsigned        AuthenticationType = {read = get_AuthenticationType};
  __property   VARIANT_BOOL    ConnectToAdministerServer = {read = get_ConnectToAdministerServer, write = set_ConnectToAdministerServer};

  __property   VARIANT_BOOL    RedirectClipboard = {read = get_RedirectClipboard, write = set_RedirectClipboard};
  __property   unsigned        AudioRedirectionMode = {read = get_AudioRedirectionMode, write = set_AudioRedirectionMode};
  __property   VARIANT_BOOL    ConnectionBarShowPinButton = {read = get_ConnectionBarShowPinButton, write = set_ConnectionBarShowPinButton};
  __property   VARIANT_BOOL    PublicMode = {read = get_PublicMode, write = set_PublicMode};
  __property   VARIANT_BOOL    RedirectDevices = {read = get_RedirectDevices, write = set_RedirectDevices};
  __property   VARIANT_BOOL    RedirectPOSDevices = {read = get_RedirectPOSDevices, write = set_RedirectPOSDevices};
  __property   long            BitmapVirtualCache32BppSize = {read = get_BitmapVirtualCache32BppSize, write = set_BitmapVirtualCache32BppSize};

  __property   unsigned        AuthenticationLevel = {read = get_AuthenticationLevel, write = set_AuthenticationLevel};

  __property   VARIANT_BOOL    ConnectionBarShowMinimizeButton = {read = get_ConnectionBarShowMinimizeButton, write = set_ConnectionBarShowMinimizeButton};
  __property   VARIANT_BOOL    ConnectionBarShowRestoreButton = {read = get_ConnectionBarShowRestoreButton, write = set_ConnectionBarShowRestoreButton};

  __property   VARIANT_BOOL    CanAutoReconnect = {read = get_CanAutoReconnect};
  __property   VARIANT_BOOL    EnableAutoReconnect = {read = get_EnableAutoReconnect, write = set_EnableAutoReconnect};
  __property   long            MaxReconnectAttempts = {read = get_MaxReconnectAttempts, write = set_MaxReconnectAttempts};

  __property   long            SmoothScroll = {read = get_SmoothScroll, write = set_SmoothScroll};
  __property   long            AcceleratorPassthrough = {read = get_AcceleratorPassthrough, write = set_AcceleratorPassthrough};
  __property   long            ShadowBitmap = {read = get_ShadowBitmap, write = set_ShadowBitmap};
  __property   long            TransportType = {read = get_TransportType, write = set_TransportType};
  __property   long            SasSequence = {read = get_SasSequence, write = set_SasSequence};
  __property   long            EncryptionEnabled = {read = get_EncryptionEnabled, write = set_EncryptionEnabled};
  __property   long            DedicatedTerminal = {read = get_DedicatedTerminal, write = set_DedicatedTerminal};
  __property   long            RDPPort = {read = get_RDPPort, write = set_RDPPort};
  __property   long            EnableMouse = {read = get_EnableMouse, write = set_EnableMouse};
  __property   long            DisableCtrlAltDel = {read = get_DisableCtrlAltDel, write = set_DisableCtrlAltDel};
  __property   long            EnableWindowsKey = {read = get_EnableWindowsKey, write = set_EnableWindowsKey};
  __property   long            DoubleClickDetect = {read = get_DoubleClickDetect, write = set_DoubleClickDetect};
  __property   long            MaximizeShell = {read = get_MaximizeShell, write = set_MaximizeShell};
  __property   long            HotKeyFullScreen = {read = get_HotKeyFullScreen, write = set_HotKeyFullScreen};
  __property   long            HotKeyCtrlEsc = {read = get_HotKeyCtrlEsc, write = set_HotKeyCtrlEsc};
  __property   long            HotKeyAltEsc = {read = get_HotKeyAltEsc, write = set_HotKeyAltEsc};
  __property   long            HotKeyAltTab = {read = get_HotKeyAltTab, write = set_HotKeyAltTab};
  __property   long            HotKeyAltShiftTab = {read = get_HotKeyAltShiftTab, write = set_HotKeyAltShiftTab};
  __property   long            HotKeyAltSpace = {read = get_HotKeyAltSpace, write = set_HotKeyAltSpace};
  __property   long            HotKeyCtrlAltDel = {read = get_HotKeyCtrlAltDel, write = set_HotKeyCtrlAltDel};
  __property   long            orderDrawThreshold = {read = get_orderDrawThreshold, write = set_orderDrawThreshold};
  __property   long            BitmapCacheSize = {read = get_BitmapCacheSize, write = set_BitmapCacheSize};
  __property   long            BitmapVirtualCacheSize = {read = get_BitmapVirtualCacheSize, write = set_BitmapVirtualCacheSize};
  __property   long            ScaleBitmapCachesByBPP = {read = get_ScaleBitmapCachesByBPP, write = set_ScaleBitmapCachesByBPP};
  __property   long            NumBitmapCaches = {read = get_NumBitmapCaches, write = set_NumBitmapCaches};
  __property   long            CachePersistenceActive = {read = get_CachePersistenceActive, write = set_CachePersistenceActive};
  __property   BSTR            PersistCacheDirectory = {write = set_PersistCacheDirectory};
  __property   long            brushSupportLevel = {read = get_brushSupportLevel, write = set_brushSupportLevel};
  __property   long            minInputSendInterval = {read = get_minInputSendInterval, write = set_minInputSendInterval};
  __property   long            InputEventsAtOnce = {read = get_InputEventsAtOnce, write = set_InputEventsAtOnce};
  __property   long            maxEventCount = {read = get_maxEventCount, write = set_maxEventCount};
  __property   long            keepAliveInterval = {read = get_keepAliveInterval, write = set_keepAliveInterval};
  __property   long            shutdownTimeout = {read = get_shutdownTimeout, write = set_shutdownTimeout};
  __property   long            overallConnectionTimeout = {read = get_overallConnectionTimeout, write = set_overallConnectionTimeout};
  __property   long            singleConnectionTimeout = {read = get_singleConnectionTimeout, write = set_singleConnectionTimeout};
  __property   long            KeyboardType = {read = get_KeyboardType, write = set_KeyboardType};
  __property   long            KeyboardSubType = {read = get_KeyboardSubType, write = set_KeyboardSubType};
  __property   long            KeyboardFunctionKey = {read = get_KeyboardFunctionKey, write = set_KeyboardFunctionKey};
  __property   long            WinceFixedPalette = {read = get_WinceFixedPalette, write = set_WinceFixedPalette};
  __property   VARIANT_BOOL    ConnectToServerConsole = {read = get_ConnectToServerConsole, write = set_ConnectToServerConsole};
  __property   long            BitmapPersistence = {read = get_BitmapPersistence, write = set_BitmapPersistence};
  __property   long            MinutesToIdleTimeout = {read = get_MinutesToIdleTimeout, write = set_MinutesToIdleTimeout};
  __property   VARIANT_BOOL    SmartSizing = {read = get_SmartSizing, write = set_SmartSizing};
  __property   BSTR            RdpdrLocalPrintingDocName = {read = get_RdpdrLocalPrintingDocName, write = set_RdpdrLocalPrintingDocName};
  __property   BSTR            RdpdrClipCleanTempDirString = {read = get_RdpdrClipCleanTempDirString, write = set_RdpdrClipCleanTempDirString};
  __property   BSTR            RdpdrClipPasteInfoString = {read = get_RdpdrClipPasteInfoString, write = set_RdpdrClipPasteInfoString};
  __property   BSTR            ClearTextPassword = {write = set_ClearTextPassword};
  __property   VARIANT_BOOL    DisplayConnectionBar = {read = get_DisplayConnectionBar, write = set_DisplayConnectionBar};
  __property   VARIANT_BOOL    PinConnectionBar = {read = get_PinConnectionBar, write = set_PinConnectionBar};
  __property   VARIANT_BOOL    GrabFocusOnConnect = {read = get_GrabFocusOnConnect, write = set_GrabFocusOnConnect};
  __property   BSTR            LoadBalanceInfo = {read = get_LoadBalanceInfo, write = set_LoadBalanceInfo};
  __property   VARIANT_BOOL    RedirectDrives = {read = get_RedirectDrives, write = set_RedirectDrives};
  __property   VARIANT_BOOL    RedirectPrinters = {read = get_RedirectPrinters, write = set_RedirectPrinters};
  __property   VARIANT_BOOL    RedirectPorts = {read = get_RedirectPorts, write = set_RedirectPorts};
  __property   VARIANT_BOOL    RedirectSmartCards = {read = get_RedirectSmartCards, write = set_RedirectSmartCards};
  __property   long            BitmapVirtualCache16BppSize = {read = get_BitmapVirtualCache16BppSize, write = set_BitmapVirtualCache16BppSize};
  __property   long            BitmapVirtualCache24BppSize = {read = get_BitmapVirtualCache24BppSize, write = set_BitmapVirtualCache24BppSize};
  __property   long            PerformanceFlags = {read = get_PerformanceFlags, write = set_PerformanceFlags};
  __property   VARIANT_BOOL    NotifyTSPublicKey = {read = get_NotifyTSPublicKey, write = set_NotifyTSPublicKey};

  __property   long            Compress = {read = get_Compress, write = set_Compress};
  __property   long            BitmapPeristence = {read = get_BitmapPeristence, write = set_BitmapPeristence};
  __property   long            allowBackgroundInput = {read = get_allowBackgroundInput, write = set_allowBackgroundInput};
  __property   BSTR            KeyBoardLayoutStr = {write = set_KeyBoardLayoutStr};
  __property   BSTR            PluginDlls = {write = set_PluginDlls};
  __property   BSTR            IconFile = {write = set_IconFile};
  __property   long            IconIndex = {write = set_IconIndex};
  __property   long            ContainerHandledFullScreen = {read = get_ContainerHandledFullScreen, write = set_ContainerHandledFullScreen};
  __property   long            DisableRdpdr = {read = get_DisableRdpdr, write = set_DisableRdpdr};
};
typedef IMsRdpClientAdvancedSettings7DispT<IMsRdpClientAdvancedSettings7> IMsRdpClientAdvancedSettings7Disp;

typedef TComInterface<IMsRdpClientTransportSettings3>  TCOMIMsRdpClientTransportSettings3;

// *********************************************************************//
// DispIntf:  IMsRdpClientTransportSettings3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3D5B21AC-748D-41DE-8F30-E15169586BD4}
// *********************************************************************//
template<class T>
class IMsRdpClientTransportSettings3DispT : public TAutoDriver<IMsRdpClientTransportSettings3>
{
public:
  IMsRdpClientTransportSettings3DispT(){}

  IMsRdpClientTransportSettings3DispT(IMsRdpClientTransportSettings3 *pintf)
  {
    TAutoDriver<IMsRdpClientTransportSettings3>::Bind(pintf, false);
  }

  IMsRdpClientTransportSettings3DispT(IMsRdpClientTransportSettings3Ptr pintf)
  {
    TAutoDriver<IMsRdpClientTransportSettings3>::Bind(pintf, true);
  }

  IMsRdpClientTransportSettings3DispT& operator=(IMsRdpClientTransportSettings3 *pintf)
  {
    TAutoDriver<IMsRdpClientTransportSettings3>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClientTransportSettings3DispT& operator=(IMsRdpClientTransportSettings3Ptr pintf)
  {
    TAutoDriver<IMsRdpClientTransportSettings3>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_GatewayCredSourceCookie(unsigned_long pulProxyCredSourceCookie/*[in]*/);
  HRESULT         __fastcall get_GatewayCredSourceCookie(unsigned_long* pulProxyCredSourceCookie/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayCredSourceCookie(void);
  HRESULT         __fastcall set_GatewayAuthCookieServerAddr(BSTR pbstrProxyAuthCookieServerAddr/*[in]*/);
  HRESULT         __fastcall get_GatewayAuthCookieServerAddr(BSTR* pbstrProxyAuthCookieServerAddr/*[out,retval]*/);
  BSTR            __fastcall get_GatewayAuthCookieServerAddr(void);
  HRESULT         __fastcall set_GatewayEncryptedAuthCookie(BSTR pbstrEncryptedAuthCookie/*[in]*/);
  HRESULT         __fastcall get_GatewayEncryptedAuthCookie(BSTR* pbstrEncryptedAuthCookie/*[out,retval]*/);
  BSTR            __fastcall get_GatewayEncryptedAuthCookie(void);
  HRESULT         __fastcall set_GatewayEncryptedAuthCookieSize(unsigned_long pulEncryptedAuthCookieSize/*[in]*/);
  HRESULT         __fastcall get_GatewayEncryptedAuthCookieSize(unsigned_long* pulEncryptedAuthCookieSize/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayEncryptedAuthCookieSize(void);
  HRESULT         __fastcall set_GatewayAuthLoginPage(BSTR pbstrProxyAuthLoginPage/*[in]*/);
  HRESULT         __fastcall get_GatewayAuthLoginPage(BSTR* pbstrProxyAuthLoginPage/*[out,retval]*/);
  BSTR            __fastcall get_GatewayAuthLoginPage(void);
  HRESULT         __fastcall set_GatewayCredSharing(unsigned_long pulProxyCredSharing/*[in]*/);
  HRESULT         __fastcall get_GatewayCredSharing(unsigned_long* pulProxyCredSharing/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayCredSharing(void);
  HRESULT         __fastcall set_GatewayPreAuthRequirement(unsigned_long pulProxyPreAuthRequirement/*[in]*/);
  HRESULT         __fastcall get_GatewayPreAuthRequirement(unsigned_long* pulProxyPreAuthRequirement/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayPreAuthRequirement(void);
  HRESULT         __fastcall set_GatewayPreAuthServerAddr(BSTR pbstrProxyPreAuthServerAddr/*[in]*/);
  HRESULT         __fastcall get_GatewayPreAuthServerAddr(BSTR* pbstrProxyPreAuthServerAddr/*[out,retval]*/);
  BSTR            __fastcall get_GatewayPreAuthServerAddr(void);
  HRESULT         __fastcall set_GatewaySupportUrl(BSTR pbstrProxySupportUrl/*[in]*/);
  HRESULT         __fastcall get_GatewaySupportUrl(BSTR* pbstrProxySupportUrl/*[out,retval]*/);
  BSTR            __fastcall get_GatewaySupportUrl(void);
  HRESULT         __fastcall set_GatewayEncryptedOtpCookie(BSTR pbstrEncryptedOtpCookie/*[in]*/);
  HRESULT         __fastcall get_GatewayEncryptedOtpCookie(BSTR* pbstrEncryptedOtpCookie/*[out,retval]*/);
  BSTR            __fastcall get_GatewayEncryptedOtpCookie(void);
  HRESULT         __fastcall set_GatewayEncryptedOtpCookieSize(unsigned_long pulEncryptedOtpCookieSize/*[in]*/);
  HRESULT         __fastcall get_GatewayEncryptedOtpCookieSize(unsigned_long* pulEncryptedOtpCookieSize/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayEncryptedOtpCookieSize(void);
  HRESULT         __fastcall set_GatewayUsername(BSTR pProxyUsername/*[in]*/);
  HRESULT         __fastcall get_GatewayUsername(BSTR* pProxyUsername/*[out,retval]*/);
  BSTR            __fastcall get_GatewayUsername(void);
  HRESULT         __fastcall set_GatewayDomain(BSTR pProxyDomain/*[in]*/);
  HRESULT         __fastcall get_GatewayDomain(BSTR* pProxyDomain/*[out,retval]*/);
  BSTR            __fastcall get_GatewayDomain(void);
  HRESULT         __fastcall set_GatewayPassword(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_GatewayHostname(BSTR pProxyHostname/*[in]*/);
  HRESULT         __fastcall get_GatewayHostname(BSTR* pProxyHostname/*[out,retval]*/);
  BSTR            __fastcall get_GatewayHostname(void);
  HRESULT         __fastcall set_GatewayUsageMethod(unsigned_long pulProxyUsageMethod/*[in]*/);
  HRESULT         __fastcall get_GatewayUsageMethod(unsigned_long* pulProxyUsageMethod/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayUsageMethod(void);
  HRESULT         __fastcall set_GatewayProfileUsageMethod(unsigned_long pulProxyProfileUsageMethod/*[in]*/);
  HRESULT         __fastcall get_GatewayProfileUsageMethod(unsigned_long* pulProxyProfileUsageMethod/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayProfileUsageMethod(void);
  HRESULT         __fastcall set_GatewayCredsSource(unsigned_long pulProxyCredsSource/*[in]*/);
  HRESULT         __fastcall get_GatewayCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayCredsSource(void);
  HRESULT         __fastcall set_GatewayUserSelectedCredsSource(unsigned_long pulProxyCredsSource/*[in]*/);
  HRESULT         __fastcall get_GatewayUserSelectedCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayUserSelectedCredsSource(void);
  HRESULT         __fastcall get_GatewayIsSupported(long* pfProxyIsSupported/*[out,retval]*/);
  long            __fastcall get_GatewayIsSupported(void);
  HRESULT         __fastcall get_GatewayDefaultUsageMethod(unsigned_long* pulProxyDefaultUsageMethod/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayDefaultUsageMethod(void);

  __property   unsigned_long   GatewayCredSourceCookie = {read = get_GatewayCredSourceCookie, write = set_GatewayCredSourceCookie};
  __property   BSTR            GatewayAuthCookieServerAddr = {read = get_GatewayAuthCookieServerAddr, write = set_GatewayAuthCookieServerAddr};
  __property   BSTR            GatewayEncryptedAuthCookie = {read = get_GatewayEncryptedAuthCookie, write = set_GatewayEncryptedAuthCookie};
  __property   unsigned_long   GatewayEncryptedAuthCookieSize = {read = get_GatewayEncryptedAuthCookieSize, write = set_GatewayEncryptedAuthCookieSize};
  __property   BSTR            GatewayAuthLoginPage = {read = get_GatewayAuthLoginPage, write = set_GatewayAuthLoginPage};

  __property   unsigned_long   GatewayCredSharing = {read = get_GatewayCredSharing, write = set_GatewayCredSharing};
  __property   unsigned_long   GatewayPreAuthRequirement = {read = get_GatewayPreAuthRequirement, write = set_GatewayPreAuthRequirement};
  __property   BSTR            GatewayPreAuthServerAddr = {read = get_GatewayPreAuthServerAddr, write = set_GatewayPreAuthServerAddr};
  __property   BSTR            GatewaySupportUrl = {read = get_GatewaySupportUrl, write = set_GatewaySupportUrl};
  __property   BSTR            GatewayEncryptedOtpCookie = {read = get_GatewayEncryptedOtpCookie, write = set_GatewayEncryptedOtpCookie};
  __property   unsigned_long   GatewayEncryptedOtpCookieSize = {read = get_GatewayEncryptedOtpCookieSize, write = set_GatewayEncryptedOtpCookieSize};
  __property   BSTR            GatewayUsername = {read = get_GatewayUsername, write = set_GatewayUsername};
  __property   BSTR            GatewayDomain = {read = get_GatewayDomain, write = set_GatewayDomain};
  __property   BSTR            GatewayPassword = {write = set_GatewayPassword};

  __property   BSTR            GatewayHostname = {read = get_GatewayHostname, write = set_GatewayHostname};
  __property   unsigned_long   GatewayUsageMethod = {read = get_GatewayUsageMethod, write = set_GatewayUsageMethod};
  __property   unsigned_long   GatewayProfileUsageMethod = {read = get_GatewayProfileUsageMethod, write = set_GatewayProfileUsageMethod};
  __property   unsigned_long   GatewayCredsSource = {read = get_GatewayCredsSource, write = set_GatewayCredsSource};
  __property   unsigned_long   GatewayUserSelectedCredsSource = {read = get_GatewayUserSelectedCredsSource, write = set_GatewayUserSelectedCredsSource};
  __property   long            GatewayIsSupported = {read = get_GatewayIsSupported};
  __property   unsigned_long   GatewayDefaultUsageMethod = {read = get_GatewayDefaultUsageMethod};
};
typedef IMsRdpClientTransportSettings3DispT<IMsRdpClientTransportSettings3> IMsRdpClientTransportSettings3Disp;

typedef TComInterface<IMsRdpClientSecuredSettings2>  TCOMIMsRdpClientSecuredSettings2;

// *********************************************************************//
// DispIntf:  IMsRdpClientSecuredSettings2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {25F2CE20-8B1D-4971-A7CD-549DAE201FC0}
// *********************************************************************//
template<class T>
class IMsRdpClientSecuredSettings2DispT : public TAutoDriver<IMsRdpClientSecuredSettings2>
{
public:
  IMsRdpClientSecuredSettings2DispT(){}

  IMsRdpClientSecuredSettings2DispT(IMsRdpClientSecuredSettings2 *pintf)
  {
    TAutoDriver<IMsRdpClientSecuredSettings2>::Bind(pintf, false);
  }

  IMsRdpClientSecuredSettings2DispT(IMsRdpClientSecuredSettings2Ptr pintf)
  {
    TAutoDriver<IMsRdpClientSecuredSettings2>::Bind(pintf, true);
  }

  IMsRdpClientSecuredSettings2DispT& operator=(IMsRdpClientSecuredSettings2 *pintf)
  {
    TAutoDriver<IMsRdpClientSecuredSettings2>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClientSecuredSettings2DispT& operator=(IMsRdpClientSecuredSettings2Ptr pintf)
  {
    TAutoDriver<IMsRdpClientSecuredSettings2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_PCB(BSTR* bstrPCB/*[out,retval]*/);
  BSTR            __fastcall get_PCB(void);
  HRESULT         __fastcall set_PCB(BSTR bstrPCB/*[in]*/);
  HRESULT         __fastcall set_KeyboardHookMode(long pkeyboardHookMode/*[in]*/);
  HRESULT         __fastcall get_KeyboardHookMode(long* pkeyboardHookMode/*[out,retval]*/);
  long            __fastcall get_KeyboardHookMode(void);
  HRESULT         __fastcall set_AudioRedirectionMode(long pAudioRedirectionMode/*[in]*/);
  HRESULT         __fastcall get_AudioRedirectionMode(long* pAudioRedirectionMode/*[out,retval]*/);
  long            __fastcall get_AudioRedirectionMode(void);
  HRESULT         __fastcall set_StartProgram(BSTR pStartProgram/*[in]*/);
  HRESULT         __fastcall get_StartProgram(BSTR* pStartProgram/*[out,retval]*/);
  BSTR            __fastcall get_StartProgram(void);
  HRESULT         __fastcall set_WorkDir(BSTR pWorkDir/*[in]*/);
  HRESULT         __fastcall get_WorkDir(BSTR* pWorkDir/*[out,retval]*/);
  BSTR            __fastcall get_WorkDir(void);
  HRESULT         __fastcall set_FullScreen(long pfFullScreen/*[in]*/);
  HRESULT         __fastcall get_FullScreen(long* pfFullScreen/*[out,retval]*/);
  long            __fastcall get_FullScreen(void);

  __property   BSTR            PCB = {read = get_PCB, write = set_PCB};

  __property   long            KeyboardHookMode = {read = get_KeyboardHookMode, write = set_KeyboardHookMode};
  __property   long            AudioRedirectionMode = {read = get_AudioRedirectionMode, write = set_AudioRedirectionMode};

  __property   BSTR            StartProgram = {read = get_StartProgram, write = set_StartProgram};
  __property   BSTR            WorkDir = {read = get_WorkDir, write = set_WorkDir};
  __property   long            FullScreen = {read = get_FullScreen, write = set_FullScreen};
};
typedef IMsRdpClientSecuredSettings2DispT<IMsRdpClientSecuredSettings2> IMsRdpClientSecuredSettings2Disp;

typedef TComInterface<ITSRemoteProgram2>  TCOMITSRemoteProgram2;

// *********************************************************************//
// DispIntf:  ITSRemoteProgram2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {92C38A7D-241A-418C-9936-099872C9AF20}
// *********************************************************************//
template<class T>
class ITSRemoteProgram2DispT : public TAutoDriver<ITSRemoteProgram2>
{
public:
  ITSRemoteProgram2DispT(){}

  ITSRemoteProgram2DispT(ITSRemoteProgram2 *pintf)
  {
    TAutoDriver<ITSRemoteProgram2>::Bind(pintf, false);
  }

  ITSRemoteProgram2DispT(ITSRemoteProgram2Ptr pintf)
  {
    TAutoDriver<ITSRemoteProgram2>::Bind(pintf, true);
  }

  ITSRemoteProgram2DispT& operator=(ITSRemoteProgram2 *pintf)
  {
    TAutoDriver<ITSRemoteProgram2>::Bind(pintf, false);
    return *this;
  }

  ITSRemoteProgram2DispT& operator=(ITSRemoteProgram2Ptr pintf)
  {
    TAutoDriver<ITSRemoteProgram2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_RemoteApplicationName(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_RemoteApplicationProgram(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_RemoteApplicationArgs(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_RemoteProgramMode(VARIANT_BOOL pvboolRemoteProgramMode/*[in]*/);
  HRESULT         __fastcall get_RemoteProgramMode(VARIANT_BOOL* pvboolRemoteProgramMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RemoteProgramMode(void);
  HRESULT         __fastcall ServerStartProgram(BSTR bstrExecutablePath/*[in]*/, 
                                                BSTR bstrFilePath/*[in]*/, 
                                                BSTR bstrWorkingDirectory/*[in]*/, 
                                                VARIANT_BOOL vbExpandEnvVarInWorkingDirectoryOnServer/*[in]*/
                                                , BSTR bstrArguments/*[in]*/, 
                                                VARIANT_BOOL vbExpandEnvVarInArgumentsOnServer/*[in]*/);

  __property   BSTR            RemoteApplicationName = {write = set_RemoteApplicationName};
  __property   BSTR            RemoteApplicationProgram = {write = set_RemoteApplicationProgram};
  __property   BSTR            RemoteApplicationArgs = {write = set_RemoteApplicationArgs};

  __property   VARIANT_BOOL    RemoteProgramMode = {read = get_RemoteProgramMode, write = set_RemoteProgramMode};
};
typedef ITSRemoteProgram2DispT<ITSRemoteProgram2> ITSRemoteProgram2Disp;

typedef TComInterface<IMsRdpPreferredRedirectionInfo>  TCOMIMsRdpPreferredRedirectionInfo;

typedef TComInterface<IMsRdpExtendedSettings>  TCOMIMsRdpExtendedSettings;

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient8
// Interface: IMsRdpClient8
// *********************************************************************//
template <class T /* IMsRdpClient8 */ >
class TCOMIMsRdpClient8T : public TComInterface<IMsRdpClient8>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMsRdpClient8T() {}
  TCOMIMsRdpClient8T(IMsRdpClient8 *intf, bool addRef = false) : TComInterface<IMsRdpClient8>(intf, addRef) {}
  TCOMIMsRdpClient8T(const TCOMIMsRdpClient8T& src) : TComInterface<IMsRdpClient8>(src) {}
  TCOMIMsRdpClient8T& operator=(const TCOMIMsRdpClient8T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall SendRemoteAction(Mstsclib_tlb::RemoteSessionActionType actionType/*[in]*/);
  HRESULT         __fastcall get_AdvancedSettings9(Mstsclib_tlb::IMsRdpClientAdvancedSettings8** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr __fastcall get_AdvancedSettings9(void);
  HRESULT         __fastcall Reconnect(unsigned_long ulWidth/*[in]*/, unsigned_long ulHeight/*[in]*/, 
                                       Mstsclib_tlb::ControlReconnectStatus* pReconnectStatus/*[out,retval]*/);
  Mstsclib_tlb::ControlReconnectStatus __fastcall Reconnect(unsigned_long ulWidth/*[in]*/, 
                                                            unsigned_long ulHeight/*[in]*/);

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr AdvancedSettings9 = {read = get_AdvancedSettings9};
};
typedef TCOMIMsRdpClient8T<IMsRdpClient8> TCOMIMsRdpClient8;

// *********************************************************************//
// DispIntf:  IMsRdpClient8
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4247E044-9271-43A9-BC49-E2AD9E855D62}
// *********************************************************************//
template<class T>
class IMsRdpClient8DispT : public TAutoDriver<IMsRdpClient8>
{
public:
  IMsRdpClient8DispT(){}

  IMsRdpClient8DispT(IMsRdpClient8 *pintf)
  {
    TAutoDriver<IMsRdpClient8>::Bind(pintf, false);
  }

  IMsRdpClient8DispT(IMsRdpClient8Ptr pintf)
  {
    TAutoDriver<IMsRdpClient8>::Bind(pintf, true);
  }

  IMsRdpClient8DispT& operator=(IMsRdpClient8 *pintf)
  {
    TAutoDriver<IMsRdpClient8>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClient8DispT& operator=(IMsRdpClient8Ptr pintf)
  {
    TAutoDriver<IMsRdpClient8>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MsRdpClient8NotSafeForScripting));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MsRdpClient8NotSafeForScripting);
  }

  HRESULT         __fastcall SendRemoteAction(Mstsclib_tlb::RemoteSessionActionType actionType/*[in]*/);
  HRESULT         __fastcall get_AdvancedSettings9(Mstsclib_tlb::IMsRdpClientAdvancedSettings8** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr __fastcall get_AdvancedSettings9(void);
  HRESULT         __fastcall Reconnect(unsigned_long ulWidth/*[in]*/, unsigned_long ulHeight/*[in]*/
                                       , 
                                       Mstsclib_tlb::ControlReconnectStatus* pReconnectStatus/*[out,retval]*/);
  Mstsclib_tlb::ControlReconnectStatus __fastcall Reconnect(unsigned_long ulWidth/*[in]*/, 
                                                            unsigned_long ulHeight/*[in]*/);
  HRESULT         __fastcall get_AdvancedSettings8(Mstsclib_tlb::IMsRdpClientAdvancedSettings7** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr __fastcall get_AdvancedSettings8(void);
  HRESULT         __fastcall get_TransportSettings3(Mstsclib_tlb::IMsRdpClientTransportSettings3** ppXportSet3/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr __fastcall get_TransportSettings3(void);
  HRESULT         __fastcall GetStatusText(unsigned statusCode/*[in]*/, 
                                           BSTR* pBstrStatusText/*[out,retval]*/);
  BSTR            __fastcall GetStatusText(unsigned statusCode/*[in]*/);
  HRESULT         __fastcall get_SecuredSettings3(Mstsclib_tlb::IMsRdpClientSecuredSettings2** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr __fastcall get_SecuredSettings3(void);
  HRESULT         __fastcall get_RemoteProgram2(Mstsclib_tlb::ITSRemoteProgram2** ppRemoteProgram/*[out,retval]*/);
  Mstsclib_tlb::ITSRemoteProgram2Ptr __fastcall get_RemoteProgram2(void);
  HRESULT         __fastcall get_AdvancedSettings7(Mstsclib_tlb::IMsRdpClientAdvancedSettings6** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr __fastcall get_AdvancedSettings7(void);
  HRESULT         __fastcall get_TransportSettings2(Mstsclib_tlb::IMsRdpClientTransportSettings2** ppXportSet2/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr __fastcall get_TransportSettings2(void);
  HRESULT         __fastcall get_TransportSettings(Mstsclib_tlb::IMsRdpClientTransportSettings** ppXportSet/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettingsPtr __fastcall get_TransportSettings(void);
  HRESULT         __fastcall get_AdvancedSettings6(Mstsclib_tlb::IMsRdpClientAdvancedSettings5** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr __fastcall get_AdvancedSettings6(void);
  HRESULT         __fastcall GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                                 unsigned ExtendedDisconnectReason/*[in]*/, 
                                                 BSTR* pBstrErrorMsg/*[out,retval]*/);
  BSTR            __fastcall GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                                 unsigned ExtendedDisconnectReason/*[in]*/);
  HRESULT         __fastcall get_RemoteProgram(Mstsclib_tlb::ITSRemoteProgram** ppRemoteProgram/*[out,retval]*/);
  Mstsclib_tlb::ITSRemoteProgramPtr __fastcall get_RemoteProgram(void);
  HRESULT         __fastcall get_MsRdpClientShell(Mstsclib_tlb::IMsRdpClientShell** ppLauncher/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientShellPtr __fastcall get_MsRdpClientShell(void);
  HRESULT         __fastcall get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall get_AdvancedSettings5(void);
  HRESULT         __fastcall get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall get_AdvancedSettings4(void);
  HRESULT         __fastcall get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall get_AdvancedSettings3(void);
  HRESULT         __fastcall set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/);
  HRESULT         __fastcall get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectedStatusText(void);
  HRESULT         __fastcall set_ColorDepth(long pcolorDepth/*[in]*/);
  HRESULT         __fastcall get_ColorDepth(long* pcolorDepth/*[out,retval]*/);
  long            __fastcall get_ColorDepth(void);
  HRESULT         __fastcall get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall get_AdvancedSettings2(void);
  HRESULT         __fastcall get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall get_SecuredSettings2(void);
  HRESULT         __fastcall get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/);
  Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall get_ExtendedDisconnectReason(void);
  HRESULT         __fastcall set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/);
  HRESULT         __fastcall get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullScreen(void);
  HRESULT         __fastcall SetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long chanOptions/*[in]*/);
  HRESULT         __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long* pChanOptions/*[out,retval]*/);
  long            __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/);
  HRESULT         __fastcall RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/);
  Mstsclib_tlb::ControlCloseStatus __fastcall RequestClose(void);
  HRESULT         __fastcall set_Server(BSTR pServer/*[in]*/);
  HRESULT         __fastcall get_Server(BSTR* pServer/*[out,retval]*/);
  BSTR            __fastcall get_Server(void);
  HRESULT         __fastcall set_Domain(BSTR pDomain/*[in]*/);
  HRESULT         __fastcall get_Domain(BSTR* pDomain/*[out,retval]*/);
  BSTR            __fastcall get_Domain(void);
  HRESULT         __fastcall set_UserName(BSTR pUserName/*[in]*/);
  HRESULT         __fastcall get_UserName(BSTR* pUserName/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall set_DisconnectedText(BSTR pDisconnectedText/*[in]*/);
  HRESULT         __fastcall get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/);
  BSTR            __fastcall get_DisconnectedText(void);
  HRESULT         __fastcall set_ConnectingText(BSTR pConnectingText/*[in]*/);
  HRESULT         __fastcall get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectingText(void);
  HRESULT         __fastcall get_Connected(short* pIsConnected/*[out,retval]*/);
  short           __fastcall get_Connected(void);
  HRESULT         __fastcall set_DesktopWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopWidth(void);
  HRESULT         __fastcall set_DesktopHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopHeight(void);
  HRESULT         __fastcall set_StartConnected(long pfStartConnected/*[in]*/);
  HRESULT         __fastcall get_StartConnected(long* pfStartConnected/*[out,retval]*/);
  long            __fastcall get_StartConnected(void);
  HRESULT         __fastcall get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/);
  long            __fastcall get_HorizontalScrollBarVisible(void);
  HRESULT         __fastcall get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/);
  long            __fastcall get_VerticalScrollBarVisible(void);
  HRESULT         __fastcall set_FullScreenTitle(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_CipherStrength(long* pCipherStrength/*[out,retval]*/);
  long            __fastcall get_CipherStrength(void);
  HRESULT         __fastcall get_Version(BSTR* pVersion/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/);
  long            __fastcall get_SecuredSettingsEnabled(void);
  HRESULT         __fastcall get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall get_SecuredSettings(void);
  HRESULT         __fastcall get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall get_AdvancedSettings(void);
  HRESULT         __fastcall get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/);
  Mstsclib_tlb::IMsTscDebugPtr __fastcall get_Debugger(void);
  HRESULT         __fastcall Connect();
  HRESULT         __fastcall Disconnect();
  HRESULT         __fastcall CreateVirtualChannels(BSTR newVal/*[in]*/);
  HRESULT         __fastcall SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/);

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr AdvancedSettings9 = {read = get_AdvancedSettings9};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr AdvancedSettings8 = {read = get_AdvancedSettings8};
  __property   Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr TransportSettings3 = {read = get_TransportSettings3};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr SecuredSettings3 = {read = get_SecuredSettings3};
  __property   Mstsclib_tlb::ITSRemoteProgram2Ptr RemoteProgram2 = {read = get_RemoteProgram2};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr AdvancedSettings7 = {read = get_AdvancedSettings7};
  __property   Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr TransportSettings2 = {read = get_TransportSettings2};

  __property   Mstsclib_tlb::IMsRdpClientTransportSettingsPtr TransportSettings = {read = get_TransportSettings};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr AdvancedSettings6 = {read = get_AdvancedSettings6};
  __property   Mstsclib_tlb::ITSRemoteProgramPtr RemoteProgram = {read = get_RemoteProgram};
  __property   Mstsclib_tlb::IMsRdpClientShellPtr MsRdpClientShell = {read = get_MsRdpClientShell};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr AdvancedSettings5 = {read = get_AdvancedSettings5};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr AdvancedSettings4 = {read = get_AdvancedSettings4};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr AdvancedSettings3 = {read = get_AdvancedSettings3};
  __property   BSTR            ConnectedStatusText = {read = get_ConnectedStatusText, write = set_ConnectedStatusText};

  __property   long            ColorDepth = {read = get_ColorDepth, write = set_ColorDepth};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr AdvancedSettings2 = {read = get_AdvancedSettings2};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr SecuredSettings2 = {read = get_SecuredSettings2};
  __property   Mstsclib_tlb::ExtendedDisconnectReasonCode ExtendedDisconnectReason = {read = get_ExtendedDisconnectReason};
  __property   VARIANT_BOOL    FullScreen = {read = get_FullScreen, write = set_FullScreen};

  __property   BSTR            Server = {read = get_Server, write = set_Server};
  __property   BSTR            Domain = {read = get_Domain, write = set_Domain};
  __property   BSTR            UserName = {read = get_UserName, write = set_UserName};
  __property   BSTR            DisconnectedText = {read = get_DisconnectedText, write = set_DisconnectedText};
  __property   BSTR            ConnectingText = {read = get_ConnectingText, write = set_ConnectingText};
  __property   short           Connected = {read = get_Connected};
  __property   long            DesktopWidth = {read = get_DesktopWidth, write = set_DesktopWidth};
  __property   long            DesktopHeight = {read = get_DesktopHeight, write = set_DesktopHeight};
  __property   long            StartConnected = {read = get_StartConnected, write = set_StartConnected};
  __property   long            HorizontalScrollBarVisible = {read = get_HorizontalScrollBarVisible};
  __property   long            VerticalScrollBarVisible = {read = get_VerticalScrollBarVisible};
  __property   BSTR            FullScreenTitle = {write = set_FullScreenTitle};
  __property   long            CipherStrength = {read = get_CipherStrength};
  __property   BSTR            Version = {read = get_Version};
  __property   long            SecuredSettingsEnabled = {read = get_SecuredSettingsEnabled};
  __property   Mstsclib_tlb::IMsTscSecuredSettingsPtr SecuredSettings = {read = get_SecuredSettings};
  __property   Mstsclib_tlb::IMsTscAdvancedSettingsPtr AdvancedSettings = {read = get_AdvancedSettings};
  __property   Mstsclib_tlb::IMsTscDebugPtr Debugger = {read = get_Debugger};

};
typedef IMsRdpClient8DispT<IMsRdpClient8> IMsRdpClient8Disp;

typedef TComInterface<IMsRdpClientAdvancedSettings8>  TCOMIMsRdpClientAdvancedSettings8;

// *********************************************************************//
// DispIntf:  IMsRdpClientAdvancedSettings8
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {89ACB528-2557-4D16-8625-226A30E97E9A}
// *********************************************************************//
template<class T>
class IMsRdpClientAdvancedSettings8DispT : public TAutoDriver<IMsRdpClientAdvancedSettings8>
{
public:
  IMsRdpClientAdvancedSettings8DispT(){}

  IMsRdpClientAdvancedSettings8DispT(IMsRdpClientAdvancedSettings8 *pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings8>::Bind(pintf, false);
  }

  IMsRdpClientAdvancedSettings8DispT(IMsRdpClientAdvancedSettings8Ptr pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings8>::Bind(pintf, true);
  }

  IMsRdpClientAdvancedSettings8DispT& operator=(IMsRdpClientAdvancedSettings8 *pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings8>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClientAdvancedSettings8DispT& operator=(IMsRdpClientAdvancedSettings8Ptr pintf)
  {
    TAutoDriver<IMsRdpClientAdvancedSettings8>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_BandwidthDetection(VARIANT_BOOL pfAutodetect/*[in]*/);
  HRESULT         __fastcall get_BandwidthDetection(VARIANT_BOOL* pfAutodetect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BandwidthDetection(void);
  HRESULT         __fastcall set_ClientProtocolSpec(Mstsclib_tlb::ClientSpec pClientMode/*[in]*/);
  HRESULT         __fastcall get_ClientProtocolSpec(Mstsclib_tlb::ClientSpec* pClientMode/*[out,retval]*/);
  Mstsclib_tlb::ClientSpec __fastcall get_ClientProtocolSpec(void);
  HRESULT         __fastcall set_AudioCaptureRedirectionMode(VARIANT_BOOL pfRedir/*[in]*/);
  HRESULT         __fastcall get_AudioCaptureRedirectionMode(VARIANT_BOOL* pfRedir/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AudioCaptureRedirectionMode(void);
  HRESULT         __fastcall set_VideoPlaybackMode(unsigned pVideoPlaybackMode/*[in]*/);
  HRESULT         __fastcall get_VideoPlaybackMode(unsigned* pVideoPlaybackMode/*[out,retval]*/);
  unsigned        __fastcall get_VideoPlaybackMode(void);
  HRESULT         __fastcall set_EnableSuperPan(VARIANT_BOOL pfEnableSuperPan/*[in]*/);
  HRESULT         __fastcall get_EnableSuperPan(VARIANT_BOOL* pfEnableSuperPan/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableSuperPan(void);
  HRESULT         __fastcall set_SuperPanAccelerationFactor(unsigned_long puAccelFactor/*[in]*/);
  HRESULT         __fastcall get_SuperPanAccelerationFactor(unsigned_long* puAccelFactor/*[out,retval]*/);
  unsigned_long   __fastcall get_SuperPanAccelerationFactor(void);
  HRESULT         __fastcall set_NegotiateSecurityLayer(VARIANT_BOOL pfNegotiate/*[in]*/);
  HRESULT         __fastcall get_NegotiateSecurityLayer(VARIANT_BOOL* pfNegotiate/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NegotiateSecurityLayer(void);
  HRESULT         __fastcall set_AudioQualityMode(unsigned pAudioQualityMode/*[in]*/);
  HRESULT         __fastcall get_AudioQualityMode(unsigned* pAudioQualityMode/*[out,retval]*/);
  unsigned        __fastcall get_AudioQualityMode(void);
  HRESULT         __fastcall set_RedirectDirectX(VARIANT_BOOL pfRedirectDirectX/*[in]*/);
  HRESULT         __fastcall get_RedirectDirectX(VARIANT_BOOL* pfRedirectDirectX/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectDirectX(void);
  HRESULT         __fastcall set_NetworkConnectionType(unsigned pConnectionType/*[in]*/);
  HRESULT         __fastcall get_NetworkConnectionType(unsigned* pConnectionType/*[out,retval]*/);
  unsigned        __fastcall get_NetworkConnectionType(void);
  HRESULT         __fastcall set_RelativeMouseMode(VARIANT_BOOL pfRelativeMouseMode/*[in]*/);
  HRESULT         __fastcall get_RelativeMouseMode(VARIANT_BOOL* pfRelativeMouseMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RelativeMouseMode(void);
  HRESULT         __fastcall get_AuthenticationServiceClass(BSTR* pbstrAuthServiceClass/*[out,retval]*/);
  BSTR            __fastcall get_AuthenticationServiceClass(void);
  HRESULT         __fastcall set_AuthenticationServiceClass(BSTR pbstrAuthServiceClass/*[in]*/);
  HRESULT         __fastcall get_PCB(BSTR* bstrPCB/*[out,retval]*/);
  BSTR            __fastcall get_PCB(void);
  HRESULT         __fastcall set_PCB(BSTR bstrPCB/*[in]*/);
  HRESULT         __fastcall set_HotKeyFocusReleaseLeft(long HotKeyFocusReleaseLeft/*[in]*/);
  HRESULT         __fastcall get_HotKeyFocusReleaseLeft(long* HotKeyFocusReleaseLeft/*[out,retval]*/);
  long            __fastcall get_HotKeyFocusReleaseLeft(void);
  HRESULT         __fastcall set_HotKeyFocusReleaseRight(long HotKeyFocusReleaseRight/*[in]*/);
  HRESULT         __fastcall get_HotKeyFocusReleaseRight(long* HotKeyFocusReleaseRight/*[out,retval]*/);
  long            __fastcall get_HotKeyFocusReleaseRight(void);
  HRESULT         __fastcall set_EnableCredSspSupport(VARIANT_BOOL pfEnableSupport/*[in]*/);
  HRESULT         __fastcall get_EnableCredSspSupport(VARIANT_BOOL* pfEnableSupport/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableCredSspSupport(void);
  HRESULT         __fastcall get_AuthenticationType(unsigned* puiAuthType/*[out,retval]*/);
  unsigned        __fastcall get_AuthenticationType(void);
  HRESULT         __fastcall set_ConnectToAdministerServer(VARIANT_BOOL pConnectToAdministerServer/*[in]*/);
  HRESULT         __fastcall get_ConnectToAdministerServer(VARIANT_BOOL* pConnectToAdministerServer/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectToAdministerServer(void);
  HRESULT         __fastcall set_RedirectClipboard(VARIANT_BOOL pfRedirectClipboard/*[in]*/);
  HRESULT         __fastcall get_RedirectClipboard(VARIANT_BOOL* pfRedirectClipboard/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectClipboard(void);
  HRESULT         __fastcall set_AudioRedirectionMode(unsigned puiAudioRedirectionMode/*[in]*/);
  HRESULT         __fastcall get_AudioRedirectionMode(unsigned* puiAudioRedirectionMode/*[out,retval]*/);
  unsigned        __fastcall get_AudioRedirectionMode(void);
  HRESULT         __fastcall set_ConnectionBarShowPinButton(VARIANT_BOOL pfShowPin/*[in]*/);
  HRESULT         __fastcall get_ConnectionBarShowPinButton(VARIANT_BOOL* pfShowPin/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectionBarShowPinButton(void);
  HRESULT         __fastcall set_PublicMode(VARIANT_BOOL pfPublicMode/*[in]*/);
  HRESULT         __fastcall get_PublicMode(VARIANT_BOOL* pfPublicMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PublicMode(void);
  HRESULT         __fastcall set_RedirectDevices(VARIANT_BOOL pfRedirectPnPDevices/*[in]*/);
  HRESULT         __fastcall get_RedirectDevices(VARIANT_BOOL* pfRedirectPnPDevices/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectDevices(void);
  HRESULT         __fastcall set_RedirectPOSDevices(VARIANT_BOOL pfRedirectPOSDevices/*[in]*/);
  HRESULT         __fastcall get_RedirectPOSDevices(VARIANT_BOOL* pfRedirectPOSDevices/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPOSDevices(void);
  HRESULT         __fastcall set_BitmapVirtualCache32BppSize(long pBitmapVirtualCache32BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache32BppSize(long* pBitmapVirtualCache32BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache32BppSize(void);
  HRESULT         __fastcall set_AuthenticationLevel(unsigned puiAuthLevel/*[in]*/);
  HRESULT         __fastcall get_AuthenticationLevel(unsigned* puiAuthLevel/*[out,retval]*/);
  unsigned        __fastcall get_AuthenticationLevel(void);
  HRESULT         __fastcall set_ConnectionBarShowMinimizeButton(VARIANT_BOOL pfShowMinimize/*[in]*/);
  HRESULT         __fastcall get_ConnectionBarShowMinimizeButton(VARIANT_BOOL* pfShowMinimize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectionBarShowMinimizeButton(void);
  HRESULT         __fastcall set_ConnectionBarShowRestoreButton(VARIANT_BOOL pfShowRestore/*[in]*/);
  HRESULT         __fastcall get_ConnectionBarShowRestoreButton(VARIANT_BOOL* pfShowRestore/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectionBarShowRestoreButton(void);
  HRESULT         __fastcall get_CanAutoReconnect(VARIANT_BOOL* pfCanAutoReconnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanAutoReconnect(void);
  HRESULT         __fastcall set_EnableAutoReconnect(VARIANT_BOOL pfEnableAutoReconnect/*[in]*/);
  HRESULT         __fastcall get_EnableAutoReconnect(VARIANT_BOOL* pfEnableAutoReconnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableAutoReconnect(void);
  HRESULT         __fastcall set_MaxReconnectAttempts(long pMaxReconnectAttempts/*[in]*/);
  HRESULT         __fastcall get_MaxReconnectAttempts(long* pMaxReconnectAttempts/*[out,retval]*/);
  long            __fastcall get_MaxReconnectAttempts(void);
  HRESULT         __fastcall set_SmoothScroll(long psmoothScroll/*[in]*/);
  HRESULT         __fastcall get_SmoothScroll(long* psmoothScroll/*[out,retval]*/);
  long            __fastcall get_SmoothScroll(void);
  HRESULT         __fastcall set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/);
  HRESULT         __fastcall get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/);
  long            __fastcall get_AcceleratorPassthrough(void);
  HRESULT         __fastcall set_ShadowBitmap(long pshadowBitmap/*[in]*/);
  HRESULT         __fastcall get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/);
  long            __fastcall get_ShadowBitmap(void);
  HRESULT         __fastcall set_TransportType(long ptransportType/*[in]*/);
  HRESULT         __fastcall get_TransportType(long* ptransportType/*[out,retval]*/);
  long            __fastcall get_TransportType(void);
  HRESULT         __fastcall set_SasSequence(long psasSequence/*[in]*/);
  HRESULT         __fastcall get_SasSequence(long* psasSequence/*[out,retval]*/);
  long            __fastcall get_SasSequence(void);
  HRESULT         __fastcall set_EncryptionEnabled(long pencryptionEnabled/*[in]*/);
  HRESULT         __fastcall get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/);
  long            __fastcall get_EncryptionEnabled(void);
  HRESULT         __fastcall set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/);
  HRESULT         __fastcall get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/);
  long            __fastcall get_DedicatedTerminal(void);
  HRESULT         __fastcall set_RDPPort(long prdpPort/*[in]*/);
  HRESULT         __fastcall get_RDPPort(long* prdpPort/*[out,retval]*/);
  long            __fastcall get_RDPPort(void);
  HRESULT         __fastcall set_EnableMouse(long penableMouse/*[in]*/);
  HRESULT         __fastcall get_EnableMouse(long* penableMouse/*[out,retval]*/);
  long            __fastcall get_EnableMouse(void);
  HRESULT         __fastcall set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/);
  HRESULT         __fastcall get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/);
  long            __fastcall get_DisableCtrlAltDel(void);
  HRESULT         __fastcall set_EnableWindowsKey(long penableWindowsKey/*[in]*/);
  HRESULT         __fastcall get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/);
  long            __fastcall get_EnableWindowsKey(void);
  HRESULT         __fastcall set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/);
  HRESULT         __fastcall get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/);
  long            __fastcall get_DoubleClickDetect(void);
  HRESULT         __fastcall set_MaximizeShell(long pmaximizeShell/*[in]*/);
  HRESULT         __fastcall get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/);
  long            __fastcall get_MaximizeShell(void);
  HRESULT         __fastcall set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/);
  HRESULT         __fastcall get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/);
  long            __fastcall get_HotKeyFullScreen(void);
  HRESULT         __fastcall set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/);
  HRESULT         __fastcall get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/);
  long            __fastcall get_HotKeyCtrlEsc(void);
  HRESULT         __fastcall set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/);
  long            __fastcall get_HotKeyAltEsc(void);
  HRESULT         __fastcall set_HotKeyAltTab(long photKeyAltTab/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/);
  long            __fastcall get_HotKeyAltTab(void);
  HRESULT         __fastcall set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/);
  long            __fastcall get_HotKeyAltShiftTab(void);
  HRESULT         __fastcall set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/);
  HRESULT         __fastcall get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/);
  long            __fastcall get_HotKeyAltSpace(void);
  HRESULT         __fastcall set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/);
  HRESULT         __fastcall get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/);
  long            __fastcall get_HotKeyCtrlAltDel(void);
  HRESULT         __fastcall set_orderDrawThreshold(long porderDrawThreshold/*[in]*/);
  HRESULT         __fastcall get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/);
  long            __fastcall get_orderDrawThreshold(void);
  HRESULT         __fastcall set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/);
  HRESULT         __fastcall get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/);
  long            __fastcall get_BitmapCacheSize(void);
  HRESULT         __fastcall set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCacheSize(void);
  HRESULT         __fastcall set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/);
  HRESULT         __fastcall get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/);
  long            __fastcall get_ScaleBitmapCachesByBPP(void);
  HRESULT         __fastcall set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/);
  HRESULT         __fastcall get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/);
  long            __fastcall get_NumBitmapCaches(void);
  HRESULT         __fastcall set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/);
  HRESULT         __fastcall get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/);
  long            __fastcall get_CachePersistenceActive(void);
  HRESULT         __fastcall set_PersistCacheDirectory(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_brushSupportLevel(long pbrushSupportLevel/*[in]*/);
  HRESULT         __fastcall get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/);
  long            __fastcall get_brushSupportLevel(void);
  HRESULT         __fastcall set_minInputSendInterval(long pminInputSendInterval/*[in]*/);
  HRESULT         __fastcall get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/);
  long            __fastcall get_minInputSendInterval(void);
  HRESULT         __fastcall set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/);
  HRESULT         __fastcall get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/);
  long            __fastcall get_InputEventsAtOnce(void);
  HRESULT         __fastcall set_maxEventCount(long pmaxEventCount/*[in]*/);
  HRESULT         __fastcall get_maxEventCount(long* pmaxEventCount/*[out,retval]*/);
  long            __fastcall get_maxEventCount(void);
  HRESULT         __fastcall set_keepAliveInterval(long pkeepAliveInterval/*[in]*/);
  HRESULT         __fastcall get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/);
  long            __fastcall get_keepAliveInterval(void);
  HRESULT         __fastcall set_shutdownTimeout(long pshutdownTimeout/*[in]*/);
  HRESULT         __fastcall get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/);
  long            __fastcall get_shutdownTimeout(void);
  HRESULT         __fastcall set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/);
  HRESULT         __fastcall get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/);
  long            __fastcall get_overallConnectionTimeout(void);
  HRESULT         __fastcall set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/);
  HRESULT         __fastcall get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/);
  long            __fastcall get_singleConnectionTimeout(void);
  HRESULT         __fastcall set_KeyboardType(long pkeyboardType/*[in]*/);
  HRESULT         __fastcall get_KeyboardType(long* pkeyboardType/*[out,retval]*/);
  long            __fastcall get_KeyboardType(void);
  HRESULT         __fastcall set_KeyboardSubType(long pkeyboardSubType/*[in]*/);
  HRESULT         __fastcall get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/);
  long            __fastcall get_KeyboardSubType(void);
  HRESULT         __fastcall set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/);
  HRESULT         __fastcall get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/);
  long            __fastcall get_KeyboardFunctionKey(void);
  HRESULT         __fastcall set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/);
  HRESULT         __fastcall get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/);
  long            __fastcall get_WinceFixedPalette(void);
  HRESULT         __fastcall set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/);
  HRESULT         __fastcall get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ConnectToServerConsole(void);
  HRESULT         __fastcall set_BitmapPersistence(long pbitmapPersistence/*[in]*/);
  HRESULT         __fastcall get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/);
  long            __fastcall get_BitmapPersistence(void);
  HRESULT         __fastcall set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/);
  HRESULT         __fastcall get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/);
  long            __fastcall get_MinutesToIdleTimeout(void);
  HRESULT         __fastcall set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/);
  HRESULT         __fastcall get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SmartSizing(void);
  HRESULT         __fastcall set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/);
  HRESULT         __fastcall get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrLocalPrintingDocName(void);
  HRESULT         __fastcall set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/);
  HRESULT         __fastcall get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrClipCleanTempDirString(void);
  HRESULT         __fastcall set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/);
  HRESULT         __fastcall get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/);
  BSTR            __fastcall get_RdpdrClipPasteInfoString(void);
  HRESULT         __fastcall set_ClearTextPassword(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/);
  HRESULT         __fastcall get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayConnectionBar(void);
  HRESULT         __fastcall set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/);
  HRESULT         __fastcall get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PinConnectionBar(void);
  HRESULT         __fastcall set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/);
  HRESULT         __fastcall get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GrabFocusOnConnect(void);
  HRESULT         __fastcall set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/);
  HRESULT         __fastcall get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/);
  BSTR            __fastcall get_LoadBalanceInfo(void);
  HRESULT         __fastcall set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/);
  HRESULT         __fastcall get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectDrives(void);
  HRESULT         __fastcall set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/);
  HRESULT         __fastcall get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPrinters(void);
  HRESULT         __fastcall set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/);
  HRESULT         __fastcall get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectPorts(void);
  HRESULT         __fastcall set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/);
  HRESULT         __fastcall get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RedirectSmartCards(void);
  HRESULT         __fastcall set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache16BppSize(void);
  HRESULT         __fastcall set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/);
  HRESULT         __fastcall get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/);
  long            __fastcall get_BitmapVirtualCache24BppSize(void);
  HRESULT         __fastcall set_PerformanceFlags(long pDisableList/*[in]*/);
  HRESULT         __fastcall get_PerformanceFlags(long* pDisableList/*[out,retval]*/);
  long            __fastcall get_PerformanceFlags(void);
  HRESULT         __fastcall set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/);
  HRESULT         __fastcall set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/);
  HRESULT         __fastcall get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_NotifyTSPublicKey(void);
  HRESULT         __fastcall set_Compress(long pcompress/*[in]*/);
  HRESULT         __fastcall get_Compress(long* pcompress/*[out,retval]*/);
  long            __fastcall get_Compress(void);
  HRESULT         __fastcall set_BitmapPeristence(long pbitmapPeristence/*[in]*/);
  HRESULT         __fastcall get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/);
  long            __fastcall get_BitmapPeristence(void);
  HRESULT         __fastcall set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/);
  HRESULT         __fastcall get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/);
  long            __fastcall get_allowBackgroundInput(void);
  HRESULT         __fastcall set_KeyBoardLayoutStr(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_PluginDlls(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconFile(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_IconIndex(long Param1/*[in]*/);
  HRESULT         __fastcall set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/);
  HRESULT         __fastcall get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/);
  long            __fastcall get_ContainerHandledFullScreen(void);
  HRESULT         __fastcall set_DisableRdpdr(long pDisableRdpdr/*[in]*/);
  HRESULT         __fastcall get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/);
  long            __fastcall get_DisableRdpdr(void);

  __property   VARIANT_BOOL    BandwidthDetection = {read = get_BandwidthDetection, write = set_BandwidthDetection};
  __property   Mstsclib_tlb::ClientSpec ClientProtocolSpec = {read = get_ClientProtocolSpec, write = set_ClientProtocolSpec};

  __property   VARIANT_BOOL    AudioCaptureRedirectionMode = {read = get_AudioCaptureRedirectionMode, write = set_AudioCaptureRedirectionMode};
  __property   unsigned        VideoPlaybackMode = {read = get_VideoPlaybackMode, write = set_VideoPlaybackMode};
  __property   VARIANT_BOOL    EnableSuperPan = {read = get_EnableSuperPan, write = set_EnableSuperPan};
  __property   unsigned_long   SuperPanAccelerationFactor = {read = get_SuperPanAccelerationFactor, write = set_SuperPanAccelerationFactor};
  __property   VARIANT_BOOL    NegotiateSecurityLayer = {read = get_NegotiateSecurityLayer, write = set_NegotiateSecurityLayer};
  __property   unsigned        AudioQualityMode = {read = get_AudioQualityMode, write = set_AudioQualityMode};
  __property   VARIANT_BOOL    RedirectDirectX = {read = get_RedirectDirectX, write = set_RedirectDirectX};
  __property   unsigned        NetworkConnectionType = {read = get_NetworkConnectionType, write = set_NetworkConnectionType};

  __property   VARIANT_BOOL    RelativeMouseMode = {read = get_RelativeMouseMode, write = set_RelativeMouseMode};
  __property   BSTR            AuthenticationServiceClass = {read = get_AuthenticationServiceClass, write = set_AuthenticationServiceClass};
  __property   BSTR            PCB = {read = get_PCB, write = set_PCB};
  __property   long            HotKeyFocusReleaseLeft = {read = get_HotKeyFocusReleaseLeft, write = set_HotKeyFocusReleaseLeft};
  __property   long            HotKeyFocusReleaseRight = {read = get_HotKeyFocusReleaseRight, write = set_HotKeyFocusReleaseRight};
  __property   VARIANT_BOOL    EnableCredSspSupport = {read = get_EnableCredSspSupport, write = set_EnableCredSspSupport};
  __property   unsigned        AuthenticationType = {read = get_AuthenticationType};
  __property   VARIANT_BOOL    ConnectToAdministerServer = {read = get_ConnectToAdministerServer, write = set_ConnectToAdministerServer};

  __property   VARIANT_BOOL    RedirectClipboard = {read = get_RedirectClipboard, write = set_RedirectClipboard};
  __property   unsigned        AudioRedirectionMode = {read = get_AudioRedirectionMode, write = set_AudioRedirectionMode};
  __property   VARIANT_BOOL    ConnectionBarShowPinButton = {read = get_ConnectionBarShowPinButton, write = set_ConnectionBarShowPinButton};
  __property   VARIANT_BOOL    PublicMode = {read = get_PublicMode, write = set_PublicMode};
  __property   VARIANT_BOOL    RedirectDevices = {read = get_RedirectDevices, write = set_RedirectDevices};
  __property   VARIANT_BOOL    RedirectPOSDevices = {read = get_RedirectPOSDevices, write = set_RedirectPOSDevices};
  __property   long            BitmapVirtualCache32BppSize = {read = get_BitmapVirtualCache32BppSize, write = set_BitmapVirtualCache32BppSize};

  __property   unsigned        AuthenticationLevel = {read = get_AuthenticationLevel, write = set_AuthenticationLevel};

  __property   VARIANT_BOOL    ConnectionBarShowMinimizeButton = {read = get_ConnectionBarShowMinimizeButton, write = set_ConnectionBarShowMinimizeButton};
  __property   VARIANT_BOOL    ConnectionBarShowRestoreButton = {read = get_ConnectionBarShowRestoreButton, write = set_ConnectionBarShowRestoreButton};

  __property   VARIANT_BOOL    CanAutoReconnect = {read = get_CanAutoReconnect};
  __property   VARIANT_BOOL    EnableAutoReconnect = {read = get_EnableAutoReconnect, write = set_EnableAutoReconnect};
  __property   long            MaxReconnectAttempts = {read = get_MaxReconnectAttempts, write = set_MaxReconnectAttempts};

  __property   long            SmoothScroll = {read = get_SmoothScroll, write = set_SmoothScroll};
  __property   long            AcceleratorPassthrough = {read = get_AcceleratorPassthrough, write = set_AcceleratorPassthrough};
  __property   long            ShadowBitmap = {read = get_ShadowBitmap, write = set_ShadowBitmap};
  __property   long            TransportType = {read = get_TransportType, write = set_TransportType};
  __property   long            SasSequence = {read = get_SasSequence, write = set_SasSequence};
  __property   long            EncryptionEnabled = {read = get_EncryptionEnabled, write = set_EncryptionEnabled};
  __property   long            DedicatedTerminal = {read = get_DedicatedTerminal, write = set_DedicatedTerminal};
  __property   long            RDPPort = {read = get_RDPPort, write = set_RDPPort};
  __property   long            EnableMouse = {read = get_EnableMouse, write = set_EnableMouse};
  __property   long            DisableCtrlAltDel = {read = get_DisableCtrlAltDel, write = set_DisableCtrlAltDel};
  __property   long            EnableWindowsKey = {read = get_EnableWindowsKey, write = set_EnableWindowsKey};
  __property   long            DoubleClickDetect = {read = get_DoubleClickDetect, write = set_DoubleClickDetect};
  __property   long            MaximizeShell = {read = get_MaximizeShell, write = set_MaximizeShell};
  __property   long            HotKeyFullScreen = {read = get_HotKeyFullScreen, write = set_HotKeyFullScreen};
  __property   long            HotKeyCtrlEsc = {read = get_HotKeyCtrlEsc, write = set_HotKeyCtrlEsc};
  __property   long            HotKeyAltEsc = {read = get_HotKeyAltEsc, write = set_HotKeyAltEsc};
  __property   long            HotKeyAltTab = {read = get_HotKeyAltTab, write = set_HotKeyAltTab};
  __property   long            HotKeyAltShiftTab = {read = get_HotKeyAltShiftTab, write = set_HotKeyAltShiftTab};
  __property   long            HotKeyAltSpace = {read = get_HotKeyAltSpace, write = set_HotKeyAltSpace};
  __property   long            HotKeyCtrlAltDel = {read = get_HotKeyCtrlAltDel, write = set_HotKeyCtrlAltDel};
  __property   long            orderDrawThreshold = {read = get_orderDrawThreshold, write = set_orderDrawThreshold};
  __property   long            BitmapCacheSize = {read = get_BitmapCacheSize, write = set_BitmapCacheSize};
  __property   long            BitmapVirtualCacheSize = {read = get_BitmapVirtualCacheSize, write = set_BitmapVirtualCacheSize};
  __property   long            ScaleBitmapCachesByBPP = {read = get_ScaleBitmapCachesByBPP, write = set_ScaleBitmapCachesByBPP};
  __property   long            NumBitmapCaches = {read = get_NumBitmapCaches, write = set_NumBitmapCaches};
  __property   long            CachePersistenceActive = {read = get_CachePersistenceActive, write = set_CachePersistenceActive};
  __property   BSTR            PersistCacheDirectory = {write = set_PersistCacheDirectory};
  __property   long            brushSupportLevel = {read = get_brushSupportLevel, write = set_brushSupportLevel};
  __property   long            minInputSendInterval = {read = get_minInputSendInterval, write = set_minInputSendInterval};
  __property   long            InputEventsAtOnce = {read = get_InputEventsAtOnce, write = set_InputEventsAtOnce};
  __property   long            maxEventCount = {read = get_maxEventCount, write = set_maxEventCount};
  __property   long            keepAliveInterval = {read = get_keepAliveInterval, write = set_keepAliveInterval};
  __property   long            shutdownTimeout = {read = get_shutdownTimeout, write = set_shutdownTimeout};
  __property   long            overallConnectionTimeout = {read = get_overallConnectionTimeout, write = set_overallConnectionTimeout};
  __property   long            singleConnectionTimeout = {read = get_singleConnectionTimeout, write = set_singleConnectionTimeout};
  __property   long            KeyboardType = {read = get_KeyboardType, write = set_KeyboardType};
  __property   long            KeyboardSubType = {read = get_KeyboardSubType, write = set_KeyboardSubType};
  __property   long            KeyboardFunctionKey = {read = get_KeyboardFunctionKey, write = set_KeyboardFunctionKey};
  __property   long            WinceFixedPalette = {read = get_WinceFixedPalette, write = set_WinceFixedPalette};
  __property   VARIANT_BOOL    ConnectToServerConsole = {read = get_ConnectToServerConsole, write = set_ConnectToServerConsole};
  __property   long            BitmapPersistence = {read = get_BitmapPersistence, write = set_BitmapPersistence};
  __property   long            MinutesToIdleTimeout = {read = get_MinutesToIdleTimeout, write = set_MinutesToIdleTimeout};
  __property   VARIANT_BOOL    SmartSizing = {read = get_SmartSizing, write = set_SmartSizing};
  __property   BSTR            RdpdrLocalPrintingDocName = {read = get_RdpdrLocalPrintingDocName, write = set_RdpdrLocalPrintingDocName};
  __property   BSTR            RdpdrClipCleanTempDirString = {read = get_RdpdrClipCleanTempDirString, write = set_RdpdrClipCleanTempDirString};
  __property   BSTR            RdpdrClipPasteInfoString = {read = get_RdpdrClipPasteInfoString, write = set_RdpdrClipPasteInfoString};
  __property   BSTR            ClearTextPassword = {write = set_ClearTextPassword};
  __property   VARIANT_BOOL    DisplayConnectionBar = {read = get_DisplayConnectionBar, write = set_DisplayConnectionBar};
  __property   VARIANT_BOOL    PinConnectionBar = {read = get_PinConnectionBar, write = set_PinConnectionBar};
  __property   VARIANT_BOOL    GrabFocusOnConnect = {read = get_GrabFocusOnConnect, write = set_GrabFocusOnConnect};
  __property   BSTR            LoadBalanceInfo = {read = get_LoadBalanceInfo, write = set_LoadBalanceInfo};
  __property   VARIANT_BOOL    RedirectDrives = {read = get_RedirectDrives, write = set_RedirectDrives};
  __property   VARIANT_BOOL    RedirectPrinters = {read = get_RedirectPrinters, write = set_RedirectPrinters};
  __property   VARIANT_BOOL    RedirectPorts = {read = get_RedirectPorts, write = set_RedirectPorts};
  __property   VARIANT_BOOL    RedirectSmartCards = {read = get_RedirectSmartCards, write = set_RedirectSmartCards};
  __property   long            BitmapVirtualCache16BppSize = {read = get_BitmapVirtualCache16BppSize, write = set_BitmapVirtualCache16BppSize};
  __property   long            BitmapVirtualCache24BppSize = {read = get_BitmapVirtualCache24BppSize, write = set_BitmapVirtualCache24BppSize};
  __property   long            PerformanceFlags = {read = get_PerformanceFlags, write = set_PerformanceFlags};
  __property   VARIANT_BOOL    NotifyTSPublicKey = {read = get_NotifyTSPublicKey, write = set_NotifyTSPublicKey};

  __property   long            Compress = {read = get_Compress, write = set_Compress};
  __property   long            BitmapPeristence = {read = get_BitmapPeristence, write = set_BitmapPeristence};
  __property   long            allowBackgroundInput = {read = get_allowBackgroundInput, write = set_allowBackgroundInput};
  __property   BSTR            KeyBoardLayoutStr = {write = set_KeyBoardLayoutStr};
  __property   BSTR            PluginDlls = {write = set_PluginDlls};
  __property   BSTR            IconFile = {write = set_IconFile};
  __property   long            IconIndex = {write = set_IconIndex};
  __property   long            ContainerHandledFullScreen = {read = get_ContainerHandledFullScreen, write = set_ContainerHandledFullScreen};
  __property   long            DisableRdpdr = {read = get_DisableRdpdr, write = set_DisableRdpdr};
};
typedef IMsRdpClientAdvancedSettings8DispT<IMsRdpClientAdvancedSettings8> IMsRdpClientAdvancedSettings8Disp;

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient9
// Interface: IMsRdpClient9
// *********************************************************************//
template <class T /* IMsRdpClient9 */ >
class TCOMIMsRdpClient9T : public TComInterface<IMsRdpClient9>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMsRdpClient9T() {}
  TCOMIMsRdpClient9T(IMsRdpClient9 *intf, bool addRef = false) : TComInterface<IMsRdpClient9>(intf, addRef) {}
  TCOMIMsRdpClient9T(const TCOMIMsRdpClient9T& src) : TComInterface<IMsRdpClient9>(src) {}
  TCOMIMsRdpClient9T& operator=(const TCOMIMsRdpClient9T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_TransportSettings4(Mstsclib_tlb::IMsRdpClientTransportSettings4** ppXportSet4/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettings4Ptr __fastcall get_TransportSettings4(void);
  HRESULT         __fastcall SyncSessionDisplaySettings(void);
  HRESULT         __fastcall UpdateSessionDisplaySettings(unsigned_long ulDesktopWidth/*[in]*/, 
                                                          unsigned_long ulDesktopHeight/*[in]*/, 
                                                          unsigned_long ulPhysicalWidth/*[in]*/, 
                                                          unsigned_long ulPhysicalHeight/*[in]*/, 
                                                          unsigned_long ulOrientation/*[in]*/, 
                                                          unsigned_long ulDesktopScaleFactor/*[in]*/, 
                                                          unsigned_long ulDeviceScaleFactor/*[in]*/);
  HRESULT         __fastcall attachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/);
  HRESULT         __fastcall detachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/);

  __property   Mstsclib_tlb::IMsRdpClientTransportSettings4Ptr TransportSettings4 = {read = get_TransportSettings4};
};
typedef TCOMIMsRdpClient9T<IMsRdpClient9> TCOMIMsRdpClient9;

// *********************************************************************//
// DispIntf:  IMsRdpClient9
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {28904001-04B6-436C-A55B-0AF1A0883DC9}
// *********************************************************************//
template<class T>
class IMsRdpClient9DispT : public TAutoDriver<IMsRdpClient9>
{
public:
  IMsRdpClient9DispT(){}

  IMsRdpClient9DispT(IMsRdpClient9 *pintf)
  {
    TAutoDriver<IMsRdpClient9>::Bind(pintf, false);
  }

  IMsRdpClient9DispT(IMsRdpClient9Ptr pintf)
  {
    TAutoDriver<IMsRdpClient9>::Bind(pintf, true);
  }

  IMsRdpClient9DispT& operator=(IMsRdpClient9 *pintf)
  {
    TAutoDriver<IMsRdpClient9>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClient9DispT& operator=(IMsRdpClient9Ptr pintf)
  {
    TAutoDriver<IMsRdpClient9>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MsRdpClient9NotSafeForScripting));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MsRdpClient9NotSafeForScripting);
  }

  HRESULT         __fastcall get_TransportSettings4(Mstsclib_tlb::IMsRdpClientTransportSettings4** ppXportSet4/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettings4Ptr __fastcall get_TransportSettings4(void);
  HRESULT         __fastcall SyncSessionDisplaySettings();
  HRESULT         __fastcall UpdateSessionDisplaySettings(unsigned_long ulDesktopWidth/*[in]*/, 
                                                          unsigned_long ulDesktopHeight/*[in]*/, 
                                                          unsigned_long ulPhysicalWidth/*[in]*/, 
                                                          unsigned_long ulPhysicalHeight/*[in]*/, 
                                                          unsigned_long ulOrientation/*[in]*/, 
                                                          unsigned_long ulDesktopScaleFactor/*[in]*/
                                                          , 
                                                          unsigned_long ulDeviceScaleFactor/*[in]*/);
  HRESULT         __fastcall attachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/);
  HRESULT         __fastcall detachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/);
  HRESULT         __fastcall SendRemoteAction(Mstsclib_tlb::RemoteSessionActionType actionType/*[in]*/);
  HRESULT         __fastcall get_AdvancedSettings9(Mstsclib_tlb::IMsRdpClientAdvancedSettings8** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr __fastcall get_AdvancedSettings9(void);
  HRESULT         __fastcall Reconnect(unsigned_long ulWidth/*[in]*/, unsigned_long ulHeight/*[in]*/
                                       , 
                                       Mstsclib_tlb::ControlReconnectStatus* pReconnectStatus/*[out,retval]*/);
  Mstsclib_tlb::ControlReconnectStatus __fastcall Reconnect(unsigned_long ulWidth/*[in]*/, 
                                                            unsigned_long ulHeight/*[in]*/);
  HRESULT         __fastcall get_AdvancedSettings8(Mstsclib_tlb::IMsRdpClientAdvancedSettings7** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr __fastcall get_AdvancedSettings8(void);
  HRESULT         __fastcall get_TransportSettings3(Mstsclib_tlb::IMsRdpClientTransportSettings3** ppXportSet3/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr __fastcall get_TransportSettings3(void);
  HRESULT         __fastcall GetStatusText(unsigned statusCode/*[in]*/, 
                                           BSTR* pBstrStatusText/*[out,retval]*/);
  BSTR            __fastcall GetStatusText(unsigned statusCode/*[in]*/);
  HRESULT         __fastcall get_SecuredSettings3(Mstsclib_tlb::IMsRdpClientSecuredSettings2** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr __fastcall get_SecuredSettings3(void);
  HRESULT         __fastcall get_RemoteProgram2(Mstsclib_tlb::ITSRemoteProgram2** ppRemoteProgram/*[out,retval]*/);
  Mstsclib_tlb::ITSRemoteProgram2Ptr __fastcall get_RemoteProgram2(void);
  HRESULT         __fastcall get_AdvancedSettings7(Mstsclib_tlb::IMsRdpClientAdvancedSettings6** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr __fastcall get_AdvancedSettings7(void);
  HRESULT         __fastcall get_TransportSettings2(Mstsclib_tlb::IMsRdpClientTransportSettings2** ppXportSet2/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr __fastcall get_TransportSettings2(void);
  HRESULT         __fastcall get_TransportSettings(Mstsclib_tlb::IMsRdpClientTransportSettings** ppXportSet/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettingsPtr __fastcall get_TransportSettings(void);
  HRESULT         __fastcall get_AdvancedSettings6(Mstsclib_tlb::IMsRdpClientAdvancedSettings5** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr __fastcall get_AdvancedSettings6(void);
  HRESULT         __fastcall GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                                 unsigned ExtendedDisconnectReason/*[in]*/, 
                                                 BSTR* pBstrErrorMsg/*[out,retval]*/);
  BSTR            __fastcall GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                                 unsigned ExtendedDisconnectReason/*[in]*/);
  HRESULT         __fastcall get_RemoteProgram(Mstsclib_tlb::ITSRemoteProgram** ppRemoteProgram/*[out,retval]*/);
  Mstsclib_tlb::ITSRemoteProgramPtr __fastcall get_RemoteProgram(void);
  HRESULT         __fastcall get_MsRdpClientShell(Mstsclib_tlb::IMsRdpClientShell** ppLauncher/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientShellPtr __fastcall get_MsRdpClientShell(void);
  HRESULT         __fastcall get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall get_AdvancedSettings5(void);
  HRESULT         __fastcall get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall get_AdvancedSettings4(void);
  HRESULT         __fastcall get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall get_AdvancedSettings3(void);
  HRESULT         __fastcall set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/);
  HRESULT         __fastcall get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectedStatusText(void);
  HRESULT         __fastcall set_ColorDepth(long pcolorDepth/*[in]*/);
  HRESULT         __fastcall get_ColorDepth(long* pcolorDepth/*[out,retval]*/);
  long            __fastcall get_ColorDepth(void);
  HRESULT         __fastcall get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall get_AdvancedSettings2(void);
  HRESULT         __fastcall get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall get_SecuredSettings2(void);
  HRESULT         __fastcall get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/);
  Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall get_ExtendedDisconnectReason(void);
  HRESULT         __fastcall set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/);
  HRESULT         __fastcall get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullScreen(void);
  HRESULT         __fastcall SetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long chanOptions/*[in]*/);
  HRESULT         __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long* pChanOptions/*[out,retval]*/);
  long            __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/);
  HRESULT         __fastcall RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/);
  Mstsclib_tlb::ControlCloseStatus __fastcall RequestClose(void);
  HRESULT         __fastcall set_Server(BSTR pServer/*[in]*/);
  HRESULT         __fastcall get_Server(BSTR* pServer/*[out,retval]*/);
  BSTR            __fastcall get_Server(void);
  HRESULT         __fastcall set_Domain(BSTR pDomain/*[in]*/);
  HRESULT         __fastcall get_Domain(BSTR* pDomain/*[out,retval]*/);
  BSTR            __fastcall get_Domain(void);
  HRESULT         __fastcall set_UserName(BSTR pUserName/*[in]*/);
  HRESULT         __fastcall get_UserName(BSTR* pUserName/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall set_DisconnectedText(BSTR pDisconnectedText/*[in]*/);
  HRESULT         __fastcall get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/);
  BSTR            __fastcall get_DisconnectedText(void);
  HRESULT         __fastcall set_ConnectingText(BSTR pConnectingText/*[in]*/);
  HRESULT         __fastcall get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectingText(void);
  HRESULT         __fastcall get_Connected(short* pIsConnected/*[out,retval]*/);
  short           __fastcall get_Connected(void);
  HRESULT         __fastcall set_DesktopWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopWidth(void);
  HRESULT         __fastcall set_DesktopHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopHeight(void);
  HRESULT         __fastcall set_StartConnected(long pfStartConnected/*[in]*/);
  HRESULT         __fastcall get_StartConnected(long* pfStartConnected/*[out,retval]*/);
  long            __fastcall get_StartConnected(void);
  HRESULT         __fastcall get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/);
  long            __fastcall get_HorizontalScrollBarVisible(void);
  HRESULT         __fastcall get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/);
  long            __fastcall get_VerticalScrollBarVisible(void);
  HRESULT         __fastcall set_FullScreenTitle(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_CipherStrength(long* pCipherStrength/*[out,retval]*/);
  long            __fastcall get_CipherStrength(void);
  HRESULT         __fastcall get_Version(BSTR* pVersion/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/);
  long            __fastcall get_SecuredSettingsEnabled(void);
  HRESULT         __fastcall get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall get_SecuredSettings(void);
  HRESULT         __fastcall get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall get_AdvancedSettings(void);
  HRESULT         __fastcall get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/);
  Mstsclib_tlb::IMsTscDebugPtr __fastcall get_Debugger(void);
  HRESULT         __fastcall Connect();
  HRESULT         __fastcall Disconnect();
  HRESULT         __fastcall CreateVirtualChannels(BSTR newVal/*[in]*/);
  HRESULT         __fastcall SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/);

  __property   Mstsclib_tlb::IMsRdpClientTransportSettings4Ptr TransportSettings4 = {read = get_TransportSettings4};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr AdvancedSettings9 = {read = get_AdvancedSettings9};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr AdvancedSettings8 = {read = get_AdvancedSettings8};
  __property   Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr TransportSettings3 = {read = get_TransportSettings3};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr SecuredSettings3 = {read = get_SecuredSettings3};
  __property   Mstsclib_tlb::ITSRemoteProgram2Ptr RemoteProgram2 = {read = get_RemoteProgram2};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr AdvancedSettings7 = {read = get_AdvancedSettings7};
  __property   Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr TransportSettings2 = {read = get_TransportSettings2};

  __property   Mstsclib_tlb::IMsRdpClientTransportSettingsPtr TransportSettings = {read = get_TransportSettings};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr AdvancedSettings6 = {read = get_AdvancedSettings6};
  __property   Mstsclib_tlb::ITSRemoteProgramPtr RemoteProgram = {read = get_RemoteProgram};
  __property   Mstsclib_tlb::IMsRdpClientShellPtr MsRdpClientShell = {read = get_MsRdpClientShell};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr AdvancedSettings5 = {read = get_AdvancedSettings5};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr AdvancedSettings4 = {read = get_AdvancedSettings4};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr AdvancedSettings3 = {read = get_AdvancedSettings3};
  __property   BSTR            ConnectedStatusText = {read = get_ConnectedStatusText, write = set_ConnectedStatusText};

  __property   long            ColorDepth = {read = get_ColorDepth, write = set_ColorDepth};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr AdvancedSettings2 = {read = get_AdvancedSettings2};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr SecuredSettings2 = {read = get_SecuredSettings2};
  __property   Mstsclib_tlb::ExtendedDisconnectReasonCode ExtendedDisconnectReason = {read = get_ExtendedDisconnectReason};
  __property   VARIANT_BOOL    FullScreen = {read = get_FullScreen, write = set_FullScreen};

  __property   BSTR            Server = {read = get_Server, write = set_Server};
  __property   BSTR            Domain = {read = get_Domain, write = set_Domain};
  __property   BSTR            UserName = {read = get_UserName, write = set_UserName};
  __property   BSTR            DisconnectedText = {read = get_DisconnectedText, write = set_DisconnectedText};
  __property   BSTR            ConnectingText = {read = get_ConnectingText, write = set_ConnectingText};
  __property   short           Connected = {read = get_Connected};
  __property   long            DesktopWidth = {read = get_DesktopWidth, write = set_DesktopWidth};
  __property   long            DesktopHeight = {read = get_DesktopHeight, write = set_DesktopHeight};
  __property   long            StartConnected = {read = get_StartConnected, write = set_StartConnected};
  __property   long            HorizontalScrollBarVisible = {read = get_HorizontalScrollBarVisible};
  __property   long            VerticalScrollBarVisible = {read = get_VerticalScrollBarVisible};
  __property   BSTR            FullScreenTitle = {write = set_FullScreenTitle};
  __property   long            CipherStrength = {read = get_CipherStrength};
  __property   BSTR            Version = {read = get_Version};
  __property   long            SecuredSettingsEnabled = {read = get_SecuredSettingsEnabled};
  __property   Mstsclib_tlb::IMsTscSecuredSettingsPtr SecuredSettings = {read = get_SecuredSettings};
  __property   Mstsclib_tlb::IMsTscAdvancedSettingsPtr AdvancedSettings = {read = get_AdvancedSettings};
  __property   Mstsclib_tlb::IMsTscDebugPtr Debugger = {read = get_Debugger};

};
typedef IMsRdpClient9DispT<IMsRdpClient9> IMsRdpClient9Disp;

typedef TComInterface<IMsRdpClientTransportSettings4>  TCOMIMsRdpClientTransportSettings4;

// *********************************************************************//
// DispIntf:  IMsRdpClientTransportSettings4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {011C3236-4D81-4515-9143-067AB630D299}
// *********************************************************************//
template<class T>
class IMsRdpClientTransportSettings4DispT : public TAutoDriver<IMsRdpClientTransportSettings4>
{
public:
  IMsRdpClientTransportSettings4DispT(){}

  IMsRdpClientTransportSettings4DispT(IMsRdpClientTransportSettings4 *pintf)
  {
    TAutoDriver<IMsRdpClientTransportSettings4>::Bind(pintf, false);
  }

  IMsRdpClientTransportSettings4DispT(IMsRdpClientTransportSettings4Ptr pintf)
  {
    TAutoDriver<IMsRdpClientTransportSettings4>::Bind(pintf, true);
  }

  IMsRdpClientTransportSettings4DispT& operator=(IMsRdpClientTransportSettings4 *pintf)
  {
    TAutoDriver<IMsRdpClientTransportSettings4>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClientTransportSettings4DispT& operator=(IMsRdpClientTransportSettings4Ptr pintf)
  {
    TAutoDriver<IMsRdpClientTransportSettings4>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_GatewayBrokeringType(unsigned_long Param1/*[in]*/);
  HRESULT         __fastcall set_GatewayCredSourceCookie(unsigned_long pulProxyCredSourceCookie/*[in]*/);
  HRESULT         __fastcall get_GatewayCredSourceCookie(unsigned_long* pulProxyCredSourceCookie/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayCredSourceCookie(void);
  HRESULT         __fastcall set_GatewayAuthCookieServerAddr(BSTR pbstrProxyAuthCookieServerAddr/*[in]*/);
  HRESULT         __fastcall get_GatewayAuthCookieServerAddr(BSTR* pbstrProxyAuthCookieServerAddr/*[out,retval]*/);
  BSTR            __fastcall get_GatewayAuthCookieServerAddr(void);
  HRESULT         __fastcall set_GatewayEncryptedAuthCookie(BSTR pbstrEncryptedAuthCookie/*[in]*/);
  HRESULT         __fastcall get_GatewayEncryptedAuthCookie(BSTR* pbstrEncryptedAuthCookie/*[out,retval]*/);
  BSTR            __fastcall get_GatewayEncryptedAuthCookie(void);
  HRESULT         __fastcall set_GatewayEncryptedAuthCookieSize(unsigned_long pulEncryptedAuthCookieSize/*[in]*/);
  HRESULT         __fastcall get_GatewayEncryptedAuthCookieSize(unsigned_long* pulEncryptedAuthCookieSize/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayEncryptedAuthCookieSize(void);
  HRESULT         __fastcall set_GatewayAuthLoginPage(BSTR pbstrProxyAuthLoginPage/*[in]*/);
  HRESULT         __fastcall get_GatewayAuthLoginPage(BSTR* pbstrProxyAuthLoginPage/*[out,retval]*/);
  BSTR            __fastcall get_GatewayAuthLoginPage(void);
  HRESULT         __fastcall set_GatewayCredSharing(unsigned_long pulProxyCredSharing/*[in]*/);
  HRESULT         __fastcall get_GatewayCredSharing(unsigned_long* pulProxyCredSharing/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayCredSharing(void);
  HRESULT         __fastcall set_GatewayPreAuthRequirement(unsigned_long pulProxyPreAuthRequirement/*[in]*/);
  HRESULT         __fastcall get_GatewayPreAuthRequirement(unsigned_long* pulProxyPreAuthRequirement/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayPreAuthRequirement(void);
  HRESULT         __fastcall set_GatewayPreAuthServerAddr(BSTR pbstrProxyPreAuthServerAddr/*[in]*/);
  HRESULT         __fastcall get_GatewayPreAuthServerAddr(BSTR* pbstrProxyPreAuthServerAddr/*[out,retval]*/);
  BSTR            __fastcall get_GatewayPreAuthServerAddr(void);
  HRESULT         __fastcall set_GatewaySupportUrl(BSTR pbstrProxySupportUrl/*[in]*/);
  HRESULT         __fastcall get_GatewaySupportUrl(BSTR* pbstrProxySupportUrl/*[out,retval]*/);
  BSTR            __fastcall get_GatewaySupportUrl(void);
  HRESULT         __fastcall set_GatewayEncryptedOtpCookie(BSTR pbstrEncryptedOtpCookie/*[in]*/);
  HRESULT         __fastcall get_GatewayEncryptedOtpCookie(BSTR* pbstrEncryptedOtpCookie/*[out,retval]*/);
  BSTR            __fastcall get_GatewayEncryptedOtpCookie(void);
  HRESULT         __fastcall set_GatewayEncryptedOtpCookieSize(unsigned_long pulEncryptedOtpCookieSize/*[in]*/);
  HRESULT         __fastcall get_GatewayEncryptedOtpCookieSize(unsigned_long* pulEncryptedOtpCookieSize/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayEncryptedOtpCookieSize(void);
  HRESULT         __fastcall set_GatewayUsername(BSTR pProxyUsername/*[in]*/);
  HRESULT         __fastcall get_GatewayUsername(BSTR* pProxyUsername/*[out,retval]*/);
  BSTR            __fastcall get_GatewayUsername(void);
  HRESULT         __fastcall set_GatewayDomain(BSTR pProxyDomain/*[in]*/);
  HRESULT         __fastcall get_GatewayDomain(BSTR* pProxyDomain/*[out,retval]*/);
  BSTR            __fastcall get_GatewayDomain(void);
  HRESULT         __fastcall set_GatewayPassword(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_GatewayHostname(BSTR pProxyHostname/*[in]*/);
  HRESULT         __fastcall get_GatewayHostname(BSTR* pProxyHostname/*[out,retval]*/);
  BSTR            __fastcall get_GatewayHostname(void);
  HRESULT         __fastcall set_GatewayUsageMethod(unsigned_long pulProxyUsageMethod/*[in]*/);
  HRESULT         __fastcall get_GatewayUsageMethod(unsigned_long* pulProxyUsageMethod/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayUsageMethod(void);
  HRESULT         __fastcall set_GatewayProfileUsageMethod(unsigned_long pulProxyProfileUsageMethod/*[in]*/);
  HRESULT         __fastcall get_GatewayProfileUsageMethod(unsigned_long* pulProxyProfileUsageMethod/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayProfileUsageMethod(void);
  HRESULT         __fastcall set_GatewayCredsSource(unsigned_long pulProxyCredsSource/*[in]*/);
  HRESULT         __fastcall get_GatewayCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayCredsSource(void);
  HRESULT         __fastcall set_GatewayUserSelectedCredsSource(unsigned_long pulProxyCredsSource/*[in]*/);
  HRESULT         __fastcall get_GatewayUserSelectedCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayUserSelectedCredsSource(void);
  HRESULT         __fastcall get_GatewayIsSupported(long* pfProxyIsSupported/*[out,retval]*/);
  long            __fastcall get_GatewayIsSupported(void);
  HRESULT         __fastcall get_GatewayDefaultUsageMethod(unsigned_long* pulProxyDefaultUsageMethod/*[out,retval]*/);
  unsigned_long   __fastcall get_GatewayDefaultUsageMethod(void);

  __property   unsigned_long   GatewayBrokeringType = {write = set_GatewayBrokeringType};

  __property   unsigned_long   GatewayCredSourceCookie = {read = get_GatewayCredSourceCookie, write = set_GatewayCredSourceCookie};
  __property   BSTR            GatewayAuthCookieServerAddr = {read = get_GatewayAuthCookieServerAddr, write = set_GatewayAuthCookieServerAddr};
  __property   BSTR            GatewayEncryptedAuthCookie = {read = get_GatewayEncryptedAuthCookie, write = set_GatewayEncryptedAuthCookie};
  __property   unsigned_long   GatewayEncryptedAuthCookieSize = {read = get_GatewayEncryptedAuthCookieSize, write = set_GatewayEncryptedAuthCookieSize};
  __property   BSTR            GatewayAuthLoginPage = {read = get_GatewayAuthLoginPage, write = set_GatewayAuthLoginPage};

  __property   unsigned_long   GatewayCredSharing = {read = get_GatewayCredSharing, write = set_GatewayCredSharing};
  __property   unsigned_long   GatewayPreAuthRequirement = {read = get_GatewayPreAuthRequirement, write = set_GatewayPreAuthRequirement};
  __property   BSTR            GatewayPreAuthServerAddr = {read = get_GatewayPreAuthServerAddr, write = set_GatewayPreAuthServerAddr};
  __property   BSTR            GatewaySupportUrl = {read = get_GatewaySupportUrl, write = set_GatewaySupportUrl};
  __property   BSTR            GatewayEncryptedOtpCookie = {read = get_GatewayEncryptedOtpCookie, write = set_GatewayEncryptedOtpCookie};
  __property   unsigned_long   GatewayEncryptedOtpCookieSize = {read = get_GatewayEncryptedOtpCookieSize, write = set_GatewayEncryptedOtpCookieSize};
  __property   BSTR            GatewayUsername = {read = get_GatewayUsername, write = set_GatewayUsername};
  __property   BSTR            GatewayDomain = {read = get_GatewayDomain, write = set_GatewayDomain};
  __property   BSTR            GatewayPassword = {write = set_GatewayPassword};

  __property   BSTR            GatewayHostname = {read = get_GatewayHostname, write = set_GatewayHostname};
  __property   unsigned_long   GatewayUsageMethod = {read = get_GatewayUsageMethod, write = set_GatewayUsageMethod};
  __property   unsigned_long   GatewayProfileUsageMethod = {read = get_GatewayProfileUsageMethod, write = set_GatewayProfileUsageMethod};
  __property   unsigned_long   GatewayCredsSource = {read = get_GatewayCredsSource, write = set_GatewayCredsSource};
  __property   unsigned_long   GatewayUserSelectedCredsSource = {read = get_GatewayUserSelectedCredsSource, write = set_GatewayUserSelectedCredsSource};
  __property   long            GatewayIsSupported = {read = get_GatewayIsSupported};
  __property   unsigned_long   GatewayDefaultUsageMethod = {read = get_GatewayDefaultUsageMethod};
};
typedef IMsRdpClientTransportSettings4DispT<IMsRdpClientTransportSettings4> IMsRdpClientTransportSettings4Disp;

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient10
// Interface: IMsRdpClient10
// *********************************************************************//
template <class T /* IMsRdpClient10 */ >
class TCOMIMsRdpClient10T : public TComInterface<IMsRdpClient10>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMsRdpClient10T() {}
  TCOMIMsRdpClient10T(IMsRdpClient10 *intf, bool addRef = false) : TComInterface<IMsRdpClient10>(intf, addRef) {}
  TCOMIMsRdpClient10T(const TCOMIMsRdpClient10T& src) : TComInterface<IMsRdpClient10>(src) {}
  TCOMIMsRdpClient10T& operator=(const TCOMIMsRdpClient10T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_RemoteProgram3(Mstsclib_tlb::ITSRemoteProgram3** ppRemoteProgram/*[out,retval]*/);
  Mstsclib_tlb::ITSRemoteProgram3Ptr __fastcall get_RemoteProgram3(void);

  __property   Mstsclib_tlb::ITSRemoteProgram3Ptr RemoteProgram3 = {read = get_RemoteProgram3};
};
typedef TCOMIMsRdpClient10T<IMsRdpClient10> TCOMIMsRdpClient10;

// *********************************************************************//
// DispIntf:  IMsRdpClient10
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7ED92C39-EB38-4927-A70A-708AC5A59321}
// *********************************************************************//
template<class T>
class IMsRdpClient10DispT : public TAutoDriver<IMsRdpClient10>
{
public:
  IMsRdpClient10DispT(){}

  IMsRdpClient10DispT(IMsRdpClient10 *pintf)
  {
    TAutoDriver<IMsRdpClient10>::Bind(pintf, false);
  }

  IMsRdpClient10DispT(IMsRdpClient10Ptr pintf)
  {
    TAutoDriver<IMsRdpClient10>::Bind(pintf, true);
  }

  IMsRdpClient10DispT& operator=(IMsRdpClient10 *pintf)
  {
    TAutoDriver<IMsRdpClient10>::Bind(pintf, false);
    return *this;
  }

  IMsRdpClient10DispT& operator=(IMsRdpClient10Ptr pintf)
  {
    TAutoDriver<IMsRdpClient10>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MsRdpClient10NotSafeForScripting));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MsRdpClient10NotSafeForScripting);
  }

  HRESULT         __fastcall get_RemoteProgram3(Mstsclib_tlb::ITSRemoteProgram3** ppRemoteProgram/*[out,retval]*/);
  Mstsclib_tlb::ITSRemoteProgram3Ptr __fastcall get_RemoteProgram3(void);
  HRESULT         __fastcall get_TransportSettings4(Mstsclib_tlb::IMsRdpClientTransportSettings4** ppXportSet4/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettings4Ptr __fastcall get_TransportSettings4(void);
  HRESULT         __fastcall SyncSessionDisplaySettings();
  HRESULT         __fastcall UpdateSessionDisplaySettings(unsigned_long ulDesktopWidth/*[in]*/, 
                                                          unsigned_long ulDesktopHeight/*[in]*/, 
                                                          unsigned_long ulPhysicalWidth/*[in]*/, 
                                                          unsigned_long ulPhysicalHeight/*[in]*/, 
                                                          unsigned_long ulOrientation/*[in]*/, 
                                                          unsigned_long ulDesktopScaleFactor/*[in]*/
                                                          , 
                                                          unsigned_long ulDeviceScaleFactor/*[in]*/);
  HRESULT         __fastcall attachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/);
  HRESULT         __fastcall detachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/);
  HRESULT         __fastcall SendRemoteAction(Mstsclib_tlb::RemoteSessionActionType actionType/*[in]*/);
  HRESULT         __fastcall get_AdvancedSettings9(Mstsclib_tlb::IMsRdpClientAdvancedSettings8** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr __fastcall get_AdvancedSettings9(void);
  HRESULT         __fastcall Reconnect(unsigned_long ulWidth/*[in]*/, unsigned_long ulHeight/*[in]*/
                                       , 
                                       Mstsclib_tlb::ControlReconnectStatus* pReconnectStatus/*[out,retval]*/);
  Mstsclib_tlb::ControlReconnectStatus __fastcall Reconnect(unsigned_long ulWidth/*[in]*/, 
                                                            unsigned_long ulHeight/*[in]*/);
  HRESULT         __fastcall get_AdvancedSettings8(Mstsclib_tlb::IMsRdpClientAdvancedSettings7** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr __fastcall get_AdvancedSettings8(void);
  HRESULT         __fastcall get_TransportSettings3(Mstsclib_tlb::IMsRdpClientTransportSettings3** ppXportSet3/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr __fastcall get_TransportSettings3(void);
  HRESULT         __fastcall GetStatusText(unsigned statusCode/*[in]*/, 
                                           BSTR* pBstrStatusText/*[out,retval]*/);
  BSTR            __fastcall GetStatusText(unsigned statusCode/*[in]*/);
  HRESULT         __fastcall get_SecuredSettings3(Mstsclib_tlb::IMsRdpClientSecuredSettings2** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr __fastcall get_SecuredSettings3(void);
  HRESULT         __fastcall get_RemoteProgram2(Mstsclib_tlb::ITSRemoteProgram2** ppRemoteProgram/*[out,retval]*/);
  Mstsclib_tlb::ITSRemoteProgram2Ptr __fastcall get_RemoteProgram2(void);
  HRESULT         __fastcall get_AdvancedSettings7(Mstsclib_tlb::IMsRdpClientAdvancedSettings6** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr __fastcall get_AdvancedSettings7(void);
  HRESULT         __fastcall get_TransportSettings2(Mstsclib_tlb::IMsRdpClientTransportSettings2** ppXportSet2/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr __fastcall get_TransportSettings2(void);
  HRESULT         __fastcall get_TransportSettings(Mstsclib_tlb::IMsRdpClientTransportSettings** ppXportSet/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientTransportSettingsPtr __fastcall get_TransportSettings(void);
  HRESULT         __fastcall get_AdvancedSettings6(Mstsclib_tlb::IMsRdpClientAdvancedSettings5** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr __fastcall get_AdvancedSettings6(void);
  HRESULT         __fastcall GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                                 unsigned ExtendedDisconnectReason/*[in]*/, 
                                                 BSTR* pBstrErrorMsg/*[out,retval]*/);
  BSTR            __fastcall GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                                 unsigned ExtendedDisconnectReason/*[in]*/);
  HRESULT         __fastcall get_RemoteProgram(Mstsclib_tlb::ITSRemoteProgram** ppRemoteProgram/*[out,retval]*/);
  Mstsclib_tlb::ITSRemoteProgramPtr __fastcall get_RemoteProgram(void);
  HRESULT         __fastcall get_MsRdpClientShell(Mstsclib_tlb::IMsRdpClientShell** ppLauncher/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientShellPtr __fastcall get_MsRdpClientShell(void);
  HRESULT         __fastcall get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall get_AdvancedSettings5(void);
  HRESULT         __fastcall get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall get_AdvancedSettings4(void);
  HRESULT         __fastcall get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall get_AdvancedSettings3(void);
  HRESULT         __fastcall set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/);
  HRESULT         __fastcall get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectedStatusText(void);
  HRESULT         __fastcall set_ColorDepth(long pcolorDepth/*[in]*/);
  HRESULT         __fastcall get_ColorDepth(long* pcolorDepth/*[out,retval]*/);
  long            __fastcall get_ColorDepth(void);
  HRESULT         __fastcall get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall get_AdvancedSettings2(void);
  HRESULT         __fastcall get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall get_SecuredSettings2(void);
  HRESULT         __fastcall get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/);
  Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall get_ExtendedDisconnectReason(void);
  HRESULT         __fastcall set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/);
  HRESULT         __fastcall get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullScreen(void);
  HRESULT         __fastcall SetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long chanOptions/*[in]*/);
  HRESULT         __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                      long* pChanOptions/*[out,retval]*/);
  long            __fastcall GetVirtualChannelOptions(BSTR chanName/*[in]*/);
  HRESULT         __fastcall RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/);
  Mstsclib_tlb::ControlCloseStatus __fastcall RequestClose(void);
  HRESULT         __fastcall set_Server(BSTR pServer/*[in]*/);
  HRESULT         __fastcall get_Server(BSTR* pServer/*[out,retval]*/);
  BSTR            __fastcall get_Server(void);
  HRESULT         __fastcall set_Domain(BSTR pDomain/*[in]*/);
  HRESULT         __fastcall get_Domain(BSTR* pDomain/*[out,retval]*/);
  BSTR            __fastcall get_Domain(void);
  HRESULT         __fastcall set_UserName(BSTR pUserName/*[in]*/);
  HRESULT         __fastcall get_UserName(BSTR* pUserName/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall set_DisconnectedText(BSTR pDisconnectedText/*[in]*/);
  HRESULT         __fastcall get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/);
  BSTR            __fastcall get_DisconnectedText(void);
  HRESULT         __fastcall set_ConnectingText(BSTR pConnectingText/*[in]*/);
  HRESULT         __fastcall get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/);
  BSTR            __fastcall get_ConnectingText(void);
  HRESULT         __fastcall get_Connected(short* pIsConnected/*[out,retval]*/);
  short           __fastcall get_Connected(void);
  HRESULT         __fastcall set_DesktopWidth(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopWidth(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopWidth(void);
  HRESULT         __fastcall set_DesktopHeight(long pVal/*[in]*/);
  HRESULT         __fastcall get_DesktopHeight(long* pVal/*[out,retval]*/);
  long            __fastcall get_DesktopHeight(void);
  HRESULT         __fastcall set_StartConnected(long pfStartConnected/*[in]*/);
  HRESULT         __fastcall get_StartConnected(long* pfStartConnected/*[out,retval]*/);
  long            __fastcall get_StartConnected(void);
  HRESULT         __fastcall get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/);
  long            __fastcall get_HorizontalScrollBarVisible(void);
  HRESULT         __fastcall get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/);
  long            __fastcall get_VerticalScrollBarVisible(void);
  HRESULT         __fastcall set_FullScreenTitle(BSTR Param1/*[in]*/);
  HRESULT         __fastcall get_CipherStrength(long* pCipherStrength/*[out,retval]*/);
  long            __fastcall get_CipherStrength(void);
  HRESULT         __fastcall get_Version(BSTR* pVersion/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/);
  long            __fastcall get_SecuredSettingsEnabled(void);
  HRESULT         __fastcall get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall get_SecuredSettings(void);
  HRESULT         __fastcall get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/);
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall get_AdvancedSettings(void);
  HRESULT         __fastcall get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/);
  Mstsclib_tlb::IMsTscDebugPtr __fastcall get_Debugger(void);
  HRESULT         __fastcall Connect();
  HRESULT         __fastcall Disconnect();
  HRESULT         __fastcall CreateVirtualChannels(BSTR newVal/*[in]*/);
  HRESULT         __fastcall SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/);

  __property   Mstsclib_tlb::ITSRemoteProgram3Ptr RemoteProgram3 = {read = get_RemoteProgram3};

  __property   Mstsclib_tlb::IMsRdpClientTransportSettings4Ptr TransportSettings4 = {read = get_TransportSettings4};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr AdvancedSettings9 = {read = get_AdvancedSettings9};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr AdvancedSettings8 = {read = get_AdvancedSettings8};
  __property   Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr TransportSettings3 = {read = get_TransportSettings3};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr SecuredSettings3 = {read = get_SecuredSettings3};
  __property   Mstsclib_tlb::ITSRemoteProgram2Ptr RemoteProgram2 = {read = get_RemoteProgram2};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr AdvancedSettings7 = {read = get_AdvancedSettings7};
  __property   Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr TransportSettings2 = {read = get_TransportSettings2};

  __property   Mstsclib_tlb::IMsRdpClientTransportSettingsPtr TransportSettings = {read = get_TransportSettings};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr AdvancedSettings6 = {read = get_AdvancedSettings6};
  __property   Mstsclib_tlb::ITSRemoteProgramPtr RemoteProgram = {read = get_RemoteProgram};
  __property   Mstsclib_tlb::IMsRdpClientShellPtr MsRdpClientShell = {read = get_MsRdpClientShell};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr AdvancedSettings5 = {read = get_AdvancedSettings5};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr AdvancedSettings4 = {read = get_AdvancedSettings4};

  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr AdvancedSettings3 = {read = get_AdvancedSettings3};
  __property   BSTR            ConnectedStatusText = {read = get_ConnectedStatusText, write = set_ConnectedStatusText};

  __property   long            ColorDepth = {read = get_ColorDepth, write = set_ColorDepth};
  __property   Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr AdvancedSettings2 = {read = get_AdvancedSettings2};
  __property   Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr SecuredSettings2 = {read = get_SecuredSettings2};
  __property   Mstsclib_tlb::ExtendedDisconnectReasonCode ExtendedDisconnectReason = {read = get_ExtendedDisconnectReason};
  __property   VARIANT_BOOL    FullScreen = {read = get_FullScreen, write = set_FullScreen};

  __property   BSTR            Server = {read = get_Server, write = set_Server};
  __property   BSTR            Domain = {read = get_Domain, write = set_Domain};
  __property   BSTR            UserName = {read = get_UserName, write = set_UserName};
  __property   BSTR            DisconnectedText = {read = get_DisconnectedText, write = set_DisconnectedText};
  __property   BSTR            ConnectingText = {read = get_ConnectingText, write = set_ConnectingText};
  __property   short           Connected = {read = get_Connected};
  __property   long            DesktopWidth = {read = get_DesktopWidth, write = set_DesktopWidth};
  __property   long            DesktopHeight = {read = get_DesktopHeight, write = set_DesktopHeight};
  __property   long            StartConnected = {read = get_StartConnected, write = set_StartConnected};
  __property   long            HorizontalScrollBarVisible = {read = get_HorizontalScrollBarVisible};
  __property   long            VerticalScrollBarVisible = {read = get_VerticalScrollBarVisible};
  __property   BSTR            FullScreenTitle = {write = set_FullScreenTitle};
  __property   long            CipherStrength = {read = get_CipherStrength};
  __property   BSTR            Version = {read = get_Version};
  __property   long            SecuredSettingsEnabled = {read = get_SecuredSettingsEnabled};
  __property   Mstsclib_tlb::IMsTscSecuredSettingsPtr SecuredSettings = {read = get_SecuredSettings};
  __property   Mstsclib_tlb::IMsTscAdvancedSettingsPtr AdvancedSettings = {read = get_AdvancedSettings};
  __property   Mstsclib_tlb::IMsTscDebugPtr Debugger = {read = get_Debugger};

};
typedef IMsRdpClient10DispT<IMsRdpClient10> IMsRdpClient10Disp;

typedef TComInterface<ITSRemoteProgram3>  TCOMITSRemoteProgram3;

// *********************************************************************//
// DispIntf:  ITSRemoteProgram3
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4B84EA77-ACEA-418C-881A-4A8C28AB1510}
// *********************************************************************//
template<class T>
class ITSRemoteProgram3DispT : public TAutoDriver<ITSRemoteProgram3>
{
public:
  ITSRemoteProgram3DispT(){}

  ITSRemoteProgram3DispT(ITSRemoteProgram3 *pintf)
  {
    TAutoDriver<ITSRemoteProgram3>::Bind(pintf, false);
  }

  ITSRemoteProgram3DispT(ITSRemoteProgram3Ptr pintf)
  {
    TAutoDriver<ITSRemoteProgram3>::Bind(pintf, true);
  }

  ITSRemoteProgram3DispT& operator=(ITSRemoteProgram3 *pintf)
  {
    TAutoDriver<ITSRemoteProgram3>::Bind(pintf, false);
    return *this;
  }

  ITSRemoteProgram3DispT& operator=(ITSRemoteProgram3Ptr pintf)
  {
    TAutoDriver<ITSRemoteProgram3>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall ServerStartApp(BSTR bstrAppUserModelId/*[in]*/, 
                                            BSTR bstrArguments/*[in]*/, 
                                            VARIANT_BOOL vbExpandEnvVarInArgumentsOnServer/*[in]*/);
  HRESULT         __fastcall set_RemoteApplicationName(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_RemoteApplicationProgram(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_RemoteApplicationArgs(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_RemoteProgramMode(VARIANT_BOOL pvboolRemoteProgramMode/*[in]*/);
  HRESULT         __fastcall get_RemoteProgramMode(VARIANT_BOOL* pvboolRemoteProgramMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RemoteProgramMode(void);
  HRESULT         __fastcall ServerStartProgram(BSTR bstrExecutablePath/*[in]*/, 
                                                BSTR bstrFilePath/*[in]*/, 
                                                BSTR bstrWorkingDirectory/*[in]*/, 
                                                VARIANT_BOOL vbExpandEnvVarInWorkingDirectoryOnServer/*[in]*/
                                                , BSTR bstrArguments/*[in]*/, 
                                                VARIANT_BOOL vbExpandEnvVarInArgumentsOnServer/*[in]*/);


  __property   BSTR            RemoteApplicationName = {write = set_RemoteApplicationName};
  __property   BSTR            RemoteApplicationProgram = {write = set_RemoteApplicationProgram};
  __property   BSTR            RemoteApplicationArgs = {write = set_RemoteApplicationArgs};

  __property   VARIANT_BOOL    RemoteProgramMode = {read = get_RemoteProgramMode, write = set_RemoteProgramMode};
};
typedef ITSRemoteProgram3DispT<ITSRemoteProgram3> ITSRemoteProgram3Disp;

typedef TComInterface<IMsRdpClientNonScriptable6>  TCOMIMsRdpClientNonScriptable6;

typedef TComInterface<IMsRdpClientNonScriptable7>  TCOMIMsRdpClientNonScriptable7;

typedef TComInterface<IMsRdpCameraRedirConfigCollection>  TCOMIMsRdpCameraRedirConfigCollection;

typedef TComInterface<IMsRdpCameraRedirConfig>  TCOMIMsRdpCameraRedirConfig;

typedef TComInterface<IMsRdpClipboard>  TCOMIMsRdpClipboard;

// *********************************************************************//
// DispIntf:  IRemoteDesktopClientEvents
// Flags:     (4096) Dispatchable
// GUID:      {079863B7-6D47-4105-8BFE-0CDCB360E67D}
// *********************************************************************//
template <class T>
class IRemoteDesktopClientEventsDispT : public TAutoDriver<IRemoteDesktopClientEvents>
{
public:
  IRemoteDesktopClientEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnConnecting();
  void            __fastcall OnConnected();
  void            __fastcall OnLoginCompleted();
  void            __fastcall OnDisconnected(long disconnectReason/*[in]*/, 
                                            long ExtendedDisconnectReason/*[in]*/, 
                                            BSTR disconnectErrorMessage/*[in]*/);
  void            __fastcall OnStatusChanged(long statusCode/*[in]*/, BSTR statusMessage/*[in]*/);
  void            __fastcall OnAutoReconnecting(long disconnectReason/*[in]*/, 
                                                long ExtendedDisconnectReason/*[in]*/, 
                                                BSTR disconnectErrorMessage/*[in]*/, 
                                                VARIANT_BOOL networkAvailable/*[in]*/, 
                                                long attemptCount/*[in]*/, 
                                                long maxAttemptCount/*[in]*/);
  void            __fastcall OnAutoReconnected();
  void            __fastcall OnDialogDisplaying();
  void            __fastcall OnDialogDismissed();
  void            __fastcall OnNetworkStatusChanged(unsigned_long qualityLevel/*[in]*/, 
                                                    long bandwidth/*[in]*/, long rtt/*[in]*/);
  void            __fastcall OnAdminMessageReceived(BSTR adminMessage/*[in]*/);
  void            __fastcall OnKeyCombinationPressed(long keyCombination/*[in]*/);
  void            __fastcall OnRemoteDesktopSizeChanged(long width/*[in]*/, long height/*[in]*/);
  void            __fastcall OnTouchPointerCursorMoved(long x/*[in]*/, long y/*[in]*/);

};
typedef IRemoteDesktopClientEventsDispT<IRemoteDesktopClientEvents> IRemoteDesktopClientEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIRemoteDesktopClient
// Interface: IRemoteDesktopClient
// *********************************************************************//
template <class T /* IRemoteDesktopClient */ >
class TCOMIRemoteDesktopClientT : public TComInterface<IRemoteDesktopClient>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIRemoteDesktopClientT() {}
  TCOMIRemoteDesktopClientT(IRemoteDesktopClient *intf, bool addRef = false) : TComInterface<IRemoteDesktopClient>(intf, addRef) {}
  TCOMIRemoteDesktopClientT(const TCOMIRemoteDesktopClientT& src) : TComInterface<IRemoteDesktopClient>(src) {}
  TCOMIRemoteDesktopClientT& operator=(const TCOMIRemoteDesktopClientT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Connect(void);
  HRESULT         __fastcall Disconnect(void);
  HRESULT         __fastcall Reconnect(unsigned_long width/*[in]*/, unsigned_long height/*[in]*/);
  HRESULT         __fastcall get_Settings(Mstsclib_tlb::IRemoteDesktopClientSettings** Settings/*[out,retval]*/);
  Mstsclib_tlb::IRemoteDesktopClientSettingsPtr __fastcall get_Settings(void);
  HRESULT         __fastcall get_Actions(Mstsclib_tlb::IRemoteDesktopClientActions** Actions/*[out,retval]*/);
  Mstsclib_tlb::IRemoteDesktopClientActionsPtr __fastcall get_Actions(void);
  HRESULT         __fastcall get_TouchPointer(Mstsclib_tlb::IRemoteDesktopClientTouchPointer** TouchPointer/*[out,retval]*/);
  Mstsclib_tlb::IRemoteDesktopClientTouchPointerPtr __fastcall get_TouchPointer(void);
  HRESULT         __fastcall DeleteSavedCredentials(BSTR serverName/*[in]*/);
  HRESULT         __fastcall UpdateSessionDisplaySettings(unsigned_long width/*[in]*/, 
                                                          unsigned_long height/*[in]*/);
  HRESULT         __fastcall attachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/);
  HRESULT         __fastcall detachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/);

  __property   Mstsclib_tlb::IRemoteDesktopClientSettingsPtr Settings = {read = get_Settings};
  __property   Mstsclib_tlb::IRemoteDesktopClientActionsPtr Actions = {read = get_Actions};
  __property   Mstsclib_tlb::IRemoteDesktopClientTouchPointerPtr TouchPointer = {read = get_TouchPointer};
};
typedef TCOMIRemoteDesktopClientT<IRemoteDesktopClient> TCOMIRemoteDesktopClient;

// *********************************************************************//
// DispIntf:  IRemoteDesktopClient
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {57D25668-625A-4905-BE4E-304CAA13F89C}
// *********************************************************************//
template<class T>
class IRemoteDesktopClientDispT : public TAutoDriver<IRemoteDesktopClient>
{
public:
  IRemoteDesktopClientDispT(){}

  IRemoteDesktopClientDispT(IRemoteDesktopClient *pintf)
  {
    TAutoDriver<IRemoteDesktopClient>::Bind(pintf, false);
  }

  IRemoteDesktopClientDispT(IRemoteDesktopClientPtr pintf)
  {
    TAutoDriver<IRemoteDesktopClient>::Bind(pintf, true);
  }

  IRemoteDesktopClientDispT& operator=(IRemoteDesktopClient *pintf)
  {
    TAutoDriver<IRemoteDesktopClient>::Bind(pintf, false);
    return *this;
  }

  IRemoteDesktopClientDispT& operator=(IRemoteDesktopClientPtr pintf)
  {
    TAutoDriver<IRemoteDesktopClient>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_RemoteDesktopClient));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_RemoteDesktopClient);
  }

  HRESULT         __fastcall Connect();
  HRESULT         __fastcall Disconnect();
  HRESULT         __fastcall Reconnect(unsigned_long width/*[in]*/, unsigned_long height/*[in]*/);
  HRESULT         __fastcall get_Settings(Mstsclib_tlb::IRemoteDesktopClientSettings** Settings/*[out,retval]*/);
  Mstsclib_tlb::IRemoteDesktopClientSettingsPtr __fastcall get_Settings(void);
  HRESULT         __fastcall get_Actions(Mstsclib_tlb::IRemoteDesktopClientActions** Actions/*[out,retval]*/);
  Mstsclib_tlb::IRemoteDesktopClientActionsPtr __fastcall get_Actions(void);
  HRESULT         __fastcall get_TouchPointer(Mstsclib_tlb::IRemoteDesktopClientTouchPointer** TouchPointer/*[out,retval]*/);
  Mstsclib_tlb::IRemoteDesktopClientTouchPointerPtr __fastcall get_TouchPointer(void);
  HRESULT         __fastcall DeleteSavedCredentials(BSTR serverName/*[in]*/);
  HRESULT         __fastcall UpdateSessionDisplaySettings(unsigned_long width/*[in]*/, 
                                                          unsigned_long height/*[in]*/);
  HRESULT         __fastcall attachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/);
  HRESULT         __fastcall detachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/);

  __property   Mstsclib_tlb::IRemoteDesktopClientSettingsPtr Settings = {read = get_Settings};
  __property   Mstsclib_tlb::IRemoteDesktopClientActionsPtr Actions = {read = get_Actions};
  __property   Mstsclib_tlb::IRemoteDesktopClientTouchPointerPtr TouchPointer = {read = get_TouchPointer};
};
typedef IRemoteDesktopClientDispT<IRemoteDesktopClient> IRemoteDesktopClientDisp;

typedef TComInterface<IRemoteDesktopClientSettings>  TCOMIRemoteDesktopClientSettings;

// *********************************************************************//
// DispIntf:  IRemoteDesktopClientSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {48A0F2A7-2713-431F-BBAC-6F4558E7D64D}
// *********************************************************************//
template<class T>
class IRemoteDesktopClientSettingsDispT : public TAutoDriver<IRemoteDesktopClientSettings>
{
public:
  IRemoteDesktopClientSettingsDispT(){}

  IRemoteDesktopClientSettingsDispT(IRemoteDesktopClientSettings *pintf)
  {
    TAutoDriver<IRemoteDesktopClientSettings>::Bind(pintf, false);
  }

  IRemoteDesktopClientSettingsDispT(IRemoteDesktopClientSettingsPtr pintf)
  {
    TAutoDriver<IRemoteDesktopClientSettings>::Bind(pintf, true);
  }

  IRemoteDesktopClientSettingsDispT& operator=(IRemoteDesktopClientSettings *pintf)
  {
    TAutoDriver<IRemoteDesktopClientSettings>::Bind(pintf, false);
    return *this;
  }

  IRemoteDesktopClientSettingsDispT& operator=(IRemoteDesktopClientSettingsPtr pintf)
  {
    TAutoDriver<IRemoteDesktopClientSettings>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall ApplySettings(BSTR RdpFileContents/*[in]*/);
  HRESULT         __fastcall RetrieveSettings(BSTR* RdpFileContents/*[out,retval]*/);
  BSTR            __fastcall RetrieveSettings(void);
  HRESULT         __fastcall GetRdpProperty(BSTR propertyName/*[in]*/, 
                                            VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall GetRdpProperty(BSTR propertyName/*[in]*/);
  HRESULT         __fastcall SetRdpProperty(BSTR propertyName/*[in]*/, VARIANT Value/*[in]*/);

};
typedef IRemoteDesktopClientSettingsDispT<IRemoteDesktopClientSettings> IRemoteDesktopClientSettingsDisp;

typedef TComInterface<IRemoteDesktopClientActions>  TCOMIRemoteDesktopClientActions;

// *********************************************************************//
// DispIntf:  IRemoteDesktopClientActions
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7D54BC4E-1028-45D4-8B0A-B9B6BFFBA176}
// *********************************************************************//
template<class T>
class IRemoteDesktopClientActionsDispT : public TAutoDriver<IRemoteDesktopClientActions>
{
public:
  IRemoteDesktopClientActionsDispT(){}

  IRemoteDesktopClientActionsDispT(IRemoteDesktopClientActions *pintf)
  {
    TAutoDriver<IRemoteDesktopClientActions>::Bind(pintf, false);
  }

  IRemoteDesktopClientActionsDispT(IRemoteDesktopClientActionsPtr pintf)
  {
    TAutoDriver<IRemoteDesktopClientActions>::Bind(pintf, true);
  }

  IRemoteDesktopClientActionsDispT& operator=(IRemoteDesktopClientActions *pintf)
  {
    TAutoDriver<IRemoteDesktopClientActions>::Bind(pintf, false);
    return *this;
  }

  IRemoteDesktopClientActionsDispT& operator=(IRemoteDesktopClientActionsPtr pintf)
  {
    TAutoDriver<IRemoteDesktopClientActions>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall SuspendScreenUpdates();
  HRESULT         __fastcall ResumeScreenUpdates();
  HRESULT         __fastcall ExecuteRemoteAction(Mstsclib_tlb::RemoteActionType remoteAction/*[in]*/);
  HRESULT         __fastcall GetSnapshot(Mstsclib_tlb::SnapshotEncodingType snapshotEncoding/*[in]*/
                                         , Mstsclib_tlb::SnapshotFormatType snapshotFormat/*[in]*/, 
                                         unsigned_long snapshotWidth/*[in]*/, 
                                         unsigned_long snapshotHeight/*[in]*/, 
                                         BSTR* snapshotData/*[out,retval]*/);
  BSTR            __fastcall GetSnapshot(Mstsclib_tlb::SnapshotEncodingType snapshotEncoding/*[in]*/, 
                                         Mstsclib_tlb::SnapshotFormatType snapshotFormat/*[in]*/, 
                                         unsigned_long snapshotWidth/*[in]*/, 
                                         unsigned_long snapshotHeight/*[in]*/);

};
typedef IRemoteDesktopClientActionsDispT<IRemoteDesktopClientActions> IRemoteDesktopClientActionsDisp;

typedef TComInterface<IRemoteDesktopClientTouchPointer>  TCOMIRemoteDesktopClientTouchPointer;

// *********************************************************************//
// DispIntf:  IRemoteDesktopClientTouchPointer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {260EC22D-8CBC-44B5-9E88-2A37F6C93AE9}
// *********************************************************************//
template<class T>
class IRemoteDesktopClientTouchPointerDispT : public TAutoDriver<IRemoteDesktopClientTouchPointer>
{
public:
  IRemoteDesktopClientTouchPointerDispT(){}

  IRemoteDesktopClientTouchPointerDispT(IRemoteDesktopClientTouchPointer *pintf)
  {
    TAutoDriver<IRemoteDesktopClientTouchPointer>::Bind(pintf, false);
  }

  IRemoteDesktopClientTouchPointerDispT(IRemoteDesktopClientTouchPointerPtr pintf)
  {
    TAutoDriver<IRemoteDesktopClientTouchPointer>::Bind(pintf, true);
  }

  IRemoteDesktopClientTouchPointerDispT& operator=(IRemoteDesktopClientTouchPointer *pintf)
  {
    TAutoDriver<IRemoteDesktopClientTouchPointer>::Bind(pintf, false);
    return *this;
  }

  IRemoteDesktopClientTouchPointerDispT& operator=(IRemoteDesktopClientTouchPointerPtr pintf)
  {
    TAutoDriver<IRemoteDesktopClientTouchPointer>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Enabled/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_EventsEnabled(VARIANT_BOOL EventsEnabled/*[in]*/);
  HRESULT         __fastcall get_EventsEnabled(VARIANT_BOOL* EventsEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EventsEnabled(void);
  HRESULT         __fastcall set_PointerSpeed(unsigned_long PointerSpeed/*[in]*/);
  HRESULT         __fastcall get_PointerSpeed(unsigned_long* PointerSpeed/*[out,retval]*/);
  unsigned_long   __fastcall get_PointerSpeed(void);

  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   VARIANT_BOOL    EventsEnabled = {read = get_EventsEnabled, write = set_EventsEnabled};
  __property   unsigned_long   PointerSpeed = {read = get_PointerSpeed, write = set_PointerSpeed};
};
typedef IRemoteDesktopClientTouchPointerDispT<IRemoteDesktopClientTouchPointer> IRemoteDesktopClientTouchPointerDisp;

// *********************************************************************//
// DispIntf:  IMsTscAxEvents
// Flags:     (4096) Dispatchable
// GUID:      {336D5562-EFA8-482E-8CB3-C5C0FC7A7DB6}
// *********************************************************************//
template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnConnecting()
{
  _TDispID _dispid(/* OnConnecting */ DISPID(1));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnConnected()
{
  _TDispID _dispid(/* OnConnected */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnLoginComplete()
{
  _TDispID _dispid(/* OnLoginComplete */ DISPID(3));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnDisconnected(long discReason/*[in]*/)
{
  _TDispID _dispid(/* OnDisconnected */ DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = discReason /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnEnterFullScreenMode()
{
  _TDispID _dispid(/* OnEnterFullScreenMode */ DISPID(5));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnLeaveFullScreenMode()
{
  _TDispID _dispid(/* OnLeaveFullScreenMode */ DISPID(6));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnChannelReceivedData(BSTR chanName/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(/* OnChannelReceivedData */ DISPID(7));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = data /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnRequestGoFullScreen()
{
  _TDispID _dispid(/* OnRequestGoFullScreen */ DISPID(8));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnRequestLeaveFullScreen()
{
  _TDispID _dispid(/* OnRequestLeaveFullScreen */ DISPID(9));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnFatalError(long errorCode/*[in]*/)
{
  _TDispID _dispid(/* OnFatalError */ DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = errorCode /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnWarning(long warningCode/*[in]*/)
{
  _TDispID _dispid(/* OnWarning */ DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = warningCode /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnRemoteDesktopSizeChange(long width/*[in]*/, long height/*[in]*/)
{
  _TDispID _dispid(/* OnRemoteDesktopSizeChange */ DISPID(12));
  TAutoArgs<2> _args;
  _args[1] = width /*[VT_I4:0]*/;
  _args[2] = height /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnIdleTimeoutNotification()
{
  _TDispID _dispid(/* OnIdleTimeoutNotification */ DISPID(13));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnRequestContainerMinimize()
{
  _TDispID _dispid(/* OnRequestContainerMinimize */ DISPID(14));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnConfirmClose(VARIANT_BOOL* pfAllowClose/*[out,retval]*/)
{
  _TDispID _dispid(/* OnConfirmClose */ DISPID(15));
  TAutoArgs<0> _args;
   OutRetValSetterPtr(pfAllowClose /*[VT_BOOL:1]*/, _args, OleProcedure(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsTscAxEventsDispT<T>::OnConfirmClose(void)
{
  VARIANT_BOOL pfAllowClose;
  this->OnConfirmClose((VARIANT_BOOL*)&pfAllowClose);
  return pfAllowClose;
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnReceivedTSPublicKey(BSTR publicKey/*[in]*/, 
                                              VARIANT_BOOL* pfContinueLogon/*[out,retval]*/)
{
  _TDispID _dispid(/* OnReceivedTSPublicKey */ DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = publicKey /*[VT_BSTR:0]*/;
   OutRetValSetterPtr(pfContinueLogon /*[VT_BOOL:1]*/, _args, OleProcedure(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsTscAxEventsDispT<T>::OnReceivedTSPublicKey(BSTR publicKey/*[in]*/)
{
  VARIANT_BOOL pfContinueLogon;
  this->OnReceivedTSPublicKey(publicKey, (VARIANT_BOOL*)&pfContinueLogon);
  return pfContinueLogon;
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnAutoReconnecting(long disconnectReason/*[in]*/, long attemptCount/*[in]*/
                                           , 
                                           Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus/*[out,retval]*/)
{
  _TDispID _dispid(/* OnAutoReconnecting */ DISPID(17));
  TAutoArgs<2> _args;
  _args[1] = disconnectReason /*[VT_I4:0]*/;
  _args[2] = attemptCount /*[VT_I4:0]*/;
   OutRetValSetterPtr((int*)pArcContinueStatus /*[VT_USERDEFINED:1]*/, _args, OleProcedure(_dispid, _args));
}

template <class T> Mstsclib_tlb::AutoReconnectContinueState __fastcall
IMsTscAxEventsDispT<T>::OnAutoReconnecting(long disconnectReason/*[in]*/, long attemptCount/*[in]*/)
{
  Mstsclib_tlb::AutoReconnectContinueState pArcContinueStatus;
  this->OnAutoReconnecting(disconnectReason, attemptCount, (Mstsclib_tlb::AutoReconnectContinueState*)&pArcContinueStatus);
  return pArcContinueStatus;
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnAuthenticationWarningDisplayed()
{
  _TDispID _dispid(/* OnAuthenticationWarningDisplayed */ DISPID(18));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnAuthenticationWarningDismissed()
{
  _TDispID _dispid(/* OnAuthenticationWarningDismissed */ DISPID(19));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnRemoteProgramResult(BSTR bstrRemoteProgram/*[in]*/, 
                                              Mstsclib_tlb::RemoteProgramResult lError/*[in]*/, 
                                              VARIANT_BOOL vbIsExecutable/*[in]*/)
{
  _TDispID _dispid(/* OnRemoteProgramResult */ DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = bstrRemoteProgram /*[VT_BSTR:0]*/;
  _args[2] = (int)lError /*[VT_USERDEFINED:0]*/;
  _args[3] = vbIsExecutable /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed/*[in]*/, 
                                                 unsigned_long uDisplayInformation/*[in]*/)
{
  _TDispID _dispid(/* OnRemoteProgramDisplayed */ DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = vbDisplayed /*[VT_BOOL:0]*/;
  _args[2] = uDisplayInformation /*[VT_UI4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed/*[in]*/, 
                                                /*AUTO_PARAM_ERROR(Mstsclib_tlb::wireHWND hwnd)*/ VARIANT  hwnd
                                                , 
                                                Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute/*[in]*/)
{
  _TDispID _dispid(/* OnRemoteWindowDisplayed */ DISPID(29));
  TAutoArgs<3> _args;
  _args[1] = vbDisplayed /*[VT_BOOL:0]*/;
  _args[2] = hwnd;
  _args[3] = (int)windowAttribute /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnLogonError(long lError/*[in]*/)
{
  _TDispID _dispid(/* OnLogonError */ DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = lError /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnFocusReleased(int iDirection/*[in]*/)
{
  _TDispID _dispid(/* OnFocusReleased */ DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = iDirection /*[VT_INT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnUserNameAcquired(BSTR bstrUserName/*[in]*/)
{
  _TDispID _dispid(/* OnUserNameAcquired */ DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = bstrUserName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative/*[in]*/)
{
  _TDispID _dispid(/* OnMouseInputModeChanged */ DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = fMouseModeRelative /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnServiceMessageReceived(BSTR serviceMessage/*[in]*/)
{
  _TDispID _dispid(/* OnServiceMessageReceived */ DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = serviceMessage /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnConnectionBarPullDown()
{
  _TDispID _dispid(/* OnConnectionBarPullDown */ DISPID(30));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnNetworkStatusChanged(unsigned_long qualityLevel/*[in]*/, 
                                               long bandwidth/*[in]*/, long rtt/*[in]*/)
{
  _TDispID _dispid(/* OnNetworkStatusChanged */ DISPID(32));
  TAutoArgs<3> _args;
  _args[1] = qualityLevel /*[VT_UI4:0]*/;
  _args[2] = bandwidth /*[VT_I4:0]*/;
  _args[3] = rtt /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnDevicesButtonPressed()
{
  _TDispID _dispid(/* OnDevicesButtonPressed */ DISPID(35));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnAutoReconnected()
{
  _TDispID _dispid(/* OnAutoReconnected */ DISPID(33));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IMsTscAxEventsDispT<T>::OnAutoReconnecting2(long disconnectReason/*[in]*/, 
                                            VARIANT_BOOL networkAvailable/*[in]*/, 
                                            long attemptCount/*[in]*/, long maxAttemptCount/*[in]*/)
{
  _TDispID _dispid(/* OnAutoReconnecting2 */ DISPID(34));
  TAutoArgs<4> _args;
  _args[1] = disconnectReason /*[VT_I4:0]*/;
  _args[2] = networkAvailable /*[VT_BOOL:0]*/;
  _args[3] = attemptCount /*[VT_I4:0]*/;
  _args[4] = maxAttemptCount /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMsTscAx_Redist
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {327BB5CD-834E-4400-AEF2-B30E15E5D682}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOMIMsTscAx
// Interface: IMsTscAx
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::set_Server(BSTR pServer/*[in]*/)
{
  return (*this)->set_Server(pServer);
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_Server(BSTR* pServer/*[out,retval]*/)
{
  return (*this)->get_Server(pServer);
}

template <class T> BSTR __fastcall
TCOMIMsTscAxT<T>::get_Server(void)
{
  BSTR pServer = 0;
  OLECHECK(this->get_Server((BSTR*)&pServer));
  return pServer;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::set_Domain(BSTR pDomain/*[in]*/)
{
  return (*this)->set_Domain(pDomain);
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_Domain(BSTR* pDomain/*[out,retval]*/)
{
  return (*this)->get_Domain(pDomain);
}

template <class T> BSTR __fastcall
TCOMIMsTscAxT<T>::get_Domain(void)
{
  BSTR pDomain = 0;
  OLECHECK(this->get_Domain((BSTR*)&pDomain));
  return pDomain;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::set_UserName(BSTR pUserName/*[in]*/)
{
  return (*this)->set_UserName(pUserName);
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_UserName(BSTR* pUserName/*[out,retval]*/)
{
  return (*this)->get_UserName(pUserName);
}

template <class T> BSTR __fastcall
TCOMIMsTscAxT<T>::get_UserName(void)
{
  BSTR pUserName = 0;
  OLECHECK(this->get_UserName((BSTR*)&pUserName));
  return pUserName;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::set_DisconnectedText(BSTR pDisconnectedText/*[in]*/)
{
  return (*this)->set_DisconnectedText(pDisconnectedText);
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/)
{
  return (*this)->get_DisconnectedText(pDisconnectedText);
}

template <class T> BSTR __fastcall
TCOMIMsTscAxT<T>::get_DisconnectedText(void)
{
  BSTR pDisconnectedText = 0;
  OLECHECK(this->get_DisconnectedText((BSTR*)&pDisconnectedText));
  return pDisconnectedText;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::set_ConnectingText(BSTR pConnectingText/*[in]*/)
{
  return (*this)->set_ConnectingText(pConnectingText);
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/)
{
  return (*this)->get_ConnectingText(pConnectingText);
}

template <class T> BSTR __fastcall
TCOMIMsTscAxT<T>::get_ConnectingText(void)
{
  BSTR pConnectingText = 0;
  OLECHECK(this->get_ConnectingText((BSTR*)&pConnectingText));
  return pConnectingText;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_Connected(short* pIsConnected/*[out,retval]*/)
{
  return (*this)->get_Connected(pIsConnected);
}

template <class T> short __fastcall
TCOMIMsTscAxT<T>::get_Connected(void)
{
  short pIsConnected;
  OLECHECK(this->get_Connected((short*)&pIsConnected));
  return pIsConnected;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::set_DesktopWidth(long pVal/*[in]*/)
{
  return (*this)->set_DesktopWidth(pVal);
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_DesktopWidth(long* pVal/*[out,retval]*/)
{
  return (*this)->get_DesktopWidth(pVal);
}

template <class T> long __fastcall
TCOMIMsTscAxT<T>::get_DesktopWidth(void)
{
  long pVal;
  OLECHECK(this->get_DesktopWidth((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::set_DesktopHeight(long pVal/*[in]*/)
{
  return (*this)->set_DesktopHeight(pVal);
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_DesktopHeight(long* pVal/*[out,retval]*/)
{
  return (*this)->get_DesktopHeight(pVal);
}

template <class T> long __fastcall
TCOMIMsTscAxT<T>::get_DesktopHeight(void)
{
  long pVal;
  OLECHECK(this->get_DesktopHeight((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::set_StartConnected(long pfStartConnected/*[in]*/)
{
  return (*this)->set_StartConnected(pfStartConnected);
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_StartConnected(long* pfStartConnected/*[out,retval]*/)
{
  return (*this)->get_StartConnected(pfStartConnected);
}

template <class T> long __fastcall
TCOMIMsTscAxT<T>::get_StartConnected(void)
{
  long pfStartConnected;
  OLECHECK(this->get_StartConnected((long*)&pfStartConnected));
  return pfStartConnected;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/)
{
  return (*this)->get_HorizontalScrollBarVisible(pfHScrollVisible);
}

template <class T> long __fastcall
TCOMIMsTscAxT<T>::get_HorizontalScrollBarVisible(void)
{
  long pfHScrollVisible;
  OLECHECK(this->get_HorizontalScrollBarVisible((long*)&pfHScrollVisible));
  return pfHScrollVisible;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/)
{
  return (*this)->get_VerticalScrollBarVisible(pfVScrollVisible);
}

template <class T> long __fastcall
TCOMIMsTscAxT<T>::get_VerticalScrollBarVisible(void)
{
  long pfVScrollVisible;
  OLECHECK(this->get_VerticalScrollBarVisible((long*)&pfVScrollVisible));
  return pfVScrollVisible;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::set_FullScreenTitle(BSTR Param1/*[in]*/)
{
  return (*this)->set_FullScreenTitle(Param1);
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_CipherStrength(long* pCipherStrength/*[out,retval]*/)
{
  return (*this)->get_CipherStrength(pCipherStrength);
}

template <class T> long __fastcall
TCOMIMsTscAxT<T>::get_CipherStrength(void)
{
  long pCipherStrength;
  OLECHECK(this->get_CipherStrength((long*)&pCipherStrength));
  return pCipherStrength;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_Version(BSTR* pVersion/*[out,retval]*/)
{
  return (*this)->get_Version(pVersion);
}

template <class T> BSTR __fastcall
TCOMIMsTscAxT<T>::get_Version(void)
{
  BSTR pVersion = 0;
  OLECHECK(this->get_Version((BSTR*)&pVersion));
  return pVersion;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/)
{
  return (*this)->get_SecuredSettingsEnabled(pSecuredSettingsEnabled);
}

template <class T> long __fastcall
TCOMIMsTscAxT<T>::get_SecuredSettingsEnabled(void)
{
  long pSecuredSettingsEnabled;
  OLECHECK(this->get_SecuredSettingsEnabled((long*)&pSecuredSettingsEnabled));
  return pSecuredSettingsEnabled;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  return (*this)->get_SecuredSettings(ppSecuredSettings);
}

template <class T> Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall
TCOMIMsTscAxT<T>::get_SecuredSettings(void)
{
  Mstsclib_tlb::IMsTscSecuredSettingsPtr ppSecuredSettings;
  OLECHECK(this->get_SecuredSettings((Mstsclib_tlb::IMsTscSecuredSettingsPtr*)&ppSecuredSettings));
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  return (*this)->get_AdvancedSettings(ppAdvSettings);
}

template <class T> Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall
TCOMIMsTscAxT<T>::get_AdvancedSettings(void)
{
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr ppAdvSettings;
  OLECHECK(this->get_AdvancedSettings((Mstsclib_tlb::IMsTscAdvancedSettingsPtr*)&ppAdvSettings));
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/)
{
  return (*this)->get_Debugger(ppDebugger);
}

template <class T> Mstsclib_tlb::IMsTscDebugPtr __fastcall
TCOMIMsTscAxT<T>::get_Debugger(void)
{
  Mstsclib_tlb::IMsTscDebugPtr ppDebugger;
  OLECHECK(this->get_Debugger((Mstsclib_tlb::IMsTscDebugPtr*)&ppDebugger));
  return ppDebugger;
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::Connect(void)
{
  return (*this)->Connect();
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::Disconnect(void)
{
  return (*this)->Disconnect();
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::CreateVirtualChannels(BSTR newVal/*[in]*/)
{
  return (*this)->CreateVirtualChannels(newVal);
}

template <class T> HRESULT __fastcall
TCOMIMsTscAxT<T>::SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/)
{
  return (*this)->SendOnVirtualChannel(chanName, ChanData);
}

// *********************************************************************//
// DispIntf:  IMsTscAx
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8C11EFAE-92C3-11D1-BC1E-00C04FA31489}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::set_Server(BSTR pServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pServer /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_Server(BSTR* pServer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pServer /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsTscAxDispT<T>::get_Server(void)
{
  BSTR pServer;
  this->get_Server((BSTR*)&pServer);
  return pServer;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::set_Domain(BSTR pDomain/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pDomain /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_Domain(BSTR* pDomain/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDomain /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsTscAxDispT<T>::get_Domain(void)
{
  BSTR pDomain;
  this->get_Domain((BSTR*)&pDomain);
  return pDomain;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::set_UserName(BSTR pUserName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pUserName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_UserName(BSTR* pUserName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pUserName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsTscAxDispT<T>::get_UserName(void)
{
  BSTR pUserName;
  this->get_UserName((BSTR*)&pUserName);
  return pUserName;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::set_DisconnectedText(BSTR pDisconnectedText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pDisconnectedText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisconnectedText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsTscAxDispT<T>::get_DisconnectedText(void)
{
  BSTR pDisconnectedText;
  this->get_DisconnectedText((BSTR*)&pDisconnectedText);
  return pDisconnectedText;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::set_ConnectingText(BSTR pConnectingText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pConnectingText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectingText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsTscAxDispT<T>::get_ConnectingText(void)
{
  BSTR pConnectingText;
  this->get_ConnectingText((BSTR*)&pConnectingText);
  return pConnectingText;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_Connected(short* pIsConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connected"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIsConnected /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMsTscAxDispT<T>::get_Connected(void)
{
  short pIsConnected;
  this->get_Connected((short*)&pIsConnected);
  return pIsConnected;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::set_DesktopWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_DesktopWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscAxDispT<T>::get_DesktopWidth(void)
{
  long pVal;
  this->get_DesktopWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::set_DesktopHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_DesktopHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscAxDispT<T>::get_DesktopHeight(void)
{
  long pVal;
  this->get_DesktopHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::set_StartConnected(long pfStartConnected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pfStartConnected /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_StartConnected(long* pfStartConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfStartConnected /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscAxDispT<T>::get_StartConnected(void)
{
  long pfStartConnected;
  this->get_StartConnected((long*)&pfStartConnected);
  return pfStartConnected;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalScrollBarVisible"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscAxDispT<T>::get_HorizontalScrollBarVisible(void)
{
  long pfHScrollVisible;
  this->get_HorizontalScrollBarVisible((long*)&pfHScrollVisible);
  return pfHScrollVisible;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarVisible"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscAxDispT<T>::get_VerticalScrollBarVisible(void)
{
  long pfVScrollVisible;
  this->get_VerticalScrollBarVisible((long*)&pfVScrollVisible);
  return pfVScrollVisible;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::set_FullScreenTitle(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreenTitle"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_CipherStrength(long* pCipherStrength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CipherStrength"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCipherStrength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscAxDispT<T>::get_CipherStrength(void)
{
  long pCipherStrength;
  this->get_CipherStrength((long*)&pCipherStrength);
  return pCipherStrength;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_Version(BSTR* pVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsTscAxDispT<T>::get_Version(void)
{
  BSTR pVersion;
  this->get_Version((BSTR*)&pVersion);
  return pVersion;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettingsEnabled"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSecuredSettingsEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscAxDispT<T>::get_SecuredSettingsEnabled(void)
{
  long pSecuredSettingsEnabled;
  this->get_SecuredSettingsEnabled((long*)&pSecuredSettingsEnabled);
  return pSecuredSettingsEnabled;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall
IMsTscAxDispT<T>::get_SecuredSettings(void)
{
  Mstsclib_tlb::IMsTscSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings"), DISPID(98));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall
IMsTscAxDispT<T>::get_AdvancedSettings(void)
{
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Debugger"), DISPID(99));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscDebug**)ppDebugger /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscDebugPtr __fastcall
IMsTscAxDispT<T>::get_Debugger(void)
{
  Mstsclib_tlb::IMsTscDebugPtr ppDebugger;
  this->get_Debugger(&ppDebugger);
  return ppDebugger;
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::Connect()
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(30));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(31));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::CreateVirtualChannels(BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateVirtualChannels"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAxDispT<T>::SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendOnVirtualChannel"), DISPID(34));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = ChanData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient
// Interface: IMsRdpClient
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMsRdpClientT<T>::set_ColorDepth(long pcolorDepth/*[in]*/)
{
  return (*this)->set_ColorDepth(pcolorDepth);
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClientT<T>::get_ColorDepth(long* pcolorDepth/*[out,retval]*/)
{
  return (*this)->get_ColorDepth(pcolorDepth);
}

template <class T> long __fastcall
TCOMIMsRdpClientT<T>::get_ColorDepth(void)
{
  long pcolorDepth;
  OLECHECK(this->get_ColorDepth((long*)&pcolorDepth));
  return pcolorDepth;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClientT<T>::get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  return (*this)->get_AdvancedSettings2(ppAdvSettings);
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall
TCOMIMsRdpClientT<T>::get_AdvancedSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr ppAdvSettings;
  OLECHECK(this->get_AdvancedSettings2((Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr*)&ppAdvSettings));
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClientT<T>::get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  return (*this)->get_SecuredSettings2(ppSecuredSettings);
}

template <class T> Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall
TCOMIMsRdpClientT<T>::get_SecuredSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr ppSecuredSettings;
  OLECHECK(this->get_SecuredSettings2((Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr*)&ppSecuredSettings));
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClientT<T>::get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/)
{
  return (*this)->get_ExtendedDisconnectReason(pExtendedDisconnectReason);
}

template <class T> Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall
TCOMIMsRdpClientT<T>::get_ExtendedDisconnectReason(void)
{
  Mstsclib_tlb::ExtendedDisconnectReasonCode pExtendedDisconnectReason;
  OLECHECK(this->get_ExtendedDisconnectReason((Mstsclib_tlb::ExtendedDisconnectReasonCode*)&pExtendedDisconnectReason));
  return pExtendedDisconnectReason;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClientT<T>::set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/)
{
  return (*this)->set_FullScreen(pfFullScreen);
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClientT<T>::get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/)
{
  return (*this)->get_FullScreen(pfFullScreen);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIMsRdpClientT<T>::get_FullScreen(void)
{
  VARIANT_BOOL pfFullScreen;
  OLECHECK(this->get_FullScreen((VARIANT_BOOL*)&pfFullScreen));
  return pfFullScreen;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClientT<T>::SetVirtualChannelOptions(BSTR chanName/*[in]*/, long chanOptions/*[in]*/)
{
  return (*this)->SetVirtualChannelOptions(chanName, chanOptions);
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClientT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                               long* pChanOptions/*[out,retval]*/)
{
  return (*this)->GetVirtualChannelOptions(chanName, pChanOptions);
}

template <class T> long __fastcall
TCOMIMsRdpClientT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/)
{
  long pChanOptions;
  OLECHECK(this->GetVirtualChannelOptions(chanName/*[in]*/, (long*)&pChanOptions));
  return pChanOptions;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClientT<T>::RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/)
{
  return (*this)->RequestClose(pCloseStatus);
}

template <class T> Mstsclib_tlb::ControlCloseStatus __fastcall
TCOMIMsRdpClientT<T>::RequestClose(void)
{
  Mstsclib_tlb::ControlCloseStatus pCloseStatus;
  OLECHECK(this->RequestClose((Mstsclib_tlb::ControlCloseStatus*)&pCloseStatus));
  return pCloseStatus;
}

// *********************************************************************//
// DispIntf:  IMsRdpClient
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {92B4A539-7115-4B7C-A5A9-E5D9EFC2780A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::set_ColorDepth(long pcolorDepth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = pcolorDepth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_ColorDepth(long* pcolorDepth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcolorDepth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientDispT<T>::get_ColorDepth(void)
{
  long pcolorDepth;
  this->get_ColorDepth((long*)&pcolorDepth);
  return pcolorDepth;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings2"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall
IMsRdpClientDispT<T>::get_AdvancedSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings2(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings2"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall
IMsRdpClientDispT<T>::get_SecuredSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings2(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedDisconnectReason"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pExtendedDisconnectReason /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall
IMsRdpClientDispT<T>::get_ExtendedDisconnectReason(void)
{
  Mstsclib_tlb::ExtendedDisconnectReasonCode pExtendedDisconnectReason;
  this->get_ExtendedDisconnectReason((Mstsclib_tlb::ExtendedDisconnectReasonCode*)&pExtendedDisconnectReason);
  return pExtendedDisconnectReason;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pfFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientDispT<T>::get_FullScreen(void)
{
  VARIANT_BOOL pfFullScreen;
  this->get_FullScreen((VARIANT_BOOL*)&pfFullScreen);
  return pfFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::SetVirtualChannelOptions(BSTR chanName/*[in]*/, long chanOptions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVirtualChannelOptions"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = chanOptions /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                               long* pChanOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVirtualChannelOptions"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pChanOptions /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientDispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/)
{
  long pChanOptions;
  this->GetVirtualChannelOptions(chanName, (long*)&pChanOptions);
  return pChanOptions;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestClose"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pCloseStatus /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mstsclib_tlb::ControlCloseStatus __fastcall
IMsRdpClientDispT<T>::RequestClose(void)
{
  Mstsclib_tlb::ControlCloseStatus pCloseStatus;
  this->RequestClose((Mstsclib_tlb::ControlCloseStatus*)&pCloseStatus);
  return pCloseStatus;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::set_Server(BSTR pServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pServer /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_Server(BSTR* pServer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pServer /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientDispT<T>::get_Server(void)
{
  BSTR pServer;
  this->get_Server((BSTR*)&pServer);
  return pServer;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::set_Domain(BSTR pDomain/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pDomain /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_Domain(BSTR* pDomain/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDomain /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientDispT<T>::get_Domain(void)
{
  BSTR pDomain;
  this->get_Domain((BSTR*)&pDomain);
  return pDomain;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::set_UserName(BSTR pUserName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pUserName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_UserName(BSTR* pUserName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pUserName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientDispT<T>::get_UserName(void)
{
  BSTR pUserName;
  this->get_UserName((BSTR*)&pUserName);
  return pUserName;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::set_DisconnectedText(BSTR pDisconnectedText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pDisconnectedText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisconnectedText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientDispT<T>::get_DisconnectedText(void)
{
  BSTR pDisconnectedText;
  this->get_DisconnectedText((BSTR*)&pDisconnectedText);
  return pDisconnectedText;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::set_ConnectingText(BSTR pConnectingText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pConnectingText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectingText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientDispT<T>::get_ConnectingText(void)
{
  BSTR pConnectingText;
  this->get_ConnectingText((BSTR*)&pConnectingText);
  return pConnectingText;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_Connected(short* pIsConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connected"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIsConnected /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMsRdpClientDispT<T>::get_Connected(void)
{
  short pIsConnected;
  this->get_Connected((short*)&pIsConnected);
  return pIsConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::set_DesktopWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_DesktopWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientDispT<T>::get_DesktopWidth(void)
{
  long pVal;
  this->get_DesktopWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::set_DesktopHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_DesktopHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientDispT<T>::get_DesktopHeight(void)
{
  long pVal;
  this->get_DesktopHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::set_StartConnected(long pfStartConnected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pfStartConnected /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_StartConnected(long* pfStartConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfStartConnected /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientDispT<T>::get_StartConnected(void)
{
  long pfStartConnected;
  this->get_StartConnected((long*)&pfStartConnected);
  return pfStartConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalScrollBarVisible"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientDispT<T>::get_HorizontalScrollBarVisible(void)
{
  long pfHScrollVisible;
  this->get_HorizontalScrollBarVisible((long*)&pfHScrollVisible);
  return pfHScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarVisible"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientDispT<T>::get_VerticalScrollBarVisible(void)
{
  long pfVScrollVisible;
  this->get_VerticalScrollBarVisible((long*)&pfVScrollVisible);
  return pfVScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::set_FullScreenTitle(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreenTitle"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_CipherStrength(long* pCipherStrength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CipherStrength"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCipherStrength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientDispT<T>::get_CipherStrength(void)
{
  long pCipherStrength;
  this->get_CipherStrength((long*)&pCipherStrength);
  return pCipherStrength;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_Version(BSTR* pVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientDispT<T>::get_Version(void)
{
  BSTR pVersion;
  this->get_Version((BSTR*)&pVersion);
  return pVersion;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettingsEnabled"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSecuredSettingsEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientDispT<T>::get_SecuredSettingsEnabled(void)
{
  long pSecuredSettingsEnabled;
  this->get_SecuredSettingsEnabled((long*)&pSecuredSettingsEnabled);
  return pSecuredSettingsEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall
IMsRdpClientDispT<T>::get_SecuredSettings(void)
{
  Mstsclib_tlb::IMsTscSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings"), DISPID(98));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall
IMsRdpClientDispT<T>::get_AdvancedSettings(void)
{
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Debugger"), DISPID(99));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscDebug**)ppDebugger /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscDebugPtr __fastcall
IMsRdpClientDispT<T>::get_Debugger(void)
{
  Mstsclib_tlb::IMsTscDebugPtr ppDebugger;
  this->get_Debugger(&ppDebugger);
  return ppDebugger;
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::Connect()
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(30));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(31));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::CreateVirtualChannels(BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateVirtualChannels"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientDispT<T>::SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendOnVirtualChannel"), DISPID(34));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = ChanData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMsTscSecuredSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {C9D65442-A0F9-45B2-8F73-D61D2DB8CBB6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsTscSecuredSettingsDispT<T>::set_StartProgram(BSTR pStartProgram/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartProgram"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pStartProgram /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscSecuredSettingsDispT<T>::get_StartProgram(BSTR* pStartProgram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartProgram"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pStartProgram /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsTscSecuredSettingsDispT<T>::get_StartProgram(void)
{
  BSTR pStartProgram;
  this->get_StartProgram((BSTR*)&pStartProgram);
  return pStartProgram;
}

template <class T> HRESULT __fastcall
IMsTscSecuredSettingsDispT<T>::set_WorkDir(BSTR pWorkDir/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WorkDir"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pWorkDir /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscSecuredSettingsDispT<T>::get_WorkDir(BSTR* pWorkDir/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WorkDir"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pWorkDir /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsTscSecuredSettingsDispT<T>::get_WorkDir(void)
{
  BSTR pWorkDir;
  this->get_WorkDir((BSTR*)&pWorkDir);
  return pWorkDir;
}

template <class T> HRESULT __fastcall
IMsTscSecuredSettingsDispT<T>::set_FullScreen(long pfFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pfFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscSecuredSettingsDispT<T>::get_FullScreen(long* pfFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscSecuredSettingsDispT<T>::get_FullScreen(void)
{
  long pfFullScreen;
  this->get_FullScreen((long*)&pfFullScreen);
  return pfFullScreen;
}

// *********************************************************************//
// DispIntf:  IMsTscAdvancedSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {809945CC-4B3B-4A92-A6B0-DBF9B5F2EF2D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsTscAdvancedSettingsDispT<T>::set_Compress(long pcompress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<1> _args;
  _args[1] = pcompress /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAdvancedSettingsDispT<T>::get_Compress(long* pcompress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcompress /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscAdvancedSettingsDispT<T>::get_Compress(void)
{
  long pcompress;
  this->get_Compress((long*)&pcompress);
  return pcompress;
}

template <class T> HRESULT __fastcall
IMsTscAdvancedSettingsDispT<T>::set_BitmapPeristence(long pbitmapPeristence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPeristence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAdvancedSettingsDispT<T>::get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPeristence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscAdvancedSettingsDispT<T>::get_BitmapPeristence(void)
{
  long pbitmapPeristence;
  this->get_BitmapPeristence((long*)&pbitmapPeristence);
  return pbitmapPeristence;
}

template <class T> HRESULT __fastcall
IMsTscAdvancedSettingsDispT<T>::set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<1> _args;
  _args[1] = pallowBackgroundInput /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAdvancedSettingsDispT<T>::get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pallowBackgroundInput /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscAdvancedSettingsDispT<T>::get_allowBackgroundInput(void)
{
  long pallowBackgroundInput;
  this->get_allowBackgroundInput((long*)&pallowBackgroundInput);
  return pallowBackgroundInput;
}

template <class T> HRESULT __fastcall
IMsTscAdvancedSettingsDispT<T>::set_KeyBoardLayoutStr(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyBoardLayoutStr"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAdvancedSettingsDispT<T>::set_PluginDlls(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PluginDlls"), DISPID(170));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAdvancedSettingsDispT<T>::set_IconFile(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconFile"), DISPID(171));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAdvancedSettingsDispT<T>::set_IconIndex(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconIndex"), DISPID(172));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAdvancedSettingsDispT<T>::set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<1> _args;
  _args[1] = pContainerHandledFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAdvancedSettingsDispT<T>::get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pContainerHandledFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscAdvancedSettingsDispT<T>::get_ContainerHandledFullScreen(void)
{
  long pContainerHandledFullScreen;
  this->get_ContainerHandledFullScreen((long*)&pContainerHandledFullScreen);
  return pContainerHandledFullScreen;
}

template <class T> HRESULT __fastcall
IMsTscAdvancedSettingsDispT<T>::set_DisableRdpdr(long pDisableRdpdr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<1> _args;
  _args[1] = pDisableRdpdr /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscAdvancedSettingsDispT<T>::get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableRdpdr /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscAdvancedSettingsDispT<T>::get_DisableRdpdr(void)
{
  long pDisableRdpdr;
  this->get_DisableRdpdr((long*)&pDisableRdpdr);
  return pDisableRdpdr;
}

// *********************************************************************//
// DispIntf:  IMsTscDebug
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {209D0EB9-6254-47B1-9033-A98DAE55BB27}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_HatchBitmapPDU(long phatchBitmapPDU/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HatchBitmapPDU"), DISPID(200));
  TAutoArgs<1> _args;
  _args[1] = phatchBitmapPDU /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_HatchBitmapPDU(long* phatchBitmapPDU/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HatchBitmapPDU"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phatchBitmapPDU /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscDebugDispT<T>::get_HatchBitmapPDU(void)
{
  long phatchBitmapPDU;
  this->get_HatchBitmapPDU((long*)&phatchBitmapPDU);
  return phatchBitmapPDU;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_HatchSSBOrder(long phatchSSBOrder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HatchSSBOrder"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = phatchSSBOrder /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_HatchSSBOrder(long* phatchSSBOrder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HatchSSBOrder"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phatchSSBOrder /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscDebugDispT<T>::get_HatchSSBOrder(void)
{
  long phatchSSBOrder;
  this->get_HatchSSBOrder((long*)&phatchSSBOrder);
  return phatchSSBOrder;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_HatchMembltOrder(long phatchMembltOrder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HatchMembltOrder"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = phatchMembltOrder /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_HatchMembltOrder(long* phatchMembltOrder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HatchMembltOrder"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phatchMembltOrder /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscDebugDispT<T>::get_HatchMembltOrder(void)
{
  long phatchMembltOrder;
  this->get_HatchMembltOrder((long*)&phatchMembltOrder);
  return phatchMembltOrder;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_HatchIndexPDU(long phatchIndexPDU/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HatchIndexPDU"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = phatchIndexPDU /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_HatchIndexPDU(long* phatchIndexPDU/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HatchIndexPDU"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phatchIndexPDU /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscDebugDispT<T>::get_HatchIndexPDU(void)
{
  long phatchIndexPDU;
  this->get_HatchIndexPDU((long*)&phatchIndexPDU);
  return phatchIndexPDU;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_LabelMemblt(long plabelMemblt/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelMemblt"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = plabelMemblt /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_LabelMemblt(long* plabelMemblt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelMemblt"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plabelMemblt /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscDebugDispT<T>::get_LabelMemblt(void)
{
  long plabelMemblt;
  this->get_LabelMemblt((long*)&plabelMemblt);
  return plabelMemblt;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_BitmapCacheMonitor(long pbitmapCacheMonitor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheMonitor"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = pbitmapCacheMonitor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_BitmapCacheMonitor(long* pbitmapCacheMonitor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheMonitor"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapCacheMonitor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscDebugDispT<T>::get_BitmapCacheMonitor(void)
{
  long pbitmapCacheMonitor;
  this->get_BitmapCacheMonitor((long*)&pbitmapCacheMonitor);
  return pbitmapCacheMonitor;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_MallocFailuresPercent(long pmallocFailuresPercent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MallocFailuresPercent"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = pmallocFailuresPercent /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_MallocFailuresPercent(long* pmallocFailuresPercent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MallocFailuresPercent"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmallocFailuresPercent /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscDebugDispT<T>::get_MallocFailuresPercent(void)
{
  long pmallocFailuresPercent;
  this->get_MallocFailuresPercent((long*)&pmallocFailuresPercent);
  return pmallocFailuresPercent;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_MallocHugeFailuresPercent(long pmallocHugeFailuresPercent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MallocHugeFailuresPercent"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = pmallocHugeFailuresPercent /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_MallocHugeFailuresPercent(long* pmallocHugeFailuresPercent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MallocHugeFailuresPercent"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmallocHugeFailuresPercent /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscDebugDispT<T>::get_MallocHugeFailuresPercent(void)
{
  long pmallocHugeFailuresPercent;
  this->get_MallocHugeFailuresPercent((long*)&pmallocHugeFailuresPercent);
  return pmallocHugeFailuresPercent;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_NetThroughput(long NetThroughput/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NetThroughput"), DISPID(208));
  TAutoArgs<1> _args;
  _args[1] = NetThroughput /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_NetThroughput(long* NetThroughput/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NetThroughput"), DISPID(208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(NetThroughput /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscDebugDispT<T>::get_NetThroughput(void)
{
  long NetThroughput;
  this->get_NetThroughput((long*)&NetThroughput);
  return NetThroughput;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_CLXCmdLine(BSTR pCLXCmdLine/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CLXCmdLine"), DISPID(209));
  TAutoArgs<1> _args;
  _args[1] = pCLXCmdLine /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_CLXCmdLine(BSTR* pCLXCmdLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CLXCmdLine"), DISPID(209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCLXCmdLine /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsTscDebugDispT<T>::get_CLXCmdLine(void)
{
  BSTR pCLXCmdLine;
  this->get_CLXCmdLine((BSTR*)&pCLXCmdLine);
  return pCLXCmdLine;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_CLXDll(BSTR pCLXDll/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CLXDll"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = pCLXDll /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_CLXDll(BSTR* pCLXDll/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CLXDll"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCLXDll /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsTscDebugDispT<T>::get_CLXDll(void)
{
  BSTR pCLXDll;
  this->get_CLXDll((BSTR*)&pCLXDll);
  return pCLXDll;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_RemoteProgramsHatchVisibleRegion(long pcbHatch/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgramsHatchVisibleRegion"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = pcbHatch /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_RemoteProgramsHatchVisibleRegion(long* pcbHatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgramsHatchVisibleRegion"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcbHatch /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscDebugDispT<T>::get_RemoteProgramsHatchVisibleRegion(void)
{
  long pcbHatch;
  this->get_RemoteProgramsHatchVisibleRegion((long*)&pcbHatch);
  return pcbHatch;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_RemoteProgramsHatchVisibleNoDataRegion(long pcbHatch/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgramsHatchVisibleNoDataRegion"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = pcbHatch /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_RemoteProgramsHatchVisibleNoDataRegion(long* pcbHatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgramsHatchVisibleNoDataRegion"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcbHatch /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscDebugDispT<T>::get_RemoteProgramsHatchVisibleNoDataRegion(void)
{
  long pcbHatch;
  this->get_RemoteProgramsHatchVisibleNoDataRegion((long*)&pcbHatch);
  return pcbHatch;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_RemoteProgramsHatchNonVisibleRegion(long pcbHatch/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgramsHatchNonVisibleRegion"), DISPID(213));
  TAutoArgs<1> _args;
  _args[1] = pcbHatch /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_RemoteProgramsHatchNonVisibleRegion(long* pcbHatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgramsHatchNonVisibleRegion"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcbHatch /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscDebugDispT<T>::get_RemoteProgramsHatchNonVisibleRegion(void)
{
  long pcbHatch;
  this->get_RemoteProgramsHatchNonVisibleRegion((long*)&pcbHatch);
  return pcbHatch;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_RemoteProgramsHatchWindow(long pcbHatch/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgramsHatchWindow"), DISPID(214));
  TAutoArgs<1> _args;
  _args[1] = pcbHatch /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_RemoteProgramsHatchWindow(long* pcbHatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgramsHatchWindow"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcbHatch /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscDebugDispT<T>::get_RemoteProgramsHatchWindow(void)
{
  long pcbHatch;
  this->get_RemoteProgramsHatchWindow((long*)&pcbHatch);
  return pcbHatch;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_RemoteProgramsStayConnectOnBadCaps(long pcbStayConnected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgramsStayConnectOnBadCaps"), DISPID(215));
  TAutoArgs<1> _args;
  _args[1] = pcbStayConnected /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_RemoteProgramsStayConnectOnBadCaps(long* pcbStayConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgramsStayConnectOnBadCaps"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcbStayConnected /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsTscDebugDispT<T>::get_RemoteProgramsStayConnectOnBadCaps(void)
{
  long pcbStayConnected;
  this->get_RemoteProgramsStayConnectOnBadCaps((long*)&pcbStayConnected);
  return pcbStayConnected;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::get_ControlType(unsigned* pControlType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pControlType /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsTscDebugDispT<T>::get_ControlType(void)
{
  unsigned pControlType;
  this->get_ControlType((unsigned*)&pControlType);
  return pControlType;
}

template <class T> HRESULT __fastcall
IMsTscDebugDispT<T>::set_DecodeGfx(VARIANT_BOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DecodeGfx"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMsRdpClientAdvancedSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3C65B4AB-12B3-465B-ACD4-B8DAD3BFF9E2}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_SmoothScroll(long psmoothScroll/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothScroll"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = psmoothScroll /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_SmoothScroll(long* psmoothScroll/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothScroll"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psmoothScroll /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_SmoothScroll(void)
{
  long psmoothScroll;
  this->get_SmoothScroll((long*)&psmoothScroll);
  return psmoothScroll;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorPassthrough"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pacceleratorPassthrough /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorPassthrough"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pacceleratorPassthrough /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_AcceleratorPassthrough(void)
{
  long pacceleratorPassthrough;
  this->get_AcceleratorPassthrough((long*)&pacceleratorPassthrough);
  return pacceleratorPassthrough;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_ShadowBitmap(long pshadowBitmap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShadowBitmap"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pshadowBitmap /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShadowBitmap"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pshadowBitmap /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_ShadowBitmap(void)
{
  long pshadowBitmap;
  this->get_ShadowBitmap((long*)&pshadowBitmap);
  return pshadowBitmap;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_TransportType(long ptransportType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportType"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = ptransportType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_TransportType(long* ptransportType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportType"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptransportType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_TransportType(void)
{
  long ptransportType;
  this->get_TransportType((long*)&ptransportType);
  return ptransportType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_SasSequence(long psasSequence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SasSequence"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = psasSequence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_SasSequence(long* psasSequence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SasSequence"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psasSequence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_SasSequence(void)
{
  long psasSequence;
  this->get_SasSequence((long*)&psasSequence);
  return psasSequence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_EncryptionEnabled(long pencryptionEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncryptionEnabled"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pencryptionEnabled /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncryptionEnabled"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pencryptionEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_EncryptionEnabled(void)
{
  long pencryptionEnabled;
  this->get_EncryptionEnabled((long*)&pencryptionEnabled);
  return pencryptionEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DedicatedTerminal"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = pdedicatedTerminal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DedicatedTerminal"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdedicatedTerminal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_DedicatedTerminal(void)
{
  long pdedicatedTerminal;
  this->get_DedicatedTerminal((long*)&pdedicatedTerminal);
  return pdedicatedTerminal;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_RDPPort(long prdpPort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RDPPort"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = prdpPort /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_RDPPort(long* prdpPort/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RDPPort"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prdpPort /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_RDPPort(void)
{
  long prdpPort;
  this->get_RDPPort((long*)&prdpPort);
  return prdpPort;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_EnableMouse(long penableMouse/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableMouse"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = penableMouse /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_EnableMouse(long* penableMouse/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableMouse"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(penableMouse /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_EnableMouse(void)
{
  long penableMouse;
  this->get_EnableMouse((long*)&penableMouse);
  return penableMouse;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableCtrlAltDel"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = pdisableCtrlAltDel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableCtrlAltDel"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdisableCtrlAltDel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_DisableCtrlAltDel(void)
{
  long pdisableCtrlAltDel;
  this->get_DisableCtrlAltDel((long*)&pdisableCtrlAltDel);
  return pdisableCtrlAltDel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_EnableWindowsKey(long penableWindowsKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableWindowsKey"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = penableWindowsKey /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableWindowsKey"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(penableWindowsKey /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_EnableWindowsKey(void)
{
  long penableWindowsKey;
  this->get_EnableWindowsKey((long*)&penableWindowsKey);
  return penableWindowsKey;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleClickDetect"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pdoubleClickDetect /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleClickDetect"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdoubleClickDetect /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_DoubleClickDetect(void)
{
  long pdoubleClickDetect;
  this->get_DoubleClickDetect((long*)&pdoubleClickDetect);
  return pdoubleClickDetect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_MaximizeShell(long pmaximizeShell/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximizeShell"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pmaximizeShell /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximizeShell"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmaximizeShell /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_MaximizeShell(void)
{
  long pmaximizeShell;
  this->get_MaximizeShell((long*)&pmaximizeShell);
  return pmaximizeShell;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFullScreen"), DISPID(114));
  TAutoArgs<1> _args;
  _args[1] = photKeyFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFullScreen"), DISPID(114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_HotKeyFullScreen(void)
{
  long photKeyFullScreen;
  this->get_HotKeyFullScreen((long*)&photKeyFullScreen);
  return photKeyFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlEsc"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = photKeyCtrlEsc /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlEsc"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyCtrlEsc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_HotKeyCtrlEsc(void)
{
  long photKeyCtrlEsc;
  this->get_HotKeyCtrlEsc((long*)&photKeyCtrlEsc);
  return photKeyCtrlEsc;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltEsc"), DISPID(116));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltEsc /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltEsc"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltEsc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_HotKeyAltEsc(void)
{
  long photKeyAltEsc;
  this->get_HotKeyAltEsc((long*)&photKeyAltEsc);
  return photKeyAltEsc;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_HotKeyAltTab(long photKeyAltTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltTab"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltTab /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltTab"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltTab /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_HotKeyAltTab(void)
{
  long photKeyAltTab;
  this->get_HotKeyAltTab((long*)&photKeyAltTab);
  return photKeyAltTab;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltShiftTab"), DISPID(118));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltShiftTab /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltShiftTab"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltShiftTab /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_HotKeyAltShiftTab(void)
{
  long photKeyAltShiftTab;
  this->get_HotKeyAltShiftTab((long*)&photKeyAltShiftTab);
  return photKeyAltShiftTab;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltSpace"), DISPID(119));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltSpace /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltSpace"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltSpace /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_HotKeyAltSpace(void)
{
  long photKeyAltSpace;
  this->get_HotKeyAltSpace((long*)&photKeyAltSpace);
  return photKeyAltSpace;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlAltDel"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = photKeyCtrlAltDel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlAltDel"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyCtrlAltDel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_HotKeyCtrlAltDel(void)
{
  long photKeyCtrlAltDel;
  this->get_HotKeyCtrlAltDel((long*)&photKeyCtrlAltDel);
  return photKeyCtrlAltDel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_orderDrawThreshold(long porderDrawThreshold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderDrawThreshold"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = porderDrawThreshold /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderDrawThreshold"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(porderDrawThreshold /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_orderDrawThreshold(void)
{
  long porderDrawThreshold;
  this->get_orderDrawThreshold((long*)&porderDrawThreshold);
  return porderDrawThreshold;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheSize"), DISPID(124));
  TAutoArgs<1> _args;
  _args[1] = pbitmapCacheSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheSize"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapCacheSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_BitmapCacheSize(void)
{
  long pbitmapCacheSize;
  this->get_BitmapCacheSize((long*)&pbitmapCacheSize);
  return pbitmapCacheSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCacheSize"), DISPID(125));
  TAutoArgs<1> _args;
  _args[1] = pbitmapVirtualCacheSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCacheSize"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapVirtualCacheSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_BitmapVirtualCacheSize(void)
{
  long pbitmapVirtualCacheSize;
  this->get_BitmapVirtualCacheSize((long*)&pbitmapVirtualCacheSize);
  return pbitmapVirtualCacheSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleBitmapCachesByBPP"), DISPID(175));
  TAutoArgs<1> _args;
  _args[1] = pbScale /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleBitmapCachesByBPP"), DISPID(175));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbScale /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_ScaleBitmapCachesByBPP(void)
{
  long pbScale;
  this->get_ScaleBitmapCachesByBPP((long*)&pbScale);
  return pbScale;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumBitmapCaches"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = pnumBitmapCaches /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumBitmapCaches"), DISPID(126));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnumBitmapCaches /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_NumBitmapCaches(void)
{
  long pnumBitmapCaches;
  this->get_NumBitmapCaches((long*)&pnumBitmapCaches);
  return pnumBitmapCaches;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CachePersistenceActive"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = pcachePersistenceActive /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CachePersistenceActive"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcachePersistenceActive /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_CachePersistenceActive(void)
{
  long pcachePersistenceActive;
  this->get_CachePersistenceActive((long*)&pcachePersistenceActive);
  return pcachePersistenceActive;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_PersistCacheDirectory(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PersistCacheDirectory"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_brushSupportLevel(long pbrushSupportLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("brushSupportLevel"), DISPID(156));
  TAutoArgs<1> _args;
  _args[1] = pbrushSupportLevel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("brushSupportLevel"), DISPID(156));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbrushSupportLevel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_brushSupportLevel(void)
{
  long pbrushSupportLevel;
  this->get_brushSupportLevel((long*)&pbrushSupportLevel);
  return pbrushSupportLevel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_minInputSendInterval(long pminInputSendInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("minInputSendInterval"), DISPID(157));
  TAutoArgs<1> _args;
  _args[1] = pminInputSendInterval /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("minInputSendInterval"), DISPID(157));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pminInputSendInterval /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_minInputSendInterval(void)
{
  long pminInputSendInterval;
  this->get_minInputSendInterval((long*)&pminInputSendInterval);
  return pminInputSendInterval;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputEventsAtOnce"), DISPID(158));
  TAutoArgs<1> _args;
  _args[1] = pinputEventsAtOnce /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputEventsAtOnce"), DISPID(158));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pinputEventsAtOnce /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_InputEventsAtOnce(void)
{
  long pinputEventsAtOnce;
  this->get_InputEventsAtOnce((long*)&pinputEventsAtOnce);
  return pinputEventsAtOnce;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_maxEventCount(long pmaxEventCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxEventCount"), DISPID(159));
  TAutoArgs<1> _args;
  _args[1] = pmaxEventCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_maxEventCount(long* pmaxEventCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxEventCount"), DISPID(159));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmaxEventCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_maxEventCount(void)
{
  long pmaxEventCount;
  this->get_maxEventCount((long*)&pmaxEventCount);
  return pmaxEventCount;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_keepAliveInterval(long pkeepAliveInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("keepAliveInterval"), DISPID(160));
  TAutoArgs<1> _args;
  _args[1] = pkeepAliveInterval /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("keepAliveInterval"), DISPID(160));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeepAliveInterval /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_keepAliveInterval(void)
{
  long pkeepAliveInterval;
  this->get_keepAliveInterval((long*)&pkeepAliveInterval);
  return pkeepAliveInterval;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_shutdownTimeout(long pshutdownTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("shutdownTimeout"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pshutdownTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("shutdownTimeout"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pshutdownTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_shutdownTimeout(void)
{
  long pshutdownTimeout;
  this->get_shutdownTimeout((long*)&pshutdownTimeout);
  return pshutdownTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("overallConnectionTimeout"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = poverallConnectionTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("overallConnectionTimeout"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(poverallConnectionTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_overallConnectionTimeout(void)
{
  long poverallConnectionTimeout;
  this->get_overallConnectionTimeout((long*)&poverallConnectionTimeout);
  return poverallConnectionTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("singleConnectionTimeout"), DISPID(165));
  TAutoArgs<1> _args;
  _args[1] = psingleConnectionTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("singleConnectionTimeout"), DISPID(165));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psingleConnectionTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_singleConnectionTimeout(void)
{
  long psingleConnectionTimeout;
  this->get_singleConnectionTimeout((long*)&psingleConnectionTimeout);
  return psingleConnectionTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_KeyboardType(long pkeyboardType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardType"), DISPID(166));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_KeyboardType(long* pkeyboardType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardType"), DISPID(166));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_KeyboardType(void)
{
  long pkeyboardType;
  this->get_KeyboardType((long*)&pkeyboardType);
  return pkeyboardType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_KeyboardSubType(long pkeyboardSubType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardSubType"), DISPID(167));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardSubType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardSubType"), DISPID(167));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardSubType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_KeyboardSubType(void)
{
  long pkeyboardSubType;
  this->get_KeyboardSubType((long*)&pkeyboardSubType);
  return pkeyboardSubType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardFunctionKey"), DISPID(168));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardFunctionKey /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardFunctionKey"), DISPID(168));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardFunctionKey /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_KeyboardFunctionKey(void)
{
  long pkeyboardFunctionKey;
  this->get_KeyboardFunctionKey((long*)&pkeyboardFunctionKey);
  return pkeyboardFunctionKey;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WinceFixedPalette"), DISPID(169));
  TAutoArgs<1> _args;
  _args[1] = pwinceFixedPalette /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WinceFixedPalette"), DISPID(169));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pwinceFixedPalette /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_WinceFixedPalette(void)
{
  long pwinceFixedPalette;
  this->get_WinceFixedPalette((long*)&pwinceFixedPalette);
  return pwinceFixedPalette;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToServerConsole"), DISPID(178));
  TAutoArgs<1> _args;
  _args[1] = pConnectToConsole /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToServerConsole"), DISPID(178));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectToConsole /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_ConnectToServerConsole(void)
{
  VARIANT_BOOL pConnectToConsole;
  this->get_ConnectToServerConsole((VARIANT_BOOL*)&pConnectToConsole);
  return pConnectToConsole;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_BitmapPersistence(long pbitmapPersistence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPersistence"), DISPID(182));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPersistence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPersistence"), DISPID(182));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPersistence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_BitmapPersistence(void)
{
  long pbitmapPersistence;
  this->get_BitmapPersistence((long*)&pbitmapPersistence);
  return pbitmapPersistence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinutesToIdleTimeout"), DISPID(183));
  TAutoArgs<1> _args;
  _args[1] = pminutesToIdleTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinutesToIdleTimeout"), DISPID(183));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pminutesToIdleTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_MinutesToIdleTimeout(void)
{
  long pminutesToIdleTimeout;
  this->get_MinutesToIdleTimeout((long*)&pminutesToIdleTimeout);
  return pminutesToIdleTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmartSizing"), DISPID(184));
  TAutoArgs<1> _args;
  _args[1] = pfSmartSizing /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmartSizing"), DISPID(184));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfSmartSizing /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_SmartSizing(void)
{
  VARIANT_BOOL pfSmartSizing;
  this->get_SmartSizing((VARIANT_BOOL*)&pfSmartSizing);
  return pfSmartSizing;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrLocalPrintingDocName"), DISPID(185));
  TAutoArgs<1> _args;
  _args[1] = pLocalPrintingDocName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrLocalPrintingDocName"), DISPID(185));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLocalPrintingDocName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_RdpdrLocalPrintingDocName(void)
{
  BSTR pLocalPrintingDocName;
  this->get_RdpdrLocalPrintingDocName((BSTR*)&pLocalPrintingDocName);
  return pLocalPrintingDocName;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipCleanTempDirString"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = clipCleanTempDirString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipCleanTempDirString"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clipCleanTempDirString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_RdpdrClipCleanTempDirString(void)
{
  BSTR clipCleanTempDirString;
  this->get_RdpdrClipCleanTempDirString((BSTR*)&clipCleanTempDirString);
  return clipCleanTempDirString;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipPasteInfoString"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = clipPasteInfoString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipPasteInfoString"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clipPasteInfoString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_RdpdrClipPasteInfoString(void)
{
  BSTR clipPasteInfoString;
  this->get_RdpdrClipPasteInfoString((BSTR*)&clipPasteInfoString);
  return clipPasteInfoString;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_ClearTextPassword(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClearTextPassword"), DISPID(186));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayConnectionBar"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = pDisplayConnectionBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayConnectionBar"), DISPID(187));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisplayConnectionBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_DisplayConnectionBar(void)
{
  VARIANT_BOOL pDisplayConnectionBar;
  this->get_DisplayConnectionBar((VARIANT_BOOL*)&pDisplayConnectionBar);
  return pDisplayConnectionBar;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PinConnectionBar"), DISPID(188));
  TAutoArgs<1> _args;
  _args[1] = pPinConnectionBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PinConnectionBar"), DISPID(188));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pPinConnectionBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_PinConnectionBar(void)
{
  VARIANT_BOOL pPinConnectionBar;
  this->get_PinConnectionBar((VARIANT_BOOL*)&pPinConnectionBar);
  return pPinConnectionBar;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrabFocusOnConnect"), DISPID(189));
  TAutoArgs<1> _args;
  _args[1] = pfGrabFocusOnConnect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrabFocusOnConnect"), DISPID(189));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfGrabFocusOnConnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_GrabFocusOnConnect(void)
{
  VARIANT_BOOL pfGrabFocusOnConnect;
  this->get_GrabFocusOnConnect((VARIANT_BOOL*)&pfGrabFocusOnConnect);
  return pfGrabFocusOnConnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadBalanceInfo"), DISPID(190));
  TAutoArgs<1> _args;
  _args[1] = pLBInfo /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadBalanceInfo"), DISPID(190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLBInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_LoadBalanceInfo(void)
{
  BSTR pLBInfo;
  this->get_LoadBalanceInfo((BSTR*)&pLBInfo);
  return pLBInfo;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDrives"), DISPID(191));
  TAutoArgs<1> _args;
  _args[1] = pRedirectDrives /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDrives"), DISPID(191));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectDrives /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_RedirectDrives(void)
{
  VARIANT_BOOL pRedirectDrives;
  this->get_RedirectDrives((VARIANT_BOOL*)&pRedirectDrives);
  return pRedirectDrives;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPrinters"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = pRedirectPrinters /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPrinters"), DISPID(192));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectPrinters /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_RedirectPrinters(void)
{
  VARIANT_BOOL pRedirectPrinters;
  this->get_RedirectPrinters((VARIANT_BOOL*)&pRedirectPrinters);
  return pRedirectPrinters;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPorts"), DISPID(193));
  TAutoArgs<1> _args;
  _args[1] = pRedirectPorts /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPorts"), DISPID(193));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectPorts /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_RedirectPorts(void)
{
  VARIANT_BOOL pRedirectPorts;
  this->get_RedirectPorts((VARIANT_BOOL*)&pRedirectPorts);
  return pRedirectPorts;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectSmartCards"), DISPID(194));
  TAutoArgs<1> _args;
  _args[1] = pRedirectSmartCards /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectSmartCards"), DISPID(194));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectSmartCards /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_RedirectSmartCards(void)
{
  VARIANT_BOOL pRedirectSmartCards;
  this->get_RedirectSmartCards((VARIANT_BOOL*)&pRedirectSmartCards);
  return pRedirectSmartCards;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache16BppSize"), DISPID(195));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache16BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache16BppSize"), DISPID(195));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache16BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_BitmapVirtualCache16BppSize(void)
{
  long pBitmapVirtualCache16BppSize;
  this->get_BitmapVirtualCache16BppSize((long*)&pBitmapVirtualCache16BppSize);
  return pBitmapVirtualCache16BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache24BppSize"), DISPID(196));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache24BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache24BppSize"), DISPID(196));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache24BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_BitmapVirtualCache24BppSize(void)
{
  long pBitmapVirtualCache24BppSize;
  this->get_BitmapVirtualCache24BppSize((long*)&pBitmapVirtualCache24BppSize);
  return pBitmapVirtualCache24BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_PerformanceFlags(long pDisableList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PerformanceFlags"), DISPID(200));
  TAutoArgs<1> _args;
  _args[1] = pDisableList /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_PerformanceFlags(long* pDisableList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PerformanceFlags"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableList /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_PerformanceFlags(void)
{
  long pDisableList;
  this->get_PerformanceFlags((long*)&pDisableList);
  return pDisableList;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectWithEndpoint"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyTSPublicKey"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = pfNotify /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyTSPublicKey"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfNotify /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_NotifyTSPublicKey(void)
{
  VARIANT_BOOL pfNotify;
  this->get_NotifyTSPublicKey((VARIANT_BOOL*)&pfNotify);
  return pfNotify;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_Compress(long pcompress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<1> _args;
  _args[1] = pcompress /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_Compress(long* pcompress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcompress /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_Compress(void)
{
  long pcompress;
  this->get_Compress((long*)&pcompress);
  return pcompress;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_BitmapPeristence(long pbitmapPeristence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPeristence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPeristence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_BitmapPeristence(void)
{
  long pbitmapPeristence;
  this->get_BitmapPeristence((long*)&pbitmapPeristence);
  return pbitmapPeristence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<1> _args;
  _args[1] = pallowBackgroundInput /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pallowBackgroundInput /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_allowBackgroundInput(void)
{
  long pallowBackgroundInput;
  this->get_allowBackgroundInput((long*)&pallowBackgroundInput);
  return pallowBackgroundInput;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_KeyBoardLayoutStr(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyBoardLayoutStr"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_PluginDlls(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PluginDlls"), DISPID(170));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_IconFile(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconFile"), DISPID(171));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_IconIndex(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconIndex"), DISPID(172));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<1> _args;
  _args[1] = pContainerHandledFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pContainerHandledFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_ContainerHandledFullScreen(void)
{
  long pContainerHandledFullScreen;
  this->get_ContainerHandledFullScreen((long*)&pContainerHandledFullScreen);
  return pContainerHandledFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::set_DisableRdpdr(long pDisableRdpdr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<1> _args;
  _args[1] = pDisableRdpdr /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableRdpdr /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettingsDispT<T>::get_DisableRdpdr(void)
{
  long pDisableRdpdr;
  this->get_DisableRdpdr((long*)&pDisableRdpdr);
  return pDisableRdpdr;
}

// *********************************************************************//
// DispIntf:  IMsRdpClientSecuredSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {605BEFCF-39C1-45CC-A811-068FB7BE346D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettingsDispT<T>::set_KeyboardHookMode(long pkeyboardHookMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardHookMode"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardHookMode /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettingsDispT<T>::get_KeyboardHookMode(long* pkeyboardHookMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardHookMode"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardHookMode /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientSecuredSettingsDispT<T>::get_KeyboardHookMode(void)
{
  long pkeyboardHookMode;
  this->get_KeyboardHookMode((long*)&pkeyboardHookMode);
  return pkeyboardHookMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettingsDispT<T>::set_AudioRedirectionMode(long pAudioRedirectionMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioRedirectionMode"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pAudioRedirectionMode /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettingsDispT<T>::get_AudioRedirectionMode(long* pAudioRedirectionMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioRedirectionMode"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAudioRedirectionMode /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientSecuredSettingsDispT<T>::get_AudioRedirectionMode(void)
{
  long pAudioRedirectionMode;
  this->get_AudioRedirectionMode((long*)&pAudioRedirectionMode);
  return pAudioRedirectionMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettingsDispT<T>::set_StartProgram(BSTR pStartProgram/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartProgram"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pStartProgram /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettingsDispT<T>::get_StartProgram(BSTR* pStartProgram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartProgram"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pStartProgram /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientSecuredSettingsDispT<T>::get_StartProgram(void)
{
  BSTR pStartProgram;
  this->get_StartProgram((BSTR*)&pStartProgram);
  return pStartProgram;
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettingsDispT<T>::set_WorkDir(BSTR pWorkDir/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WorkDir"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pWorkDir /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettingsDispT<T>::get_WorkDir(BSTR* pWorkDir/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WorkDir"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pWorkDir /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientSecuredSettingsDispT<T>::get_WorkDir(void)
{
  BSTR pWorkDir;
  this->get_WorkDir((BSTR*)&pWorkDir);
  return pWorkDir;
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettingsDispT<T>::set_FullScreen(long pfFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pfFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettingsDispT<T>::get_FullScreen(long* pfFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientSecuredSettingsDispT<T>::get_FullScreen(void)
{
  long pfFullScreen;
  this->get_FullScreen((long*)&pfFullScreen);
  return pfFullScreen;
}

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient2
// Interface: IMsRdpClient2
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMsRdpClient2T<T>::get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/)
{
  return (*this)->get_AdvancedSettings3(ppAdvSettings);
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall
TCOMIMsRdpClient2T<T>::get_AdvancedSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr ppAdvSettings;
  OLECHECK(this->get_AdvancedSettings3((Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr*)&ppAdvSettings));
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient2T<T>::set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/)
{
  return (*this)->set_ConnectedStatusText(pConnectedStatusText);
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient2T<T>::get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/)
{
  return (*this)->get_ConnectedStatusText(pConnectedStatusText);
}

template <class T> BSTR __fastcall
TCOMIMsRdpClient2T<T>::get_ConnectedStatusText(void)
{
  BSTR pConnectedStatusText = 0;
  OLECHECK(this->get_ConnectedStatusText((BSTR*)&pConnectedStatusText));
  return pConnectedStatusText;
}

// *********************************************************************//
// DispIntf:  IMsRdpClient2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E7E17DC4-3B71-4BA7-A8E6-281FFADCA28F}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings3"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings2**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall
IMsRdpClient2DispT<T>::get_AdvancedSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr ppAdvSettings;
  this->get_AdvancedSettings3(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = pConnectedStatusText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectedStatusText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient2DispT<T>::get_ConnectedStatusText(void)
{
  BSTR pConnectedStatusText;
  this->get_ConnectedStatusText((BSTR*)&pConnectedStatusText);
  return pConnectedStatusText;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::set_ColorDepth(long pcolorDepth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = pcolorDepth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_ColorDepth(long* pcolorDepth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcolorDepth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient2DispT<T>::get_ColorDepth(void)
{
  long pcolorDepth;
  this->get_ColorDepth((long*)&pcolorDepth);
  return pcolorDepth;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings2"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall
IMsRdpClient2DispT<T>::get_AdvancedSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings2(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings2"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall
IMsRdpClient2DispT<T>::get_SecuredSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings2(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedDisconnectReason"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pExtendedDisconnectReason /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall
IMsRdpClient2DispT<T>::get_ExtendedDisconnectReason(void)
{
  Mstsclib_tlb::ExtendedDisconnectReasonCode pExtendedDisconnectReason;
  this->get_ExtendedDisconnectReason((Mstsclib_tlb::ExtendedDisconnectReasonCode*)&pExtendedDisconnectReason);
  return pExtendedDisconnectReason;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pfFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClient2DispT<T>::get_FullScreen(void)
{
  VARIANT_BOOL pfFullScreen;
  this->get_FullScreen((VARIANT_BOOL*)&pfFullScreen);
  return pfFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::SetVirtualChannelOptions(BSTR chanName/*[in]*/, long chanOptions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVirtualChannelOptions"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = chanOptions /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                long* pChanOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVirtualChannelOptions"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pChanOptions /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient2DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/)
{
  long pChanOptions;
  this->GetVirtualChannelOptions(chanName, (long*)&pChanOptions);
  return pChanOptions;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestClose"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pCloseStatus /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mstsclib_tlb::ControlCloseStatus __fastcall
IMsRdpClient2DispT<T>::RequestClose(void)
{
  Mstsclib_tlb::ControlCloseStatus pCloseStatus;
  this->RequestClose((Mstsclib_tlb::ControlCloseStatus*)&pCloseStatus);
  return pCloseStatus;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::set_Server(BSTR pServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pServer /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_Server(BSTR* pServer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pServer /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient2DispT<T>::get_Server(void)
{
  BSTR pServer;
  this->get_Server((BSTR*)&pServer);
  return pServer;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::set_Domain(BSTR pDomain/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pDomain /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_Domain(BSTR* pDomain/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDomain /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient2DispT<T>::get_Domain(void)
{
  BSTR pDomain;
  this->get_Domain((BSTR*)&pDomain);
  return pDomain;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::set_UserName(BSTR pUserName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pUserName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_UserName(BSTR* pUserName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pUserName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient2DispT<T>::get_UserName(void)
{
  BSTR pUserName;
  this->get_UserName((BSTR*)&pUserName);
  return pUserName;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::set_DisconnectedText(BSTR pDisconnectedText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pDisconnectedText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisconnectedText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient2DispT<T>::get_DisconnectedText(void)
{
  BSTR pDisconnectedText;
  this->get_DisconnectedText((BSTR*)&pDisconnectedText);
  return pDisconnectedText;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::set_ConnectingText(BSTR pConnectingText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pConnectingText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectingText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient2DispT<T>::get_ConnectingText(void)
{
  BSTR pConnectingText;
  this->get_ConnectingText((BSTR*)&pConnectingText);
  return pConnectingText;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_Connected(short* pIsConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connected"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIsConnected /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMsRdpClient2DispT<T>::get_Connected(void)
{
  short pIsConnected;
  this->get_Connected((short*)&pIsConnected);
  return pIsConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::set_DesktopWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_DesktopWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient2DispT<T>::get_DesktopWidth(void)
{
  long pVal;
  this->get_DesktopWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::set_DesktopHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_DesktopHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient2DispT<T>::get_DesktopHeight(void)
{
  long pVal;
  this->get_DesktopHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::set_StartConnected(long pfStartConnected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pfStartConnected /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_StartConnected(long* pfStartConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfStartConnected /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient2DispT<T>::get_StartConnected(void)
{
  long pfStartConnected;
  this->get_StartConnected((long*)&pfStartConnected);
  return pfStartConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalScrollBarVisible"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient2DispT<T>::get_HorizontalScrollBarVisible(void)
{
  long pfHScrollVisible;
  this->get_HorizontalScrollBarVisible((long*)&pfHScrollVisible);
  return pfHScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarVisible"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient2DispT<T>::get_VerticalScrollBarVisible(void)
{
  long pfVScrollVisible;
  this->get_VerticalScrollBarVisible((long*)&pfVScrollVisible);
  return pfVScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::set_FullScreenTitle(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreenTitle"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_CipherStrength(long* pCipherStrength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CipherStrength"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCipherStrength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient2DispT<T>::get_CipherStrength(void)
{
  long pCipherStrength;
  this->get_CipherStrength((long*)&pCipherStrength);
  return pCipherStrength;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_Version(BSTR* pVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient2DispT<T>::get_Version(void)
{
  BSTR pVersion;
  this->get_Version((BSTR*)&pVersion);
  return pVersion;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettingsEnabled"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSecuredSettingsEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient2DispT<T>::get_SecuredSettingsEnabled(void)
{
  long pSecuredSettingsEnabled;
  this->get_SecuredSettingsEnabled((long*)&pSecuredSettingsEnabled);
  return pSecuredSettingsEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall
IMsRdpClient2DispT<T>::get_SecuredSettings(void)
{
  Mstsclib_tlb::IMsTscSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings"), DISPID(98));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall
IMsRdpClient2DispT<T>::get_AdvancedSettings(void)
{
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Debugger"), DISPID(99));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscDebug**)ppDebugger /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscDebugPtr __fastcall
IMsRdpClient2DispT<T>::get_Debugger(void)
{
  Mstsclib_tlb::IMsTscDebugPtr ppDebugger;
  this->get_Debugger(&ppDebugger);
  return ppDebugger;
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::Connect()
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(30));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(31));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::CreateVirtualChannels(BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateVirtualChannels"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient2DispT<T>::SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendOnVirtualChannel"), DISPID(34));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = ChanData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMsRdpClientAdvancedSettings2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9AC42117-2B76-4320-AA44-0E616AB8437B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_CanAutoReconnect(VARIANT_BOOL* pfCanAutoReconnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanAutoReconnect"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfCanAutoReconnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_CanAutoReconnect(void)
{
  VARIANT_BOOL pfCanAutoReconnect;
  this->get_CanAutoReconnect((VARIANT_BOOL*)&pfCanAutoReconnect);
  return pfCanAutoReconnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_EnableAutoReconnect(VARIANT_BOOL pfEnableAutoReconnect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableAutoReconnect"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = pfEnableAutoReconnect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_EnableAutoReconnect(VARIANT_BOOL* pfEnableAutoReconnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableAutoReconnect"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnableAutoReconnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_EnableAutoReconnect(void)
{
  VARIANT_BOOL pfEnableAutoReconnect;
  this->get_EnableAutoReconnect((VARIANT_BOOL*)&pfEnableAutoReconnect);
  return pfEnableAutoReconnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_MaxReconnectAttempts(long pMaxReconnectAttempts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxReconnectAttempts"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = pMaxReconnectAttempts /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_MaxReconnectAttempts(long* pMaxReconnectAttempts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxReconnectAttempts"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMaxReconnectAttempts /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_MaxReconnectAttempts(void)
{
  long pMaxReconnectAttempts;
  this->get_MaxReconnectAttempts((long*)&pMaxReconnectAttempts);
  return pMaxReconnectAttempts;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_SmoothScroll(long psmoothScroll/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothScroll"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = psmoothScroll /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_SmoothScroll(long* psmoothScroll/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothScroll"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psmoothScroll /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_SmoothScroll(void)
{
  long psmoothScroll;
  this->get_SmoothScroll((long*)&psmoothScroll);
  return psmoothScroll;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorPassthrough"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pacceleratorPassthrough /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorPassthrough"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pacceleratorPassthrough /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_AcceleratorPassthrough(void)
{
  long pacceleratorPassthrough;
  this->get_AcceleratorPassthrough((long*)&pacceleratorPassthrough);
  return pacceleratorPassthrough;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_ShadowBitmap(long pshadowBitmap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShadowBitmap"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pshadowBitmap /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShadowBitmap"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pshadowBitmap /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_ShadowBitmap(void)
{
  long pshadowBitmap;
  this->get_ShadowBitmap((long*)&pshadowBitmap);
  return pshadowBitmap;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_TransportType(long ptransportType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportType"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = ptransportType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_TransportType(long* ptransportType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportType"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptransportType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_TransportType(void)
{
  long ptransportType;
  this->get_TransportType((long*)&ptransportType);
  return ptransportType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_SasSequence(long psasSequence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SasSequence"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = psasSequence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_SasSequence(long* psasSequence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SasSequence"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psasSequence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_SasSequence(void)
{
  long psasSequence;
  this->get_SasSequence((long*)&psasSequence);
  return psasSequence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_EncryptionEnabled(long pencryptionEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncryptionEnabled"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pencryptionEnabled /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncryptionEnabled"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pencryptionEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_EncryptionEnabled(void)
{
  long pencryptionEnabled;
  this->get_EncryptionEnabled((long*)&pencryptionEnabled);
  return pencryptionEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DedicatedTerminal"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = pdedicatedTerminal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DedicatedTerminal"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdedicatedTerminal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_DedicatedTerminal(void)
{
  long pdedicatedTerminal;
  this->get_DedicatedTerminal((long*)&pdedicatedTerminal);
  return pdedicatedTerminal;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_RDPPort(long prdpPort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RDPPort"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = prdpPort /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_RDPPort(long* prdpPort/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RDPPort"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prdpPort /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_RDPPort(void)
{
  long prdpPort;
  this->get_RDPPort((long*)&prdpPort);
  return prdpPort;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_EnableMouse(long penableMouse/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableMouse"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = penableMouse /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_EnableMouse(long* penableMouse/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableMouse"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(penableMouse /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_EnableMouse(void)
{
  long penableMouse;
  this->get_EnableMouse((long*)&penableMouse);
  return penableMouse;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableCtrlAltDel"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = pdisableCtrlAltDel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableCtrlAltDel"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdisableCtrlAltDel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_DisableCtrlAltDel(void)
{
  long pdisableCtrlAltDel;
  this->get_DisableCtrlAltDel((long*)&pdisableCtrlAltDel);
  return pdisableCtrlAltDel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_EnableWindowsKey(long penableWindowsKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableWindowsKey"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = penableWindowsKey /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableWindowsKey"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(penableWindowsKey /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_EnableWindowsKey(void)
{
  long penableWindowsKey;
  this->get_EnableWindowsKey((long*)&penableWindowsKey);
  return penableWindowsKey;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleClickDetect"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pdoubleClickDetect /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleClickDetect"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdoubleClickDetect /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_DoubleClickDetect(void)
{
  long pdoubleClickDetect;
  this->get_DoubleClickDetect((long*)&pdoubleClickDetect);
  return pdoubleClickDetect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_MaximizeShell(long pmaximizeShell/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximizeShell"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pmaximizeShell /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximizeShell"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmaximizeShell /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_MaximizeShell(void)
{
  long pmaximizeShell;
  this->get_MaximizeShell((long*)&pmaximizeShell);
  return pmaximizeShell;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFullScreen"), DISPID(114));
  TAutoArgs<1> _args;
  _args[1] = photKeyFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFullScreen"), DISPID(114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_HotKeyFullScreen(void)
{
  long photKeyFullScreen;
  this->get_HotKeyFullScreen((long*)&photKeyFullScreen);
  return photKeyFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlEsc"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = photKeyCtrlEsc /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlEsc"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyCtrlEsc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_HotKeyCtrlEsc(void)
{
  long photKeyCtrlEsc;
  this->get_HotKeyCtrlEsc((long*)&photKeyCtrlEsc);
  return photKeyCtrlEsc;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltEsc"), DISPID(116));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltEsc /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltEsc"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltEsc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_HotKeyAltEsc(void)
{
  long photKeyAltEsc;
  this->get_HotKeyAltEsc((long*)&photKeyAltEsc);
  return photKeyAltEsc;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_HotKeyAltTab(long photKeyAltTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltTab"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltTab /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltTab"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltTab /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_HotKeyAltTab(void)
{
  long photKeyAltTab;
  this->get_HotKeyAltTab((long*)&photKeyAltTab);
  return photKeyAltTab;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltShiftTab"), DISPID(118));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltShiftTab /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltShiftTab"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltShiftTab /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_HotKeyAltShiftTab(void)
{
  long photKeyAltShiftTab;
  this->get_HotKeyAltShiftTab((long*)&photKeyAltShiftTab);
  return photKeyAltShiftTab;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltSpace"), DISPID(119));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltSpace /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltSpace"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltSpace /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_HotKeyAltSpace(void)
{
  long photKeyAltSpace;
  this->get_HotKeyAltSpace((long*)&photKeyAltSpace);
  return photKeyAltSpace;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlAltDel"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = photKeyCtrlAltDel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlAltDel"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyCtrlAltDel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_HotKeyCtrlAltDel(void)
{
  long photKeyCtrlAltDel;
  this->get_HotKeyCtrlAltDel((long*)&photKeyCtrlAltDel);
  return photKeyCtrlAltDel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_orderDrawThreshold(long porderDrawThreshold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderDrawThreshold"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = porderDrawThreshold /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderDrawThreshold"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(porderDrawThreshold /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_orderDrawThreshold(void)
{
  long porderDrawThreshold;
  this->get_orderDrawThreshold((long*)&porderDrawThreshold);
  return porderDrawThreshold;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheSize"), DISPID(124));
  TAutoArgs<1> _args;
  _args[1] = pbitmapCacheSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheSize"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapCacheSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_BitmapCacheSize(void)
{
  long pbitmapCacheSize;
  this->get_BitmapCacheSize((long*)&pbitmapCacheSize);
  return pbitmapCacheSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCacheSize"), DISPID(125));
  TAutoArgs<1> _args;
  _args[1] = pbitmapVirtualCacheSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCacheSize"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapVirtualCacheSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_BitmapVirtualCacheSize(void)
{
  long pbitmapVirtualCacheSize;
  this->get_BitmapVirtualCacheSize((long*)&pbitmapVirtualCacheSize);
  return pbitmapVirtualCacheSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleBitmapCachesByBPP"), DISPID(175));
  TAutoArgs<1> _args;
  _args[1] = pbScale /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleBitmapCachesByBPP"), DISPID(175));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbScale /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_ScaleBitmapCachesByBPP(void)
{
  long pbScale;
  this->get_ScaleBitmapCachesByBPP((long*)&pbScale);
  return pbScale;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumBitmapCaches"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = pnumBitmapCaches /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumBitmapCaches"), DISPID(126));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnumBitmapCaches /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_NumBitmapCaches(void)
{
  long pnumBitmapCaches;
  this->get_NumBitmapCaches((long*)&pnumBitmapCaches);
  return pnumBitmapCaches;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CachePersistenceActive"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = pcachePersistenceActive /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CachePersistenceActive"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcachePersistenceActive /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_CachePersistenceActive(void)
{
  long pcachePersistenceActive;
  this->get_CachePersistenceActive((long*)&pcachePersistenceActive);
  return pcachePersistenceActive;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_PersistCacheDirectory(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PersistCacheDirectory"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_brushSupportLevel(long pbrushSupportLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("brushSupportLevel"), DISPID(156));
  TAutoArgs<1> _args;
  _args[1] = pbrushSupportLevel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("brushSupportLevel"), DISPID(156));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbrushSupportLevel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_brushSupportLevel(void)
{
  long pbrushSupportLevel;
  this->get_brushSupportLevel((long*)&pbrushSupportLevel);
  return pbrushSupportLevel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_minInputSendInterval(long pminInputSendInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("minInputSendInterval"), DISPID(157));
  TAutoArgs<1> _args;
  _args[1] = pminInputSendInterval /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("minInputSendInterval"), DISPID(157));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pminInputSendInterval /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_minInputSendInterval(void)
{
  long pminInputSendInterval;
  this->get_minInputSendInterval((long*)&pminInputSendInterval);
  return pminInputSendInterval;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputEventsAtOnce"), DISPID(158));
  TAutoArgs<1> _args;
  _args[1] = pinputEventsAtOnce /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputEventsAtOnce"), DISPID(158));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pinputEventsAtOnce /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_InputEventsAtOnce(void)
{
  long pinputEventsAtOnce;
  this->get_InputEventsAtOnce((long*)&pinputEventsAtOnce);
  return pinputEventsAtOnce;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_maxEventCount(long pmaxEventCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxEventCount"), DISPID(159));
  TAutoArgs<1> _args;
  _args[1] = pmaxEventCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_maxEventCount(long* pmaxEventCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxEventCount"), DISPID(159));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmaxEventCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_maxEventCount(void)
{
  long pmaxEventCount;
  this->get_maxEventCount((long*)&pmaxEventCount);
  return pmaxEventCount;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_keepAliveInterval(long pkeepAliveInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("keepAliveInterval"), DISPID(160));
  TAutoArgs<1> _args;
  _args[1] = pkeepAliveInterval /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("keepAliveInterval"), DISPID(160));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeepAliveInterval /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_keepAliveInterval(void)
{
  long pkeepAliveInterval;
  this->get_keepAliveInterval((long*)&pkeepAliveInterval);
  return pkeepAliveInterval;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_shutdownTimeout(long pshutdownTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("shutdownTimeout"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pshutdownTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("shutdownTimeout"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pshutdownTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_shutdownTimeout(void)
{
  long pshutdownTimeout;
  this->get_shutdownTimeout((long*)&pshutdownTimeout);
  return pshutdownTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("overallConnectionTimeout"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = poverallConnectionTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("overallConnectionTimeout"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(poverallConnectionTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_overallConnectionTimeout(void)
{
  long poverallConnectionTimeout;
  this->get_overallConnectionTimeout((long*)&poverallConnectionTimeout);
  return poverallConnectionTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("singleConnectionTimeout"), DISPID(165));
  TAutoArgs<1> _args;
  _args[1] = psingleConnectionTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("singleConnectionTimeout"), DISPID(165));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psingleConnectionTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_singleConnectionTimeout(void)
{
  long psingleConnectionTimeout;
  this->get_singleConnectionTimeout((long*)&psingleConnectionTimeout);
  return psingleConnectionTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_KeyboardType(long pkeyboardType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardType"), DISPID(166));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_KeyboardType(long* pkeyboardType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardType"), DISPID(166));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_KeyboardType(void)
{
  long pkeyboardType;
  this->get_KeyboardType((long*)&pkeyboardType);
  return pkeyboardType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_KeyboardSubType(long pkeyboardSubType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardSubType"), DISPID(167));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardSubType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardSubType"), DISPID(167));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardSubType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_KeyboardSubType(void)
{
  long pkeyboardSubType;
  this->get_KeyboardSubType((long*)&pkeyboardSubType);
  return pkeyboardSubType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardFunctionKey"), DISPID(168));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardFunctionKey /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardFunctionKey"), DISPID(168));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardFunctionKey /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_KeyboardFunctionKey(void)
{
  long pkeyboardFunctionKey;
  this->get_KeyboardFunctionKey((long*)&pkeyboardFunctionKey);
  return pkeyboardFunctionKey;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WinceFixedPalette"), DISPID(169));
  TAutoArgs<1> _args;
  _args[1] = pwinceFixedPalette /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WinceFixedPalette"), DISPID(169));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pwinceFixedPalette /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_WinceFixedPalette(void)
{
  long pwinceFixedPalette;
  this->get_WinceFixedPalette((long*)&pwinceFixedPalette);
  return pwinceFixedPalette;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToServerConsole"), DISPID(178));
  TAutoArgs<1> _args;
  _args[1] = pConnectToConsole /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToServerConsole"), DISPID(178));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectToConsole /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_ConnectToServerConsole(void)
{
  VARIANT_BOOL pConnectToConsole;
  this->get_ConnectToServerConsole((VARIANT_BOOL*)&pConnectToConsole);
  return pConnectToConsole;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_BitmapPersistence(long pbitmapPersistence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPersistence"), DISPID(182));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPersistence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPersistence"), DISPID(182));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPersistence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_BitmapPersistence(void)
{
  long pbitmapPersistence;
  this->get_BitmapPersistence((long*)&pbitmapPersistence);
  return pbitmapPersistence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinutesToIdleTimeout"), DISPID(183));
  TAutoArgs<1> _args;
  _args[1] = pminutesToIdleTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinutesToIdleTimeout"), DISPID(183));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pminutesToIdleTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_MinutesToIdleTimeout(void)
{
  long pminutesToIdleTimeout;
  this->get_MinutesToIdleTimeout((long*)&pminutesToIdleTimeout);
  return pminutesToIdleTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmartSizing"), DISPID(184));
  TAutoArgs<1> _args;
  _args[1] = pfSmartSizing /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmartSizing"), DISPID(184));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfSmartSizing /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_SmartSizing(void)
{
  VARIANT_BOOL pfSmartSizing;
  this->get_SmartSizing((VARIANT_BOOL*)&pfSmartSizing);
  return pfSmartSizing;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrLocalPrintingDocName"), DISPID(185));
  TAutoArgs<1> _args;
  _args[1] = pLocalPrintingDocName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrLocalPrintingDocName"), DISPID(185));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLocalPrintingDocName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_RdpdrLocalPrintingDocName(void)
{
  BSTR pLocalPrintingDocName;
  this->get_RdpdrLocalPrintingDocName((BSTR*)&pLocalPrintingDocName);
  return pLocalPrintingDocName;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipCleanTempDirString"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = clipCleanTempDirString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipCleanTempDirString"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clipCleanTempDirString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_RdpdrClipCleanTempDirString(void)
{
  BSTR clipCleanTempDirString;
  this->get_RdpdrClipCleanTempDirString((BSTR*)&clipCleanTempDirString);
  return clipCleanTempDirString;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipPasteInfoString"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = clipPasteInfoString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipPasteInfoString"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clipPasteInfoString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_RdpdrClipPasteInfoString(void)
{
  BSTR clipPasteInfoString;
  this->get_RdpdrClipPasteInfoString((BSTR*)&clipPasteInfoString);
  return clipPasteInfoString;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_ClearTextPassword(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClearTextPassword"), DISPID(186));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayConnectionBar"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = pDisplayConnectionBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayConnectionBar"), DISPID(187));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisplayConnectionBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_DisplayConnectionBar(void)
{
  VARIANT_BOOL pDisplayConnectionBar;
  this->get_DisplayConnectionBar((VARIANT_BOOL*)&pDisplayConnectionBar);
  return pDisplayConnectionBar;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PinConnectionBar"), DISPID(188));
  TAutoArgs<1> _args;
  _args[1] = pPinConnectionBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PinConnectionBar"), DISPID(188));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pPinConnectionBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_PinConnectionBar(void)
{
  VARIANT_BOOL pPinConnectionBar;
  this->get_PinConnectionBar((VARIANT_BOOL*)&pPinConnectionBar);
  return pPinConnectionBar;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrabFocusOnConnect"), DISPID(189));
  TAutoArgs<1> _args;
  _args[1] = pfGrabFocusOnConnect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrabFocusOnConnect"), DISPID(189));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfGrabFocusOnConnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_GrabFocusOnConnect(void)
{
  VARIANT_BOOL pfGrabFocusOnConnect;
  this->get_GrabFocusOnConnect((VARIANT_BOOL*)&pfGrabFocusOnConnect);
  return pfGrabFocusOnConnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadBalanceInfo"), DISPID(190));
  TAutoArgs<1> _args;
  _args[1] = pLBInfo /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadBalanceInfo"), DISPID(190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLBInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_LoadBalanceInfo(void)
{
  BSTR pLBInfo;
  this->get_LoadBalanceInfo((BSTR*)&pLBInfo);
  return pLBInfo;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDrives"), DISPID(191));
  TAutoArgs<1> _args;
  _args[1] = pRedirectDrives /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDrives"), DISPID(191));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectDrives /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_RedirectDrives(void)
{
  VARIANT_BOOL pRedirectDrives;
  this->get_RedirectDrives((VARIANT_BOOL*)&pRedirectDrives);
  return pRedirectDrives;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPrinters"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = pRedirectPrinters /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPrinters"), DISPID(192));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectPrinters /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_RedirectPrinters(void)
{
  VARIANT_BOOL pRedirectPrinters;
  this->get_RedirectPrinters((VARIANT_BOOL*)&pRedirectPrinters);
  return pRedirectPrinters;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPorts"), DISPID(193));
  TAutoArgs<1> _args;
  _args[1] = pRedirectPorts /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPorts"), DISPID(193));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectPorts /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_RedirectPorts(void)
{
  VARIANT_BOOL pRedirectPorts;
  this->get_RedirectPorts((VARIANT_BOOL*)&pRedirectPorts);
  return pRedirectPorts;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectSmartCards"), DISPID(194));
  TAutoArgs<1> _args;
  _args[1] = pRedirectSmartCards /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectSmartCards"), DISPID(194));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectSmartCards /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_RedirectSmartCards(void)
{
  VARIANT_BOOL pRedirectSmartCards;
  this->get_RedirectSmartCards((VARIANT_BOOL*)&pRedirectSmartCards);
  return pRedirectSmartCards;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache16BppSize"), DISPID(195));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache16BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache16BppSize"), DISPID(195));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache16BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_BitmapVirtualCache16BppSize(void)
{
  long pBitmapVirtualCache16BppSize;
  this->get_BitmapVirtualCache16BppSize((long*)&pBitmapVirtualCache16BppSize);
  return pBitmapVirtualCache16BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache24BppSize"), DISPID(196));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache24BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache24BppSize"), DISPID(196));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache24BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_BitmapVirtualCache24BppSize(void)
{
  long pBitmapVirtualCache24BppSize;
  this->get_BitmapVirtualCache24BppSize((long*)&pBitmapVirtualCache24BppSize);
  return pBitmapVirtualCache24BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_PerformanceFlags(long pDisableList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PerformanceFlags"), DISPID(200));
  TAutoArgs<1> _args;
  _args[1] = pDisableList /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_PerformanceFlags(long* pDisableList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PerformanceFlags"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableList /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_PerformanceFlags(void)
{
  long pDisableList;
  this->get_PerformanceFlags((long*)&pDisableList);
  return pDisableList;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectWithEndpoint"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyTSPublicKey"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = pfNotify /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyTSPublicKey"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfNotify /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_NotifyTSPublicKey(void)
{
  VARIANT_BOOL pfNotify;
  this->get_NotifyTSPublicKey((VARIANT_BOOL*)&pfNotify);
  return pfNotify;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_Compress(long pcompress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<1> _args;
  _args[1] = pcompress /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_Compress(long* pcompress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcompress /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_Compress(void)
{
  long pcompress;
  this->get_Compress((long*)&pcompress);
  return pcompress;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_BitmapPeristence(long pbitmapPeristence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPeristence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPeristence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_BitmapPeristence(void)
{
  long pbitmapPeristence;
  this->get_BitmapPeristence((long*)&pbitmapPeristence);
  return pbitmapPeristence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<1> _args;
  _args[1] = pallowBackgroundInput /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pallowBackgroundInput /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_allowBackgroundInput(void)
{
  long pallowBackgroundInput;
  this->get_allowBackgroundInput((long*)&pallowBackgroundInput);
  return pallowBackgroundInput;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_KeyBoardLayoutStr(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyBoardLayoutStr"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_PluginDlls(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PluginDlls"), DISPID(170));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_IconFile(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconFile"), DISPID(171));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_IconIndex(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconIndex"), DISPID(172));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<1> _args;
  _args[1] = pContainerHandledFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pContainerHandledFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_ContainerHandledFullScreen(void)
{
  long pContainerHandledFullScreen;
  this->get_ContainerHandledFullScreen((long*)&pContainerHandledFullScreen);
  return pContainerHandledFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::set_DisableRdpdr(long pDisableRdpdr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<1> _args;
  _args[1] = pDisableRdpdr /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableRdpdr /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings2DispT<T>::get_DisableRdpdr(void)
{
  long pDisableRdpdr;
  this->get_DisableRdpdr((long*)&pDisableRdpdr);
  return pDisableRdpdr;
}

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient3
// Interface: IMsRdpClient3
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMsRdpClient3T<T>::get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/)
{
  return (*this)->get_AdvancedSettings4(ppAdvSettings);
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall
TCOMIMsRdpClient3T<T>::get_AdvancedSettings4(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr ppAdvSettings;
  OLECHECK(this->get_AdvancedSettings4((Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr*)&ppAdvSettings));
  return ppAdvSettings;
}

// *********************************************************************//
// DispIntf:  IMsRdpClient3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {91B7CBC5-A72E-4FA0-9300-D647D7E897FF}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings4"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings3**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall
IMsRdpClient3DispT<T>::get_AdvancedSettings4(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr ppAdvSettings;
  this->get_AdvancedSettings4(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings3"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings2**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall
IMsRdpClient3DispT<T>::get_AdvancedSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr ppAdvSettings;
  this->get_AdvancedSettings3(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = pConnectedStatusText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectedStatusText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient3DispT<T>::get_ConnectedStatusText(void)
{
  BSTR pConnectedStatusText;
  this->get_ConnectedStatusText((BSTR*)&pConnectedStatusText);
  return pConnectedStatusText;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::set_ColorDepth(long pcolorDepth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = pcolorDepth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_ColorDepth(long* pcolorDepth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcolorDepth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient3DispT<T>::get_ColorDepth(void)
{
  long pcolorDepth;
  this->get_ColorDepth((long*)&pcolorDepth);
  return pcolorDepth;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings2"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall
IMsRdpClient3DispT<T>::get_AdvancedSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings2(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings2"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall
IMsRdpClient3DispT<T>::get_SecuredSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings2(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedDisconnectReason"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pExtendedDisconnectReason /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall
IMsRdpClient3DispT<T>::get_ExtendedDisconnectReason(void)
{
  Mstsclib_tlb::ExtendedDisconnectReasonCode pExtendedDisconnectReason;
  this->get_ExtendedDisconnectReason((Mstsclib_tlb::ExtendedDisconnectReasonCode*)&pExtendedDisconnectReason);
  return pExtendedDisconnectReason;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pfFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClient3DispT<T>::get_FullScreen(void)
{
  VARIANT_BOOL pfFullScreen;
  this->get_FullScreen((VARIANT_BOOL*)&pfFullScreen);
  return pfFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::SetVirtualChannelOptions(BSTR chanName/*[in]*/, long chanOptions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVirtualChannelOptions"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = chanOptions /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                long* pChanOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVirtualChannelOptions"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pChanOptions /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient3DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/)
{
  long pChanOptions;
  this->GetVirtualChannelOptions(chanName, (long*)&pChanOptions);
  return pChanOptions;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestClose"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pCloseStatus /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mstsclib_tlb::ControlCloseStatus __fastcall
IMsRdpClient3DispT<T>::RequestClose(void)
{
  Mstsclib_tlb::ControlCloseStatus pCloseStatus;
  this->RequestClose((Mstsclib_tlb::ControlCloseStatus*)&pCloseStatus);
  return pCloseStatus;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::set_Server(BSTR pServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pServer /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_Server(BSTR* pServer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pServer /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient3DispT<T>::get_Server(void)
{
  BSTR pServer;
  this->get_Server((BSTR*)&pServer);
  return pServer;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::set_Domain(BSTR pDomain/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pDomain /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_Domain(BSTR* pDomain/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDomain /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient3DispT<T>::get_Domain(void)
{
  BSTR pDomain;
  this->get_Domain((BSTR*)&pDomain);
  return pDomain;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::set_UserName(BSTR pUserName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pUserName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_UserName(BSTR* pUserName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pUserName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient3DispT<T>::get_UserName(void)
{
  BSTR pUserName;
  this->get_UserName((BSTR*)&pUserName);
  return pUserName;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::set_DisconnectedText(BSTR pDisconnectedText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pDisconnectedText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisconnectedText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient3DispT<T>::get_DisconnectedText(void)
{
  BSTR pDisconnectedText;
  this->get_DisconnectedText((BSTR*)&pDisconnectedText);
  return pDisconnectedText;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::set_ConnectingText(BSTR pConnectingText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pConnectingText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectingText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient3DispT<T>::get_ConnectingText(void)
{
  BSTR pConnectingText;
  this->get_ConnectingText((BSTR*)&pConnectingText);
  return pConnectingText;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_Connected(short* pIsConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connected"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIsConnected /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMsRdpClient3DispT<T>::get_Connected(void)
{
  short pIsConnected;
  this->get_Connected((short*)&pIsConnected);
  return pIsConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::set_DesktopWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_DesktopWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient3DispT<T>::get_DesktopWidth(void)
{
  long pVal;
  this->get_DesktopWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::set_DesktopHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_DesktopHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient3DispT<T>::get_DesktopHeight(void)
{
  long pVal;
  this->get_DesktopHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::set_StartConnected(long pfStartConnected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pfStartConnected /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_StartConnected(long* pfStartConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfStartConnected /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient3DispT<T>::get_StartConnected(void)
{
  long pfStartConnected;
  this->get_StartConnected((long*)&pfStartConnected);
  return pfStartConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalScrollBarVisible"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient3DispT<T>::get_HorizontalScrollBarVisible(void)
{
  long pfHScrollVisible;
  this->get_HorizontalScrollBarVisible((long*)&pfHScrollVisible);
  return pfHScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarVisible"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient3DispT<T>::get_VerticalScrollBarVisible(void)
{
  long pfVScrollVisible;
  this->get_VerticalScrollBarVisible((long*)&pfVScrollVisible);
  return pfVScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::set_FullScreenTitle(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreenTitle"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_CipherStrength(long* pCipherStrength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CipherStrength"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCipherStrength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient3DispT<T>::get_CipherStrength(void)
{
  long pCipherStrength;
  this->get_CipherStrength((long*)&pCipherStrength);
  return pCipherStrength;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_Version(BSTR* pVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient3DispT<T>::get_Version(void)
{
  BSTR pVersion;
  this->get_Version((BSTR*)&pVersion);
  return pVersion;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettingsEnabled"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSecuredSettingsEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient3DispT<T>::get_SecuredSettingsEnabled(void)
{
  long pSecuredSettingsEnabled;
  this->get_SecuredSettingsEnabled((long*)&pSecuredSettingsEnabled);
  return pSecuredSettingsEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall
IMsRdpClient3DispT<T>::get_SecuredSettings(void)
{
  Mstsclib_tlb::IMsTscSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings"), DISPID(98));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall
IMsRdpClient3DispT<T>::get_AdvancedSettings(void)
{
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Debugger"), DISPID(99));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscDebug**)ppDebugger /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscDebugPtr __fastcall
IMsRdpClient3DispT<T>::get_Debugger(void)
{
  Mstsclib_tlb::IMsTscDebugPtr ppDebugger;
  this->get_Debugger(&ppDebugger);
  return ppDebugger;
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::Connect()
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(30));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(31));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::CreateVirtualChannels(BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateVirtualChannels"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient3DispT<T>::SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendOnVirtualChannel"), DISPID(34));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = ChanData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMsRdpClientAdvancedSettings3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {19CD856B-C542-4C53-ACEE-F127E3BE1A59}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_ConnectionBarShowMinimizeButton(VARIANT_BOOL pfShowMinimize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowMinimizeButton"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = pfShowMinimize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_ConnectionBarShowMinimizeButton(VARIANT_BOOL* pfShowMinimize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowMinimizeButton"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowMinimize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_ConnectionBarShowMinimizeButton(void)
{
  VARIANT_BOOL pfShowMinimize;
  this->get_ConnectionBarShowMinimizeButton((VARIANT_BOOL*)&pfShowMinimize);
  return pfShowMinimize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_ConnectionBarShowRestoreButton(VARIANT_BOOL pfShowRestore/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowRestoreButton"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = pfShowRestore /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_ConnectionBarShowRestoreButton(VARIANT_BOOL* pfShowRestore/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowRestoreButton"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowRestore /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_ConnectionBarShowRestoreButton(void)
{
  VARIANT_BOOL pfShowRestore;
  this->get_ConnectionBarShowRestoreButton((VARIANT_BOOL*)&pfShowRestore);
  return pfShowRestore;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_CanAutoReconnect(VARIANT_BOOL* pfCanAutoReconnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanAutoReconnect"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfCanAutoReconnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_CanAutoReconnect(void)
{
  VARIANT_BOOL pfCanAutoReconnect;
  this->get_CanAutoReconnect((VARIANT_BOOL*)&pfCanAutoReconnect);
  return pfCanAutoReconnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_EnableAutoReconnect(VARIANT_BOOL pfEnableAutoReconnect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableAutoReconnect"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = pfEnableAutoReconnect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_EnableAutoReconnect(VARIANT_BOOL* pfEnableAutoReconnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableAutoReconnect"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnableAutoReconnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_EnableAutoReconnect(void)
{
  VARIANT_BOOL pfEnableAutoReconnect;
  this->get_EnableAutoReconnect((VARIANT_BOOL*)&pfEnableAutoReconnect);
  return pfEnableAutoReconnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_MaxReconnectAttempts(long pMaxReconnectAttempts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxReconnectAttempts"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = pMaxReconnectAttempts /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_MaxReconnectAttempts(long* pMaxReconnectAttempts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxReconnectAttempts"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMaxReconnectAttempts /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_MaxReconnectAttempts(void)
{
  long pMaxReconnectAttempts;
  this->get_MaxReconnectAttempts((long*)&pMaxReconnectAttempts);
  return pMaxReconnectAttempts;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_SmoothScroll(long psmoothScroll/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothScroll"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = psmoothScroll /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_SmoothScroll(long* psmoothScroll/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothScroll"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psmoothScroll /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_SmoothScroll(void)
{
  long psmoothScroll;
  this->get_SmoothScroll((long*)&psmoothScroll);
  return psmoothScroll;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorPassthrough"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pacceleratorPassthrough /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorPassthrough"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pacceleratorPassthrough /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_AcceleratorPassthrough(void)
{
  long pacceleratorPassthrough;
  this->get_AcceleratorPassthrough((long*)&pacceleratorPassthrough);
  return pacceleratorPassthrough;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_ShadowBitmap(long pshadowBitmap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShadowBitmap"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pshadowBitmap /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShadowBitmap"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pshadowBitmap /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_ShadowBitmap(void)
{
  long pshadowBitmap;
  this->get_ShadowBitmap((long*)&pshadowBitmap);
  return pshadowBitmap;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_TransportType(long ptransportType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportType"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = ptransportType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_TransportType(long* ptransportType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportType"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptransportType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_TransportType(void)
{
  long ptransportType;
  this->get_TransportType((long*)&ptransportType);
  return ptransportType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_SasSequence(long psasSequence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SasSequence"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = psasSequence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_SasSequence(long* psasSequence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SasSequence"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psasSequence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_SasSequence(void)
{
  long psasSequence;
  this->get_SasSequence((long*)&psasSequence);
  return psasSequence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_EncryptionEnabled(long pencryptionEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncryptionEnabled"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pencryptionEnabled /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncryptionEnabled"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pencryptionEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_EncryptionEnabled(void)
{
  long pencryptionEnabled;
  this->get_EncryptionEnabled((long*)&pencryptionEnabled);
  return pencryptionEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DedicatedTerminal"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = pdedicatedTerminal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DedicatedTerminal"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdedicatedTerminal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_DedicatedTerminal(void)
{
  long pdedicatedTerminal;
  this->get_DedicatedTerminal((long*)&pdedicatedTerminal);
  return pdedicatedTerminal;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_RDPPort(long prdpPort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RDPPort"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = prdpPort /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_RDPPort(long* prdpPort/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RDPPort"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prdpPort /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_RDPPort(void)
{
  long prdpPort;
  this->get_RDPPort((long*)&prdpPort);
  return prdpPort;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_EnableMouse(long penableMouse/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableMouse"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = penableMouse /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_EnableMouse(long* penableMouse/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableMouse"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(penableMouse /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_EnableMouse(void)
{
  long penableMouse;
  this->get_EnableMouse((long*)&penableMouse);
  return penableMouse;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableCtrlAltDel"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = pdisableCtrlAltDel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableCtrlAltDel"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdisableCtrlAltDel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_DisableCtrlAltDel(void)
{
  long pdisableCtrlAltDel;
  this->get_DisableCtrlAltDel((long*)&pdisableCtrlAltDel);
  return pdisableCtrlAltDel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_EnableWindowsKey(long penableWindowsKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableWindowsKey"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = penableWindowsKey /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableWindowsKey"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(penableWindowsKey /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_EnableWindowsKey(void)
{
  long penableWindowsKey;
  this->get_EnableWindowsKey((long*)&penableWindowsKey);
  return penableWindowsKey;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleClickDetect"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pdoubleClickDetect /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleClickDetect"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdoubleClickDetect /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_DoubleClickDetect(void)
{
  long pdoubleClickDetect;
  this->get_DoubleClickDetect((long*)&pdoubleClickDetect);
  return pdoubleClickDetect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_MaximizeShell(long pmaximizeShell/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximizeShell"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pmaximizeShell /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximizeShell"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmaximizeShell /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_MaximizeShell(void)
{
  long pmaximizeShell;
  this->get_MaximizeShell((long*)&pmaximizeShell);
  return pmaximizeShell;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFullScreen"), DISPID(114));
  TAutoArgs<1> _args;
  _args[1] = photKeyFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFullScreen"), DISPID(114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_HotKeyFullScreen(void)
{
  long photKeyFullScreen;
  this->get_HotKeyFullScreen((long*)&photKeyFullScreen);
  return photKeyFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlEsc"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = photKeyCtrlEsc /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlEsc"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyCtrlEsc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_HotKeyCtrlEsc(void)
{
  long photKeyCtrlEsc;
  this->get_HotKeyCtrlEsc((long*)&photKeyCtrlEsc);
  return photKeyCtrlEsc;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltEsc"), DISPID(116));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltEsc /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltEsc"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltEsc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_HotKeyAltEsc(void)
{
  long photKeyAltEsc;
  this->get_HotKeyAltEsc((long*)&photKeyAltEsc);
  return photKeyAltEsc;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_HotKeyAltTab(long photKeyAltTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltTab"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltTab /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltTab"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltTab /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_HotKeyAltTab(void)
{
  long photKeyAltTab;
  this->get_HotKeyAltTab((long*)&photKeyAltTab);
  return photKeyAltTab;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltShiftTab"), DISPID(118));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltShiftTab /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltShiftTab"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltShiftTab /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_HotKeyAltShiftTab(void)
{
  long photKeyAltShiftTab;
  this->get_HotKeyAltShiftTab((long*)&photKeyAltShiftTab);
  return photKeyAltShiftTab;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltSpace"), DISPID(119));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltSpace /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltSpace"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltSpace /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_HotKeyAltSpace(void)
{
  long photKeyAltSpace;
  this->get_HotKeyAltSpace((long*)&photKeyAltSpace);
  return photKeyAltSpace;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlAltDel"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = photKeyCtrlAltDel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlAltDel"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyCtrlAltDel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_HotKeyCtrlAltDel(void)
{
  long photKeyCtrlAltDel;
  this->get_HotKeyCtrlAltDel((long*)&photKeyCtrlAltDel);
  return photKeyCtrlAltDel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_orderDrawThreshold(long porderDrawThreshold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderDrawThreshold"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = porderDrawThreshold /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderDrawThreshold"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(porderDrawThreshold /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_orderDrawThreshold(void)
{
  long porderDrawThreshold;
  this->get_orderDrawThreshold((long*)&porderDrawThreshold);
  return porderDrawThreshold;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheSize"), DISPID(124));
  TAutoArgs<1> _args;
  _args[1] = pbitmapCacheSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheSize"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapCacheSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_BitmapCacheSize(void)
{
  long pbitmapCacheSize;
  this->get_BitmapCacheSize((long*)&pbitmapCacheSize);
  return pbitmapCacheSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCacheSize"), DISPID(125));
  TAutoArgs<1> _args;
  _args[1] = pbitmapVirtualCacheSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCacheSize"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapVirtualCacheSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_BitmapVirtualCacheSize(void)
{
  long pbitmapVirtualCacheSize;
  this->get_BitmapVirtualCacheSize((long*)&pbitmapVirtualCacheSize);
  return pbitmapVirtualCacheSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleBitmapCachesByBPP"), DISPID(175));
  TAutoArgs<1> _args;
  _args[1] = pbScale /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleBitmapCachesByBPP"), DISPID(175));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbScale /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_ScaleBitmapCachesByBPP(void)
{
  long pbScale;
  this->get_ScaleBitmapCachesByBPP((long*)&pbScale);
  return pbScale;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumBitmapCaches"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = pnumBitmapCaches /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumBitmapCaches"), DISPID(126));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnumBitmapCaches /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_NumBitmapCaches(void)
{
  long pnumBitmapCaches;
  this->get_NumBitmapCaches((long*)&pnumBitmapCaches);
  return pnumBitmapCaches;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CachePersistenceActive"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = pcachePersistenceActive /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CachePersistenceActive"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcachePersistenceActive /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_CachePersistenceActive(void)
{
  long pcachePersistenceActive;
  this->get_CachePersistenceActive((long*)&pcachePersistenceActive);
  return pcachePersistenceActive;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_PersistCacheDirectory(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PersistCacheDirectory"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_brushSupportLevel(long pbrushSupportLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("brushSupportLevel"), DISPID(156));
  TAutoArgs<1> _args;
  _args[1] = pbrushSupportLevel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("brushSupportLevel"), DISPID(156));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbrushSupportLevel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_brushSupportLevel(void)
{
  long pbrushSupportLevel;
  this->get_brushSupportLevel((long*)&pbrushSupportLevel);
  return pbrushSupportLevel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_minInputSendInterval(long pminInputSendInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("minInputSendInterval"), DISPID(157));
  TAutoArgs<1> _args;
  _args[1] = pminInputSendInterval /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("minInputSendInterval"), DISPID(157));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pminInputSendInterval /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_minInputSendInterval(void)
{
  long pminInputSendInterval;
  this->get_minInputSendInterval((long*)&pminInputSendInterval);
  return pminInputSendInterval;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputEventsAtOnce"), DISPID(158));
  TAutoArgs<1> _args;
  _args[1] = pinputEventsAtOnce /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputEventsAtOnce"), DISPID(158));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pinputEventsAtOnce /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_InputEventsAtOnce(void)
{
  long pinputEventsAtOnce;
  this->get_InputEventsAtOnce((long*)&pinputEventsAtOnce);
  return pinputEventsAtOnce;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_maxEventCount(long pmaxEventCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxEventCount"), DISPID(159));
  TAutoArgs<1> _args;
  _args[1] = pmaxEventCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_maxEventCount(long* pmaxEventCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxEventCount"), DISPID(159));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmaxEventCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_maxEventCount(void)
{
  long pmaxEventCount;
  this->get_maxEventCount((long*)&pmaxEventCount);
  return pmaxEventCount;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_keepAliveInterval(long pkeepAliveInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("keepAliveInterval"), DISPID(160));
  TAutoArgs<1> _args;
  _args[1] = pkeepAliveInterval /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("keepAliveInterval"), DISPID(160));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeepAliveInterval /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_keepAliveInterval(void)
{
  long pkeepAliveInterval;
  this->get_keepAliveInterval((long*)&pkeepAliveInterval);
  return pkeepAliveInterval;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_shutdownTimeout(long pshutdownTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("shutdownTimeout"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pshutdownTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("shutdownTimeout"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pshutdownTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_shutdownTimeout(void)
{
  long pshutdownTimeout;
  this->get_shutdownTimeout((long*)&pshutdownTimeout);
  return pshutdownTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("overallConnectionTimeout"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = poverallConnectionTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("overallConnectionTimeout"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(poverallConnectionTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_overallConnectionTimeout(void)
{
  long poverallConnectionTimeout;
  this->get_overallConnectionTimeout((long*)&poverallConnectionTimeout);
  return poverallConnectionTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("singleConnectionTimeout"), DISPID(165));
  TAutoArgs<1> _args;
  _args[1] = psingleConnectionTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("singleConnectionTimeout"), DISPID(165));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psingleConnectionTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_singleConnectionTimeout(void)
{
  long psingleConnectionTimeout;
  this->get_singleConnectionTimeout((long*)&psingleConnectionTimeout);
  return psingleConnectionTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_KeyboardType(long pkeyboardType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardType"), DISPID(166));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_KeyboardType(long* pkeyboardType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardType"), DISPID(166));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_KeyboardType(void)
{
  long pkeyboardType;
  this->get_KeyboardType((long*)&pkeyboardType);
  return pkeyboardType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_KeyboardSubType(long pkeyboardSubType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardSubType"), DISPID(167));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardSubType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardSubType"), DISPID(167));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardSubType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_KeyboardSubType(void)
{
  long pkeyboardSubType;
  this->get_KeyboardSubType((long*)&pkeyboardSubType);
  return pkeyboardSubType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardFunctionKey"), DISPID(168));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardFunctionKey /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardFunctionKey"), DISPID(168));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardFunctionKey /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_KeyboardFunctionKey(void)
{
  long pkeyboardFunctionKey;
  this->get_KeyboardFunctionKey((long*)&pkeyboardFunctionKey);
  return pkeyboardFunctionKey;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WinceFixedPalette"), DISPID(169));
  TAutoArgs<1> _args;
  _args[1] = pwinceFixedPalette /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WinceFixedPalette"), DISPID(169));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pwinceFixedPalette /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_WinceFixedPalette(void)
{
  long pwinceFixedPalette;
  this->get_WinceFixedPalette((long*)&pwinceFixedPalette);
  return pwinceFixedPalette;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToServerConsole"), DISPID(178));
  TAutoArgs<1> _args;
  _args[1] = pConnectToConsole /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToServerConsole"), DISPID(178));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectToConsole /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_ConnectToServerConsole(void)
{
  VARIANT_BOOL pConnectToConsole;
  this->get_ConnectToServerConsole((VARIANT_BOOL*)&pConnectToConsole);
  return pConnectToConsole;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_BitmapPersistence(long pbitmapPersistence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPersistence"), DISPID(182));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPersistence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPersistence"), DISPID(182));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPersistence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_BitmapPersistence(void)
{
  long pbitmapPersistence;
  this->get_BitmapPersistence((long*)&pbitmapPersistence);
  return pbitmapPersistence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinutesToIdleTimeout"), DISPID(183));
  TAutoArgs<1> _args;
  _args[1] = pminutesToIdleTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinutesToIdleTimeout"), DISPID(183));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pminutesToIdleTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_MinutesToIdleTimeout(void)
{
  long pminutesToIdleTimeout;
  this->get_MinutesToIdleTimeout((long*)&pminutesToIdleTimeout);
  return pminutesToIdleTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmartSizing"), DISPID(184));
  TAutoArgs<1> _args;
  _args[1] = pfSmartSizing /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmartSizing"), DISPID(184));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfSmartSizing /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_SmartSizing(void)
{
  VARIANT_BOOL pfSmartSizing;
  this->get_SmartSizing((VARIANT_BOOL*)&pfSmartSizing);
  return pfSmartSizing;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrLocalPrintingDocName"), DISPID(185));
  TAutoArgs<1> _args;
  _args[1] = pLocalPrintingDocName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrLocalPrintingDocName"), DISPID(185));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLocalPrintingDocName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_RdpdrLocalPrintingDocName(void)
{
  BSTR pLocalPrintingDocName;
  this->get_RdpdrLocalPrintingDocName((BSTR*)&pLocalPrintingDocName);
  return pLocalPrintingDocName;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipCleanTempDirString"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = clipCleanTempDirString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipCleanTempDirString"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clipCleanTempDirString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_RdpdrClipCleanTempDirString(void)
{
  BSTR clipCleanTempDirString;
  this->get_RdpdrClipCleanTempDirString((BSTR*)&clipCleanTempDirString);
  return clipCleanTempDirString;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipPasteInfoString"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = clipPasteInfoString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipPasteInfoString"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clipPasteInfoString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_RdpdrClipPasteInfoString(void)
{
  BSTR clipPasteInfoString;
  this->get_RdpdrClipPasteInfoString((BSTR*)&clipPasteInfoString);
  return clipPasteInfoString;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_ClearTextPassword(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClearTextPassword"), DISPID(186));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayConnectionBar"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = pDisplayConnectionBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayConnectionBar"), DISPID(187));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisplayConnectionBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_DisplayConnectionBar(void)
{
  VARIANT_BOOL pDisplayConnectionBar;
  this->get_DisplayConnectionBar((VARIANT_BOOL*)&pDisplayConnectionBar);
  return pDisplayConnectionBar;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PinConnectionBar"), DISPID(188));
  TAutoArgs<1> _args;
  _args[1] = pPinConnectionBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PinConnectionBar"), DISPID(188));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pPinConnectionBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_PinConnectionBar(void)
{
  VARIANT_BOOL pPinConnectionBar;
  this->get_PinConnectionBar((VARIANT_BOOL*)&pPinConnectionBar);
  return pPinConnectionBar;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrabFocusOnConnect"), DISPID(189));
  TAutoArgs<1> _args;
  _args[1] = pfGrabFocusOnConnect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrabFocusOnConnect"), DISPID(189));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfGrabFocusOnConnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_GrabFocusOnConnect(void)
{
  VARIANT_BOOL pfGrabFocusOnConnect;
  this->get_GrabFocusOnConnect((VARIANT_BOOL*)&pfGrabFocusOnConnect);
  return pfGrabFocusOnConnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadBalanceInfo"), DISPID(190));
  TAutoArgs<1> _args;
  _args[1] = pLBInfo /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadBalanceInfo"), DISPID(190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLBInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_LoadBalanceInfo(void)
{
  BSTR pLBInfo;
  this->get_LoadBalanceInfo((BSTR*)&pLBInfo);
  return pLBInfo;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDrives"), DISPID(191));
  TAutoArgs<1> _args;
  _args[1] = pRedirectDrives /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDrives"), DISPID(191));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectDrives /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_RedirectDrives(void)
{
  VARIANT_BOOL pRedirectDrives;
  this->get_RedirectDrives((VARIANT_BOOL*)&pRedirectDrives);
  return pRedirectDrives;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPrinters"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = pRedirectPrinters /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPrinters"), DISPID(192));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectPrinters /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_RedirectPrinters(void)
{
  VARIANT_BOOL pRedirectPrinters;
  this->get_RedirectPrinters((VARIANT_BOOL*)&pRedirectPrinters);
  return pRedirectPrinters;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPorts"), DISPID(193));
  TAutoArgs<1> _args;
  _args[1] = pRedirectPorts /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPorts"), DISPID(193));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectPorts /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_RedirectPorts(void)
{
  VARIANT_BOOL pRedirectPorts;
  this->get_RedirectPorts((VARIANT_BOOL*)&pRedirectPorts);
  return pRedirectPorts;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectSmartCards"), DISPID(194));
  TAutoArgs<1> _args;
  _args[1] = pRedirectSmartCards /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectSmartCards"), DISPID(194));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectSmartCards /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_RedirectSmartCards(void)
{
  VARIANT_BOOL pRedirectSmartCards;
  this->get_RedirectSmartCards((VARIANT_BOOL*)&pRedirectSmartCards);
  return pRedirectSmartCards;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache16BppSize"), DISPID(195));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache16BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache16BppSize"), DISPID(195));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache16BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_BitmapVirtualCache16BppSize(void)
{
  long pBitmapVirtualCache16BppSize;
  this->get_BitmapVirtualCache16BppSize((long*)&pBitmapVirtualCache16BppSize);
  return pBitmapVirtualCache16BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache24BppSize"), DISPID(196));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache24BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache24BppSize"), DISPID(196));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache24BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_BitmapVirtualCache24BppSize(void)
{
  long pBitmapVirtualCache24BppSize;
  this->get_BitmapVirtualCache24BppSize((long*)&pBitmapVirtualCache24BppSize);
  return pBitmapVirtualCache24BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_PerformanceFlags(long pDisableList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PerformanceFlags"), DISPID(200));
  TAutoArgs<1> _args;
  _args[1] = pDisableList /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_PerformanceFlags(long* pDisableList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PerformanceFlags"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableList /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_PerformanceFlags(void)
{
  long pDisableList;
  this->get_PerformanceFlags((long*)&pDisableList);
  return pDisableList;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectWithEndpoint"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyTSPublicKey"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = pfNotify /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyTSPublicKey"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfNotify /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_NotifyTSPublicKey(void)
{
  VARIANT_BOOL pfNotify;
  this->get_NotifyTSPublicKey((VARIANT_BOOL*)&pfNotify);
  return pfNotify;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_Compress(long pcompress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<1> _args;
  _args[1] = pcompress /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_Compress(long* pcompress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcompress /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_Compress(void)
{
  long pcompress;
  this->get_Compress((long*)&pcompress);
  return pcompress;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_BitmapPeristence(long pbitmapPeristence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPeristence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPeristence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_BitmapPeristence(void)
{
  long pbitmapPeristence;
  this->get_BitmapPeristence((long*)&pbitmapPeristence);
  return pbitmapPeristence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<1> _args;
  _args[1] = pallowBackgroundInput /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pallowBackgroundInput /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_allowBackgroundInput(void)
{
  long pallowBackgroundInput;
  this->get_allowBackgroundInput((long*)&pallowBackgroundInput);
  return pallowBackgroundInput;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_KeyBoardLayoutStr(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyBoardLayoutStr"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_PluginDlls(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PluginDlls"), DISPID(170));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_IconFile(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconFile"), DISPID(171));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_IconIndex(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconIndex"), DISPID(172));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<1> _args;
  _args[1] = pContainerHandledFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pContainerHandledFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_ContainerHandledFullScreen(void)
{
  long pContainerHandledFullScreen;
  this->get_ContainerHandledFullScreen((long*)&pContainerHandledFullScreen);
  return pContainerHandledFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::set_DisableRdpdr(long pDisableRdpdr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<1> _args;
  _args[1] = pDisableRdpdr /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableRdpdr /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings3DispT<T>::get_DisableRdpdr(void)
{
  long pDisableRdpdr;
  this->get_DisableRdpdr((long*)&pDisableRdpdr);
  return pDisableRdpdr;
}

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient4
// Interface: IMsRdpClient4
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMsRdpClient4T<T>::get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/)
{
  return (*this)->get_AdvancedSettings5(ppAdvSettings);
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall
TCOMIMsRdpClient4T<T>::get_AdvancedSettings5(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr ppAdvSettings;
  OLECHECK(this->get_AdvancedSettings5((Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr*)&ppAdvSettings));
  return ppAdvSettings;
}

// *********************************************************************//
// DispIntf:  IMsRdpClient4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {095E0738-D97D-488B-B9F6-DD0E8D66C0DE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings5"), DISPID(400));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings4**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall
IMsRdpClient4DispT<T>::get_AdvancedSettings5(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr ppAdvSettings;
  this->get_AdvancedSettings5(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings4"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings3**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall
IMsRdpClient4DispT<T>::get_AdvancedSettings4(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr ppAdvSettings;
  this->get_AdvancedSettings4(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings3"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings2**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall
IMsRdpClient4DispT<T>::get_AdvancedSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr ppAdvSettings;
  this->get_AdvancedSettings3(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = pConnectedStatusText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectedStatusText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient4DispT<T>::get_ConnectedStatusText(void)
{
  BSTR pConnectedStatusText;
  this->get_ConnectedStatusText((BSTR*)&pConnectedStatusText);
  return pConnectedStatusText;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::set_ColorDepth(long pcolorDepth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = pcolorDepth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_ColorDepth(long* pcolorDepth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcolorDepth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient4DispT<T>::get_ColorDepth(void)
{
  long pcolorDepth;
  this->get_ColorDepth((long*)&pcolorDepth);
  return pcolorDepth;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings2"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall
IMsRdpClient4DispT<T>::get_AdvancedSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings2(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings2"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall
IMsRdpClient4DispT<T>::get_SecuredSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings2(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedDisconnectReason"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pExtendedDisconnectReason /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall
IMsRdpClient4DispT<T>::get_ExtendedDisconnectReason(void)
{
  Mstsclib_tlb::ExtendedDisconnectReasonCode pExtendedDisconnectReason;
  this->get_ExtendedDisconnectReason((Mstsclib_tlb::ExtendedDisconnectReasonCode*)&pExtendedDisconnectReason);
  return pExtendedDisconnectReason;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pfFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClient4DispT<T>::get_FullScreen(void)
{
  VARIANT_BOOL pfFullScreen;
  this->get_FullScreen((VARIANT_BOOL*)&pfFullScreen);
  return pfFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::SetVirtualChannelOptions(BSTR chanName/*[in]*/, long chanOptions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVirtualChannelOptions"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = chanOptions /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                long* pChanOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVirtualChannelOptions"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pChanOptions /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient4DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/)
{
  long pChanOptions;
  this->GetVirtualChannelOptions(chanName, (long*)&pChanOptions);
  return pChanOptions;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestClose"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pCloseStatus /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mstsclib_tlb::ControlCloseStatus __fastcall
IMsRdpClient4DispT<T>::RequestClose(void)
{
  Mstsclib_tlb::ControlCloseStatus pCloseStatus;
  this->RequestClose((Mstsclib_tlb::ControlCloseStatus*)&pCloseStatus);
  return pCloseStatus;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::set_Server(BSTR pServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pServer /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_Server(BSTR* pServer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pServer /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient4DispT<T>::get_Server(void)
{
  BSTR pServer;
  this->get_Server((BSTR*)&pServer);
  return pServer;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::set_Domain(BSTR pDomain/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pDomain /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_Domain(BSTR* pDomain/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDomain /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient4DispT<T>::get_Domain(void)
{
  BSTR pDomain;
  this->get_Domain((BSTR*)&pDomain);
  return pDomain;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::set_UserName(BSTR pUserName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pUserName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_UserName(BSTR* pUserName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pUserName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient4DispT<T>::get_UserName(void)
{
  BSTR pUserName;
  this->get_UserName((BSTR*)&pUserName);
  return pUserName;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::set_DisconnectedText(BSTR pDisconnectedText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pDisconnectedText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisconnectedText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient4DispT<T>::get_DisconnectedText(void)
{
  BSTR pDisconnectedText;
  this->get_DisconnectedText((BSTR*)&pDisconnectedText);
  return pDisconnectedText;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::set_ConnectingText(BSTR pConnectingText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pConnectingText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectingText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient4DispT<T>::get_ConnectingText(void)
{
  BSTR pConnectingText;
  this->get_ConnectingText((BSTR*)&pConnectingText);
  return pConnectingText;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_Connected(short* pIsConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connected"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIsConnected /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMsRdpClient4DispT<T>::get_Connected(void)
{
  short pIsConnected;
  this->get_Connected((short*)&pIsConnected);
  return pIsConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::set_DesktopWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_DesktopWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient4DispT<T>::get_DesktopWidth(void)
{
  long pVal;
  this->get_DesktopWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::set_DesktopHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_DesktopHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient4DispT<T>::get_DesktopHeight(void)
{
  long pVal;
  this->get_DesktopHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::set_StartConnected(long pfStartConnected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pfStartConnected /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_StartConnected(long* pfStartConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfStartConnected /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient4DispT<T>::get_StartConnected(void)
{
  long pfStartConnected;
  this->get_StartConnected((long*)&pfStartConnected);
  return pfStartConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalScrollBarVisible"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient4DispT<T>::get_HorizontalScrollBarVisible(void)
{
  long pfHScrollVisible;
  this->get_HorizontalScrollBarVisible((long*)&pfHScrollVisible);
  return pfHScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarVisible"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient4DispT<T>::get_VerticalScrollBarVisible(void)
{
  long pfVScrollVisible;
  this->get_VerticalScrollBarVisible((long*)&pfVScrollVisible);
  return pfVScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::set_FullScreenTitle(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreenTitle"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_CipherStrength(long* pCipherStrength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CipherStrength"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCipherStrength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient4DispT<T>::get_CipherStrength(void)
{
  long pCipherStrength;
  this->get_CipherStrength((long*)&pCipherStrength);
  return pCipherStrength;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_Version(BSTR* pVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient4DispT<T>::get_Version(void)
{
  BSTR pVersion;
  this->get_Version((BSTR*)&pVersion);
  return pVersion;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettingsEnabled"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSecuredSettingsEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient4DispT<T>::get_SecuredSettingsEnabled(void)
{
  long pSecuredSettingsEnabled;
  this->get_SecuredSettingsEnabled((long*)&pSecuredSettingsEnabled);
  return pSecuredSettingsEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall
IMsRdpClient4DispT<T>::get_SecuredSettings(void)
{
  Mstsclib_tlb::IMsTscSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings"), DISPID(98));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall
IMsRdpClient4DispT<T>::get_AdvancedSettings(void)
{
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Debugger"), DISPID(99));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscDebug**)ppDebugger /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscDebugPtr __fastcall
IMsRdpClient4DispT<T>::get_Debugger(void)
{
  Mstsclib_tlb::IMsTscDebugPtr ppDebugger;
  this->get_Debugger(&ppDebugger);
  return ppDebugger;
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::Connect()
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(30));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(31));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::CreateVirtualChannels(BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateVirtualChannels"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient4DispT<T>::SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendOnVirtualChannel"), DISPID(34));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = ChanData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMsRdpClientAdvancedSettings4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FBA7F64E-7345-4405-AE50-FA4A763DC0DE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_AuthenticationLevel(unsigned puiAuthLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationLevel"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = puiAuthLevel /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_AuthenticationLevel(unsigned* puiAuthLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationLevel"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(puiAuthLevel /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_AuthenticationLevel(void)
{
  unsigned puiAuthLevel;
  this->get_AuthenticationLevel((unsigned*)&puiAuthLevel);
  return puiAuthLevel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_ConnectionBarShowMinimizeButton(VARIANT_BOOL pfShowMinimize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowMinimizeButton"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = pfShowMinimize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_ConnectionBarShowMinimizeButton(VARIANT_BOOL* pfShowMinimize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowMinimizeButton"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowMinimize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_ConnectionBarShowMinimizeButton(void)
{
  VARIANT_BOOL pfShowMinimize;
  this->get_ConnectionBarShowMinimizeButton((VARIANT_BOOL*)&pfShowMinimize);
  return pfShowMinimize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_ConnectionBarShowRestoreButton(VARIANT_BOOL pfShowRestore/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowRestoreButton"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = pfShowRestore /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_ConnectionBarShowRestoreButton(VARIANT_BOOL* pfShowRestore/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowRestoreButton"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowRestore /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_ConnectionBarShowRestoreButton(void)
{
  VARIANT_BOOL pfShowRestore;
  this->get_ConnectionBarShowRestoreButton((VARIANT_BOOL*)&pfShowRestore);
  return pfShowRestore;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_CanAutoReconnect(VARIANT_BOOL* pfCanAutoReconnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanAutoReconnect"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfCanAutoReconnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_CanAutoReconnect(void)
{
  VARIANT_BOOL pfCanAutoReconnect;
  this->get_CanAutoReconnect((VARIANT_BOOL*)&pfCanAutoReconnect);
  return pfCanAutoReconnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_EnableAutoReconnect(VARIANT_BOOL pfEnableAutoReconnect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableAutoReconnect"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = pfEnableAutoReconnect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_EnableAutoReconnect(VARIANT_BOOL* pfEnableAutoReconnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableAutoReconnect"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnableAutoReconnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_EnableAutoReconnect(void)
{
  VARIANT_BOOL pfEnableAutoReconnect;
  this->get_EnableAutoReconnect((VARIANT_BOOL*)&pfEnableAutoReconnect);
  return pfEnableAutoReconnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_MaxReconnectAttempts(long pMaxReconnectAttempts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxReconnectAttempts"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = pMaxReconnectAttempts /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_MaxReconnectAttempts(long* pMaxReconnectAttempts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxReconnectAttempts"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMaxReconnectAttempts /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_MaxReconnectAttempts(void)
{
  long pMaxReconnectAttempts;
  this->get_MaxReconnectAttempts((long*)&pMaxReconnectAttempts);
  return pMaxReconnectAttempts;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_SmoothScroll(long psmoothScroll/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothScroll"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = psmoothScroll /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_SmoothScroll(long* psmoothScroll/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothScroll"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psmoothScroll /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_SmoothScroll(void)
{
  long psmoothScroll;
  this->get_SmoothScroll((long*)&psmoothScroll);
  return psmoothScroll;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorPassthrough"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pacceleratorPassthrough /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorPassthrough"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pacceleratorPassthrough /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_AcceleratorPassthrough(void)
{
  long pacceleratorPassthrough;
  this->get_AcceleratorPassthrough((long*)&pacceleratorPassthrough);
  return pacceleratorPassthrough;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_ShadowBitmap(long pshadowBitmap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShadowBitmap"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pshadowBitmap /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShadowBitmap"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pshadowBitmap /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_ShadowBitmap(void)
{
  long pshadowBitmap;
  this->get_ShadowBitmap((long*)&pshadowBitmap);
  return pshadowBitmap;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_TransportType(long ptransportType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportType"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = ptransportType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_TransportType(long* ptransportType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportType"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptransportType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_TransportType(void)
{
  long ptransportType;
  this->get_TransportType((long*)&ptransportType);
  return ptransportType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_SasSequence(long psasSequence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SasSequence"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = psasSequence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_SasSequence(long* psasSequence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SasSequence"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psasSequence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_SasSequence(void)
{
  long psasSequence;
  this->get_SasSequence((long*)&psasSequence);
  return psasSequence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_EncryptionEnabled(long pencryptionEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncryptionEnabled"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pencryptionEnabled /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncryptionEnabled"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pencryptionEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_EncryptionEnabled(void)
{
  long pencryptionEnabled;
  this->get_EncryptionEnabled((long*)&pencryptionEnabled);
  return pencryptionEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DedicatedTerminal"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = pdedicatedTerminal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DedicatedTerminal"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdedicatedTerminal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_DedicatedTerminal(void)
{
  long pdedicatedTerminal;
  this->get_DedicatedTerminal((long*)&pdedicatedTerminal);
  return pdedicatedTerminal;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_RDPPort(long prdpPort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RDPPort"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = prdpPort /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_RDPPort(long* prdpPort/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RDPPort"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prdpPort /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_RDPPort(void)
{
  long prdpPort;
  this->get_RDPPort((long*)&prdpPort);
  return prdpPort;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_EnableMouse(long penableMouse/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableMouse"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = penableMouse /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_EnableMouse(long* penableMouse/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableMouse"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(penableMouse /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_EnableMouse(void)
{
  long penableMouse;
  this->get_EnableMouse((long*)&penableMouse);
  return penableMouse;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableCtrlAltDel"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = pdisableCtrlAltDel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableCtrlAltDel"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdisableCtrlAltDel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_DisableCtrlAltDel(void)
{
  long pdisableCtrlAltDel;
  this->get_DisableCtrlAltDel((long*)&pdisableCtrlAltDel);
  return pdisableCtrlAltDel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_EnableWindowsKey(long penableWindowsKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableWindowsKey"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = penableWindowsKey /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableWindowsKey"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(penableWindowsKey /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_EnableWindowsKey(void)
{
  long penableWindowsKey;
  this->get_EnableWindowsKey((long*)&penableWindowsKey);
  return penableWindowsKey;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleClickDetect"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pdoubleClickDetect /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleClickDetect"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdoubleClickDetect /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_DoubleClickDetect(void)
{
  long pdoubleClickDetect;
  this->get_DoubleClickDetect((long*)&pdoubleClickDetect);
  return pdoubleClickDetect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_MaximizeShell(long pmaximizeShell/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximizeShell"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pmaximizeShell /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximizeShell"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmaximizeShell /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_MaximizeShell(void)
{
  long pmaximizeShell;
  this->get_MaximizeShell((long*)&pmaximizeShell);
  return pmaximizeShell;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFullScreen"), DISPID(114));
  TAutoArgs<1> _args;
  _args[1] = photKeyFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFullScreen"), DISPID(114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_HotKeyFullScreen(void)
{
  long photKeyFullScreen;
  this->get_HotKeyFullScreen((long*)&photKeyFullScreen);
  return photKeyFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlEsc"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = photKeyCtrlEsc /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlEsc"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyCtrlEsc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_HotKeyCtrlEsc(void)
{
  long photKeyCtrlEsc;
  this->get_HotKeyCtrlEsc((long*)&photKeyCtrlEsc);
  return photKeyCtrlEsc;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltEsc"), DISPID(116));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltEsc /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltEsc"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltEsc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_HotKeyAltEsc(void)
{
  long photKeyAltEsc;
  this->get_HotKeyAltEsc((long*)&photKeyAltEsc);
  return photKeyAltEsc;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_HotKeyAltTab(long photKeyAltTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltTab"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltTab /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltTab"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltTab /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_HotKeyAltTab(void)
{
  long photKeyAltTab;
  this->get_HotKeyAltTab((long*)&photKeyAltTab);
  return photKeyAltTab;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltShiftTab"), DISPID(118));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltShiftTab /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltShiftTab"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltShiftTab /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_HotKeyAltShiftTab(void)
{
  long photKeyAltShiftTab;
  this->get_HotKeyAltShiftTab((long*)&photKeyAltShiftTab);
  return photKeyAltShiftTab;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltSpace"), DISPID(119));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltSpace /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltSpace"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltSpace /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_HotKeyAltSpace(void)
{
  long photKeyAltSpace;
  this->get_HotKeyAltSpace((long*)&photKeyAltSpace);
  return photKeyAltSpace;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlAltDel"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = photKeyCtrlAltDel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlAltDel"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyCtrlAltDel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_HotKeyCtrlAltDel(void)
{
  long photKeyCtrlAltDel;
  this->get_HotKeyCtrlAltDel((long*)&photKeyCtrlAltDel);
  return photKeyCtrlAltDel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_orderDrawThreshold(long porderDrawThreshold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderDrawThreshold"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = porderDrawThreshold /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderDrawThreshold"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(porderDrawThreshold /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_orderDrawThreshold(void)
{
  long porderDrawThreshold;
  this->get_orderDrawThreshold((long*)&porderDrawThreshold);
  return porderDrawThreshold;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheSize"), DISPID(124));
  TAutoArgs<1> _args;
  _args[1] = pbitmapCacheSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheSize"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapCacheSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_BitmapCacheSize(void)
{
  long pbitmapCacheSize;
  this->get_BitmapCacheSize((long*)&pbitmapCacheSize);
  return pbitmapCacheSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCacheSize"), DISPID(125));
  TAutoArgs<1> _args;
  _args[1] = pbitmapVirtualCacheSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCacheSize"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapVirtualCacheSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_BitmapVirtualCacheSize(void)
{
  long pbitmapVirtualCacheSize;
  this->get_BitmapVirtualCacheSize((long*)&pbitmapVirtualCacheSize);
  return pbitmapVirtualCacheSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleBitmapCachesByBPP"), DISPID(175));
  TAutoArgs<1> _args;
  _args[1] = pbScale /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleBitmapCachesByBPP"), DISPID(175));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbScale /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_ScaleBitmapCachesByBPP(void)
{
  long pbScale;
  this->get_ScaleBitmapCachesByBPP((long*)&pbScale);
  return pbScale;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumBitmapCaches"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = pnumBitmapCaches /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumBitmapCaches"), DISPID(126));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnumBitmapCaches /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_NumBitmapCaches(void)
{
  long pnumBitmapCaches;
  this->get_NumBitmapCaches((long*)&pnumBitmapCaches);
  return pnumBitmapCaches;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CachePersistenceActive"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = pcachePersistenceActive /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CachePersistenceActive"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcachePersistenceActive /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_CachePersistenceActive(void)
{
  long pcachePersistenceActive;
  this->get_CachePersistenceActive((long*)&pcachePersistenceActive);
  return pcachePersistenceActive;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_PersistCacheDirectory(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PersistCacheDirectory"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_brushSupportLevel(long pbrushSupportLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("brushSupportLevel"), DISPID(156));
  TAutoArgs<1> _args;
  _args[1] = pbrushSupportLevel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("brushSupportLevel"), DISPID(156));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbrushSupportLevel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_brushSupportLevel(void)
{
  long pbrushSupportLevel;
  this->get_brushSupportLevel((long*)&pbrushSupportLevel);
  return pbrushSupportLevel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_minInputSendInterval(long pminInputSendInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("minInputSendInterval"), DISPID(157));
  TAutoArgs<1> _args;
  _args[1] = pminInputSendInterval /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("minInputSendInterval"), DISPID(157));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pminInputSendInterval /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_minInputSendInterval(void)
{
  long pminInputSendInterval;
  this->get_minInputSendInterval((long*)&pminInputSendInterval);
  return pminInputSendInterval;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputEventsAtOnce"), DISPID(158));
  TAutoArgs<1> _args;
  _args[1] = pinputEventsAtOnce /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputEventsAtOnce"), DISPID(158));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pinputEventsAtOnce /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_InputEventsAtOnce(void)
{
  long pinputEventsAtOnce;
  this->get_InputEventsAtOnce((long*)&pinputEventsAtOnce);
  return pinputEventsAtOnce;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_maxEventCount(long pmaxEventCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxEventCount"), DISPID(159));
  TAutoArgs<1> _args;
  _args[1] = pmaxEventCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_maxEventCount(long* pmaxEventCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxEventCount"), DISPID(159));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmaxEventCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_maxEventCount(void)
{
  long pmaxEventCount;
  this->get_maxEventCount((long*)&pmaxEventCount);
  return pmaxEventCount;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_keepAliveInterval(long pkeepAliveInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("keepAliveInterval"), DISPID(160));
  TAutoArgs<1> _args;
  _args[1] = pkeepAliveInterval /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("keepAliveInterval"), DISPID(160));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeepAliveInterval /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_keepAliveInterval(void)
{
  long pkeepAliveInterval;
  this->get_keepAliveInterval((long*)&pkeepAliveInterval);
  return pkeepAliveInterval;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_shutdownTimeout(long pshutdownTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("shutdownTimeout"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pshutdownTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("shutdownTimeout"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pshutdownTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_shutdownTimeout(void)
{
  long pshutdownTimeout;
  this->get_shutdownTimeout((long*)&pshutdownTimeout);
  return pshutdownTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("overallConnectionTimeout"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = poverallConnectionTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("overallConnectionTimeout"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(poverallConnectionTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_overallConnectionTimeout(void)
{
  long poverallConnectionTimeout;
  this->get_overallConnectionTimeout((long*)&poverallConnectionTimeout);
  return poverallConnectionTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("singleConnectionTimeout"), DISPID(165));
  TAutoArgs<1> _args;
  _args[1] = psingleConnectionTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("singleConnectionTimeout"), DISPID(165));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psingleConnectionTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_singleConnectionTimeout(void)
{
  long psingleConnectionTimeout;
  this->get_singleConnectionTimeout((long*)&psingleConnectionTimeout);
  return psingleConnectionTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_KeyboardType(long pkeyboardType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardType"), DISPID(166));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_KeyboardType(long* pkeyboardType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardType"), DISPID(166));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_KeyboardType(void)
{
  long pkeyboardType;
  this->get_KeyboardType((long*)&pkeyboardType);
  return pkeyboardType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_KeyboardSubType(long pkeyboardSubType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardSubType"), DISPID(167));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardSubType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardSubType"), DISPID(167));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardSubType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_KeyboardSubType(void)
{
  long pkeyboardSubType;
  this->get_KeyboardSubType((long*)&pkeyboardSubType);
  return pkeyboardSubType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardFunctionKey"), DISPID(168));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardFunctionKey /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardFunctionKey"), DISPID(168));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardFunctionKey /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_KeyboardFunctionKey(void)
{
  long pkeyboardFunctionKey;
  this->get_KeyboardFunctionKey((long*)&pkeyboardFunctionKey);
  return pkeyboardFunctionKey;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WinceFixedPalette"), DISPID(169));
  TAutoArgs<1> _args;
  _args[1] = pwinceFixedPalette /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WinceFixedPalette"), DISPID(169));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pwinceFixedPalette /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_WinceFixedPalette(void)
{
  long pwinceFixedPalette;
  this->get_WinceFixedPalette((long*)&pwinceFixedPalette);
  return pwinceFixedPalette;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToServerConsole"), DISPID(178));
  TAutoArgs<1> _args;
  _args[1] = pConnectToConsole /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToServerConsole"), DISPID(178));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectToConsole /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_ConnectToServerConsole(void)
{
  VARIANT_BOOL pConnectToConsole;
  this->get_ConnectToServerConsole((VARIANT_BOOL*)&pConnectToConsole);
  return pConnectToConsole;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_BitmapPersistence(long pbitmapPersistence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPersistence"), DISPID(182));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPersistence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPersistence"), DISPID(182));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPersistence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_BitmapPersistence(void)
{
  long pbitmapPersistence;
  this->get_BitmapPersistence((long*)&pbitmapPersistence);
  return pbitmapPersistence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinutesToIdleTimeout"), DISPID(183));
  TAutoArgs<1> _args;
  _args[1] = pminutesToIdleTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinutesToIdleTimeout"), DISPID(183));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pminutesToIdleTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_MinutesToIdleTimeout(void)
{
  long pminutesToIdleTimeout;
  this->get_MinutesToIdleTimeout((long*)&pminutesToIdleTimeout);
  return pminutesToIdleTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmartSizing"), DISPID(184));
  TAutoArgs<1> _args;
  _args[1] = pfSmartSizing /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmartSizing"), DISPID(184));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfSmartSizing /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_SmartSizing(void)
{
  VARIANT_BOOL pfSmartSizing;
  this->get_SmartSizing((VARIANT_BOOL*)&pfSmartSizing);
  return pfSmartSizing;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrLocalPrintingDocName"), DISPID(185));
  TAutoArgs<1> _args;
  _args[1] = pLocalPrintingDocName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrLocalPrintingDocName"), DISPID(185));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLocalPrintingDocName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_RdpdrLocalPrintingDocName(void)
{
  BSTR pLocalPrintingDocName;
  this->get_RdpdrLocalPrintingDocName((BSTR*)&pLocalPrintingDocName);
  return pLocalPrintingDocName;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipCleanTempDirString"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = clipCleanTempDirString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipCleanTempDirString"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clipCleanTempDirString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_RdpdrClipCleanTempDirString(void)
{
  BSTR clipCleanTempDirString;
  this->get_RdpdrClipCleanTempDirString((BSTR*)&clipCleanTempDirString);
  return clipCleanTempDirString;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipPasteInfoString"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = clipPasteInfoString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipPasteInfoString"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clipPasteInfoString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_RdpdrClipPasteInfoString(void)
{
  BSTR clipPasteInfoString;
  this->get_RdpdrClipPasteInfoString((BSTR*)&clipPasteInfoString);
  return clipPasteInfoString;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_ClearTextPassword(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClearTextPassword"), DISPID(186));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayConnectionBar"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = pDisplayConnectionBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayConnectionBar"), DISPID(187));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisplayConnectionBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_DisplayConnectionBar(void)
{
  VARIANT_BOOL pDisplayConnectionBar;
  this->get_DisplayConnectionBar((VARIANT_BOOL*)&pDisplayConnectionBar);
  return pDisplayConnectionBar;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PinConnectionBar"), DISPID(188));
  TAutoArgs<1> _args;
  _args[1] = pPinConnectionBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PinConnectionBar"), DISPID(188));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pPinConnectionBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_PinConnectionBar(void)
{
  VARIANT_BOOL pPinConnectionBar;
  this->get_PinConnectionBar((VARIANT_BOOL*)&pPinConnectionBar);
  return pPinConnectionBar;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrabFocusOnConnect"), DISPID(189));
  TAutoArgs<1> _args;
  _args[1] = pfGrabFocusOnConnect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrabFocusOnConnect"), DISPID(189));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfGrabFocusOnConnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_GrabFocusOnConnect(void)
{
  VARIANT_BOOL pfGrabFocusOnConnect;
  this->get_GrabFocusOnConnect((VARIANT_BOOL*)&pfGrabFocusOnConnect);
  return pfGrabFocusOnConnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadBalanceInfo"), DISPID(190));
  TAutoArgs<1> _args;
  _args[1] = pLBInfo /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadBalanceInfo"), DISPID(190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLBInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_LoadBalanceInfo(void)
{
  BSTR pLBInfo;
  this->get_LoadBalanceInfo((BSTR*)&pLBInfo);
  return pLBInfo;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDrives"), DISPID(191));
  TAutoArgs<1> _args;
  _args[1] = pRedirectDrives /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDrives"), DISPID(191));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectDrives /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_RedirectDrives(void)
{
  VARIANT_BOOL pRedirectDrives;
  this->get_RedirectDrives((VARIANT_BOOL*)&pRedirectDrives);
  return pRedirectDrives;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPrinters"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = pRedirectPrinters /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPrinters"), DISPID(192));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectPrinters /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_RedirectPrinters(void)
{
  VARIANT_BOOL pRedirectPrinters;
  this->get_RedirectPrinters((VARIANT_BOOL*)&pRedirectPrinters);
  return pRedirectPrinters;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPorts"), DISPID(193));
  TAutoArgs<1> _args;
  _args[1] = pRedirectPorts /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPorts"), DISPID(193));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectPorts /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_RedirectPorts(void)
{
  VARIANT_BOOL pRedirectPorts;
  this->get_RedirectPorts((VARIANT_BOOL*)&pRedirectPorts);
  return pRedirectPorts;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectSmartCards"), DISPID(194));
  TAutoArgs<1> _args;
  _args[1] = pRedirectSmartCards /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectSmartCards"), DISPID(194));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectSmartCards /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_RedirectSmartCards(void)
{
  VARIANT_BOOL pRedirectSmartCards;
  this->get_RedirectSmartCards((VARIANT_BOOL*)&pRedirectSmartCards);
  return pRedirectSmartCards;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache16BppSize"), DISPID(195));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache16BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache16BppSize"), DISPID(195));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache16BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_BitmapVirtualCache16BppSize(void)
{
  long pBitmapVirtualCache16BppSize;
  this->get_BitmapVirtualCache16BppSize((long*)&pBitmapVirtualCache16BppSize);
  return pBitmapVirtualCache16BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache24BppSize"), DISPID(196));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache24BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache24BppSize"), DISPID(196));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache24BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_BitmapVirtualCache24BppSize(void)
{
  long pBitmapVirtualCache24BppSize;
  this->get_BitmapVirtualCache24BppSize((long*)&pBitmapVirtualCache24BppSize);
  return pBitmapVirtualCache24BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_PerformanceFlags(long pDisableList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PerformanceFlags"), DISPID(200));
  TAutoArgs<1> _args;
  _args[1] = pDisableList /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_PerformanceFlags(long* pDisableList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PerformanceFlags"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableList /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_PerformanceFlags(void)
{
  long pDisableList;
  this->get_PerformanceFlags((long*)&pDisableList);
  return pDisableList;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectWithEndpoint"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyTSPublicKey"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = pfNotify /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyTSPublicKey"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfNotify /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_NotifyTSPublicKey(void)
{
  VARIANT_BOOL pfNotify;
  this->get_NotifyTSPublicKey((VARIANT_BOOL*)&pfNotify);
  return pfNotify;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_Compress(long pcompress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<1> _args;
  _args[1] = pcompress /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_Compress(long* pcompress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcompress /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_Compress(void)
{
  long pcompress;
  this->get_Compress((long*)&pcompress);
  return pcompress;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_BitmapPeristence(long pbitmapPeristence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPeristence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPeristence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_BitmapPeristence(void)
{
  long pbitmapPeristence;
  this->get_BitmapPeristence((long*)&pbitmapPeristence);
  return pbitmapPeristence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<1> _args;
  _args[1] = pallowBackgroundInput /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pallowBackgroundInput /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_allowBackgroundInput(void)
{
  long pallowBackgroundInput;
  this->get_allowBackgroundInput((long*)&pallowBackgroundInput);
  return pallowBackgroundInput;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_KeyBoardLayoutStr(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyBoardLayoutStr"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_PluginDlls(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PluginDlls"), DISPID(170));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_IconFile(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconFile"), DISPID(171));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_IconIndex(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconIndex"), DISPID(172));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<1> _args;
  _args[1] = pContainerHandledFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pContainerHandledFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_ContainerHandledFullScreen(void)
{
  long pContainerHandledFullScreen;
  this->get_ContainerHandledFullScreen((long*)&pContainerHandledFullScreen);
  return pContainerHandledFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::set_DisableRdpdr(long pDisableRdpdr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<1> _args;
  _args[1] = pDisableRdpdr /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableRdpdr /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings4DispT<T>::get_DisableRdpdr(void)
{
  long pDisableRdpdr;
  this->get_DisableRdpdr((long*)&pDisableRdpdr);
  return pDisableRdpdr;
}

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient5
// Interface: IMsRdpClient5
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMsRdpClient5T<T>::get_TransportSettings(Mstsclib_tlb::IMsRdpClientTransportSettings** ppXportSet/*[out,retval]*/)
{
  return (*this)->get_TransportSettings(ppXportSet);
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettingsPtr __fastcall
TCOMIMsRdpClient5T<T>::get_TransportSettings(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettingsPtr ppXportSet;
  OLECHECK(this->get_TransportSettings((Mstsclib_tlb::IMsRdpClientTransportSettingsPtr*)&ppXportSet));
  return ppXportSet;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient5T<T>::get_AdvancedSettings6(Mstsclib_tlb::IMsRdpClientAdvancedSettings5** ppAdvSettings/*[out,retval]*/)
{
  return (*this)->get_AdvancedSettings6(ppAdvSettings);
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr __fastcall
TCOMIMsRdpClient5T<T>::get_AdvancedSettings6(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr ppAdvSettings;
  OLECHECK(this->get_AdvancedSettings6((Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr*)&ppAdvSettings));
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient5T<T>::GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                           unsigned ExtendedDisconnectReason/*[in]*/, 
                                           BSTR* pBstrErrorMsg/*[out,retval]*/)
{
  return (*this)->GetErrorDescription(disconnectReason, ExtendedDisconnectReason, pBstrErrorMsg);
}

template <class T> BSTR __fastcall
TCOMIMsRdpClient5T<T>::GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                           unsigned ExtendedDisconnectReason/*[in]*/)
{
  BSTR pBstrErrorMsg = 0;
  OLECHECK(this->GetErrorDescription(disconnectReason/*[in]*/, ExtendedDisconnectReason/*[in]*/, (BSTR*)&pBstrErrorMsg));
  return pBstrErrorMsg;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient5T<T>::get_RemoteProgram(Mstsclib_tlb::ITSRemoteProgram** ppRemoteProgram/*[out,retval]*/)
{
  return (*this)->get_RemoteProgram(ppRemoteProgram);
}

template <class T> Mstsclib_tlb::ITSRemoteProgramPtr __fastcall
TCOMIMsRdpClient5T<T>::get_RemoteProgram(void)
{
  Mstsclib_tlb::ITSRemoteProgramPtr ppRemoteProgram;
  OLECHECK(this->get_RemoteProgram((Mstsclib_tlb::ITSRemoteProgramPtr*)&ppRemoteProgram));
  return ppRemoteProgram;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient5T<T>::get_MsRdpClientShell(Mstsclib_tlb::IMsRdpClientShell** ppLauncher/*[out,retval]*/)
{
  return (*this)->get_MsRdpClientShell(ppLauncher);
}

template <class T> Mstsclib_tlb::IMsRdpClientShellPtr __fastcall
TCOMIMsRdpClient5T<T>::get_MsRdpClientShell(void)
{
  Mstsclib_tlb::IMsRdpClientShellPtr ppLauncher;
  OLECHECK(this->get_MsRdpClientShell((Mstsclib_tlb::IMsRdpClientShellPtr*)&ppLauncher));
  return ppLauncher;
}

// *********************************************************************//
// DispIntf:  IMsRdpClient5
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4EB5335B-6429-477D-B922-E06A28ECD8BF}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_TransportSettings(Mstsclib_tlb::IMsRdpClientTransportSettings** ppXportSet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings"), DISPID(500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings**)ppXportSet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettingsPtr __fastcall
IMsRdpClient5DispT<T>::get_TransportSettings(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettingsPtr ppXportSet;
  this->get_TransportSettings(&ppXportSet);
  return ppXportSet;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_AdvancedSettings6(Mstsclib_tlb::IMsRdpClientAdvancedSettings5** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings6"), DISPID(502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings5**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr __fastcall
IMsRdpClient5DispT<T>::get_AdvancedSettings6(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr ppAdvSettings;
  this->get_AdvancedSettings6(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                           unsigned ExtendedDisconnectReason/*[in]*/, 
                                           BSTR* pBstrErrorMsg/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetErrorDescription"), DISPID(503));
  TAutoArgs<2> _args;
  _args[1] = disconnectReason /*[VT_UINT:0]*/;
  _args[2] = ExtendedDisconnectReason /*[VT_UINT:0]*/;
  return OutRetValSetterPtr(pBstrErrorMsg /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient5DispT<T>::GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                           unsigned ExtendedDisconnectReason/*[in]*/)
{
  BSTR pBstrErrorMsg;
  this->GetErrorDescription(disconnectReason, ExtendedDisconnectReason, (BSTR*)&pBstrErrorMsg);
  return pBstrErrorMsg;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_RemoteProgram(Mstsclib_tlb::ITSRemoteProgram** ppRemoteProgram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgram"), DISPID(504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::ITSRemoteProgram**)ppRemoteProgram /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ITSRemoteProgramPtr __fastcall
IMsRdpClient5DispT<T>::get_RemoteProgram(void)
{
  Mstsclib_tlb::ITSRemoteProgramPtr ppRemoteProgram;
  this->get_RemoteProgram(&ppRemoteProgram);
  return ppRemoteProgram;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_MsRdpClientShell(Mstsclib_tlb::IMsRdpClientShell** ppLauncher/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MsRdpClientShell"), DISPID(505));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientShell**)ppLauncher /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientShellPtr __fastcall
IMsRdpClient5DispT<T>::get_MsRdpClientShell(void)
{
  Mstsclib_tlb::IMsRdpClientShellPtr ppLauncher;
  this->get_MsRdpClientShell(&ppLauncher);
  return ppLauncher;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings5"), DISPID(400));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings4**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall
IMsRdpClient5DispT<T>::get_AdvancedSettings5(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr ppAdvSettings;
  this->get_AdvancedSettings5(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings4"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings3**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall
IMsRdpClient5DispT<T>::get_AdvancedSettings4(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr ppAdvSettings;
  this->get_AdvancedSettings4(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings3"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings2**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall
IMsRdpClient5DispT<T>::get_AdvancedSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr ppAdvSettings;
  this->get_AdvancedSettings3(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = pConnectedStatusText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectedStatusText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient5DispT<T>::get_ConnectedStatusText(void)
{
  BSTR pConnectedStatusText;
  this->get_ConnectedStatusText((BSTR*)&pConnectedStatusText);
  return pConnectedStatusText;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::set_ColorDepth(long pcolorDepth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = pcolorDepth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_ColorDepth(long* pcolorDepth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcolorDepth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient5DispT<T>::get_ColorDepth(void)
{
  long pcolorDepth;
  this->get_ColorDepth((long*)&pcolorDepth);
  return pcolorDepth;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings2"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall
IMsRdpClient5DispT<T>::get_AdvancedSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings2(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings2"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall
IMsRdpClient5DispT<T>::get_SecuredSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings2(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedDisconnectReason"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pExtendedDisconnectReason /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall
IMsRdpClient5DispT<T>::get_ExtendedDisconnectReason(void)
{
  Mstsclib_tlb::ExtendedDisconnectReasonCode pExtendedDisconnectReason;
  this->get_ExtendedDisconnectReason((Mstsclib_tlb::ExtendedDisconnectReasonCode*)&pExtendedDisconnectReason);
  return pExtendedDisconnectReason;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pfFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClient5DispT<T>::get_FullScreen(void)
{
  VARIANT_BOOL pfFullScreen;
  this->get_FullScreen((VARIANT_BOOL*)&pfFullScreen);
  return pfFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::SetVirtualChannelOptions(BSTR chanName/*[in]*/, long chanOptions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVirtualChannelOptions"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = chanOptions /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                long* pChanOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVirtualChannelOptions"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pChanOptions /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient5DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/)
{
  long pChanOptions;
  this->GetVirtualChannelOptions(chanName, (long*)&pChanOptions);
  return pChanOptions;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestClose"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pCloseStatus /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mstsclib_tlb::ControlCloseStatus __fastcall
IMsRdpClient5DispT<T>::RequestClose(void)
{
  Mstsclib_tlb::ControlCloseStatus pCloseStatus;
  this->RequestClose((Mstsclib_tlb::ControlCloseStatus*)&pCloseStatus);
  return pCloseStatus;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::set_Server(BSTR pServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pServer /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_Server(BSTR* pServer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pServer /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient5DispT<T>::get_Server(void)
{
  BSTR pServer;
  this->get_Server((BSTR*)&pServer);
  return pServer;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::set_Domain(BSTR pDomain/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pDomain /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_Domain(BSTR* pDomain/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDomain /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient5DispT<T>::get_Domain(void)
{
  BSTR pDomain;
  this->get_Domain((BSTR*)&pDomain);
  return pDomain;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::set_UserName(BSTR pUserName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pUserName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_UserName(BSTR* pUserName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pUserName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient5DispT<T>::get_UserName(void)
{
  BSTR pUserName;
  this->get_UserName((BSTR*)&pUserName);
  return pUserName;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::set_DisconnectedText(BSTR pDisconnectedText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pDisconnectedText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisconnectedText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient5DispT<T>::get_DisconnectedText(void)
{
  BSTR pDisconnectedText;
  this->get_DisconnectedText((BSTR*)&pDisconnectedText);
  return pDisconnectedText;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::set_ConnectingText(BSTR pConnectingText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pConnectingText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectingText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient5DispT<T>::get_ConnectingText(void)
{
  BSTR pConnectingText;
  this->get_ConnectingText((BSTR*)&pConnectingText);
  return pConnectingText;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_Connected(short* pIsConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connected"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIsConnected /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMsRdpClient5DispT<T>::get_Connected(void)
{
  short pIsConnected;
  this->get_Connected((short*)&pIsConnected);
  return pIsConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::set_DesktopWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_DesktopWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient5DispT<T>::get_DesktopWidth(void)
{
  long pVal;
  this->get_DesktopWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::set_DesktopHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_DesktopHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient5DispT<T>::get_DesktopHeight(void)
{
  long pVal;
  this->get_DesktopHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::set_StartConnected(long pfStartConnected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pfStartConnected /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_StartConnected(long* pfStartConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfStartConnected /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient5DispT<T>::get_StartConnected(void)
{
  long pfStartConnected;
  this->get_StartConnected((long*)&pfStartConnected);
  return pfStartConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalScrollBarVisible"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient5DispT<T>::get_HorizontalScrollBarVisible(void)
{
  long pfHScrollVisible;
  this->get_HorizontalScrollBarVisible((long*)&pfHScrollVisible);
  return pfHScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarVisible"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient5DispT<T>::get_VerticalScrollBarVisible(void)
{
  long pfVScrollVisible;
  this->get_VerticalScrollBarVisible((long*)&pfVScrollVisible);
  return pfVScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::set_FullScreenTitle(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreenTitle"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_CipherStrength(long* pCipherStrength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CipherStrength"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCipherStrength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient5DispT<T>::get_CipherStrength(void)
{
  long pCipherStrength;
  this->get_CipherStrength((long*)&pCipherStrength);
  return pCipherStrength;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_Version(BSTR* pVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient5DispT<T>::get_Version(void)
{
  BSTR pVersion;
  this->get_Version((BSTR*)&pVersion);
  return pVersion;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettingsEnabled"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSecuredSettingsEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient5DispT<T>::get_SecuredSettingsEnabled(void)
{
  long pSecuredSettingsEnabled;
  this->get_SecuredSettingsEnabled((long*)&pSecuredSettingsEnabled);
  return pSecuredSettingsEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall
IMsRdpClient5DispT<T>::get_SecuredSettings(void)
{
  Mstsclib_tlb::IMsTscSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings"), DISPID(98));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall
IMsRdpClient5DispT<T>::get_AdvancedSettings(void)
{
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Debugger"), DISPID(99));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscDebug**)ppDebugger /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscDebugPtr __fastcall
IMsRdpClient5DispT<T>::get_Debugger(void)
{
  Mstsclib_tlb::IMsTscDebugPtr ppDebugger;
  this->get_Debugger(&ppDebugger);
  return ppDebugger;
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::Connect()
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(30));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(31));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::CreateVirtualChannels(BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateVirtualChannels"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient5DispT<T>::SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendOnVirtualChannel"), DISPID(34));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = ChanData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMsRdpClientTransportSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {720298C0-A099-46F5-9F82-96921BAE4701}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClientTransportSettingsDispT<T>::set_GatewayHostname(BSTR pProxyHostname/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayHostname"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = pProxyHostname /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettingsDispT<T>::get_GatewayHostname(BSTR* pProxyHostname/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayHostname"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pProxyHostname /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettingsDispT<T>::get_GatewayHostname(void)
{
  BSTR pProxyHostname;
  this->get_GatewayHostname((BSTR*)&pProxyHostname);
  return pProxyHostname;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettingsDispT<T>::set_GatewayUsageMethod(unsigned_long pulProxyUsageMethod/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUsageMethod"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = pulProxyUsageMethod /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettingsDispT<T>::get_GatewayUsageMethod(unsigned_long* pulProxyUsageMethod/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUsageMethod"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyUsageMethod /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettingsDispT<T>::get_GatewayUsageMethod(void)
{
  unsigned_long pulProxyUsageMethod;
  this->get_GatewayUsageMethod((unsigned_long*)&pulProxyUsageMethod);
  return pulProxyUsageMethod;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettingsDispT<T>::set_GatewayProfileUsageMethod(unsigned_long pulProxyProfileUsageMethod/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayProfileUsageMethod"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = pulProxyProfileUsageMethod /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettingsDispT<T>::get_GatewayProfileUsageMethod(unsigned_long* pulProxyProfileUsageMethod/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayProfileUsageMethod"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyProfileUsageMethod /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettingsDispT<T>::get_GatewayProfileUsageMethod(void)
{
  unsigned_long pulProxyProfileUsageMethod;
  this->get_GatewayProfileUsageMethod((unsigned_long*)&pulProxyProfileUsageMethod);
  return pulProxyProfileUsageMethod;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettingsDispT<T>::set_GatewayCredsSource(unsigned_long pulProxyCredsSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredsSource"), DISPID(213));
  TAutoArgs<1> _args;
  _args[1] = pulProxyCredsSource /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettingsDispT<T>::get_GatewayCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredsSource"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyCredsSource /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettingsDispT<T>::get_GatewayCredsSource(void)
{
  unsigned_long pulProxyCredsSource;
  this->get_GatewayCredsSource((unsigned_long*)&pulProxyCredsSource);
  return pulProxyCredsSource;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettingsDispT<T>::set_GatewayUserSelectedCredsSource(unsigned_long pulProxyCredsSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUserSelectedCredsSource"), DISPID(216));
  TAutoArgs<1> _args;
  _args[1] = pulProxyCredsSource /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettingsDispT<T>::get_GatewayUserSelectedCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUserSelectedCredsSource"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyCredsSource /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettingsDispT<T>::get_GatewayUserSelectedCredsSource(void)
{
  unsigned_long pulProxyCredsSource;
  this->get_GatewayUserSelectedCredsSource((unsigned_long*)&pulProxyCredsSource);
  return pulProxyCredsSource;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettingsDispT<T>::get_GatewayIsSupported(long* pfProxyIsSupported/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayIsSupported"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfProxyIsSupported /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientTransportSettingsDispT<T>::get_GatewayIsSupported(void)
{
  long pfProxyIsSupported;
  this->get_GatewayIsSupported((long*)&pfProxyIsSupported);
  return pfProxyIsSupported;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettingsDispT<T>::get_GatewayDefaultUsageMethod(unsigned_long* pulProxyDefaultUsageMethod/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayDefaultUsageMethod"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyDefaultUsageMethod /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettingsDispT<T>::get_GatewayDefaultUsageMethod(void)
{
  unsigned_long pulProxyDefaultUsageMethod;
  this->get_GatewayDefaultUsageMethod((unsigned_long*)&pulProxyDefaultUsageMethod);
  return pulProxyDefaultUsageMethod;
}

// *********************************************************************//
// DispIntf:  IMsRdpClientAdvancedSettings5
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FBA7F64E-6783-4405-DA45-FA4A763DABD0}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_RedirectClipboard(VARIANT_BOOL pfRedirectClipboard/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectClipboard"), DISPID(213));
  TAutoArgs<1> _args;
  _args[1] = pfRedirectClipboard /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RedirectClipboard(VARIANT_BOOL* pfRedirectClipboard/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectClipboard"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRedirectClipboard /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RedirectClipboard(void)
{
  VARIANT_BOOL pfRedirectClipboard;
  this->get_RedirectClipboard((VARIANT_BOOL*)&pfRedirectClipboard);
  return pfRedirectClipboard;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_AudioRedirectionMode(unsigned puiAudioRedirectionMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioRedirectionMode"), DISPID(215));
  TAutoArgs<1> _args;
  _args[1] = puiAudioRedirectionMode /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_AudioRedirectionMode(unsigned* puiAudioRedirectionMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioRedirectionMode"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(puiAudioRedirectionMode /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_AudioRedirectionMode(void)
{
  unsigned puiAudioRedirectionMode;
  this->get_AudioRedirectionMode((unsigned*)&puiAudioRedirectionMode);
  return puiAudioRedirectionMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_ConnectionBarShowPinButton(VARIANT_BOOL pfShowPin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowPinButton"), DISPID(216));
  TAutoArgs<1> _args;
  _args[1] = pfShowPin /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_ConnectionBarShowPinButton(VARIANT_BOOL* pfShowPin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowPinButton"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowPin /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_ConnectionBarShowPinButton(void)
{
  VARIANT_BOOL pfShowPin;
  this->get_ConnectionBarShowPinButton((VARIANT_BOOL*)&pfShowPin);
  return pfShowPin;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_PublicMode(VARIANT_BOOL pfPublicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PublicMode"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = pfPublicMode /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_PublicMode(VARIANT_BOOL* pfPublicMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PublicMode"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfPublicMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_PublicMode(void)
{
  VARIANT_BOOL pfPublicMode;
  this->get_PublicMode((VARIANT_BOOL*)&pfPublicMode);
  return pfPublicMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_RedirectDevices(VARIANT_BOOL pfRedirectPnPDevices/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDevices"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pfRedirectPnPDevices /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RedirectDevices(VARIANT_BOOL* pfRedirectPnPDevices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDevices"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRedirectPnPDevices /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RedirectDevices(void)
{
  VARIANT_BOOL pfRedirectPnPDevices;
  this->get_RedirectDevices((VARIANT_BOOL*)&pfRedirectPnPDevices);
  return pfRedirectPnPDevices;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_RedirectPOSDevices(VARIANT_BOOL pfRedirectPOSDevices/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPOSDevices"), DISPID(219));
  TAutoArgs<1> _args;
  _args[1] = pfRedirectPOSDevices /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RedirectPOSDevices(VARIANT_BOOL* pfRedirectPOSDevices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPOSDevices"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRedirectPOSDevices /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RedirectPOSDevices(void)
{
  VARIANT_BOOL pfRedirectPOSDevices;
  this->get_RedirectPOSDevices((VARIANT_BOOL*)&pfRedirectPOSDevices);
  return pfRedirectPOSDevices;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_BitmapVirtualCache32BppSize(long pBitmapVirtualCache32BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache32BppSize"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache32BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_BitmapVirtualCache32BppSize(long* pBitmapVirtualCache32BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache32BppSize"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache32BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_BitmapVirtualCache32BppSize(void)
{
  long pBitmapVirtualCache32BppSize;
  this->get_BitmapVirtualCache32BppSize((long*)&pBitmapVirtualCache32BppSize);
  return pBitmapVirtualCache32BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_AuthenticationLevel(unsigned puiAuthLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationLevel"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = puiAuthLevel /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_AuthenticationLevel(unsigned* puiAuthLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationLevel"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(puiAuthLevel /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_AuthenticationLevel(void)
{
  unsigned puiAuthLevel;
  this->get_AuthenticationLevel((unsigned*)&puiAuthLevel);
  return puiAuthLevel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_ConnectionBarShowMinimizeButton(VARIANT_BOOL pfShowMinimize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowMinimizeButton"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = pfShowMinimize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_ConnectionBarShowMinimizeButton(VARIANT_BOOL* pfShowMinimize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowMinimizeButton"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowMinimize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_ConnectionBarShowMinimizeButton(void)
{
  VARIANT_BOOL pfShowMinimize;
  this->get_ConnectionBarShowMinimizeButton((VARIANT_BOOL*)&pfShowMinimize);
  return pfShowMinimize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_ConnectionBarShowRestoreButton(VARIANT_BOOL pfShowRestore/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowRestoreButton"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = pfShowRestore /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_ConnectionBarShowRestoreButton(VARIANT_BOOL* pfShowRestore/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowRestoreButton"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowRestore /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_ConnectionBarShowRestoreButton(void)
{
  VARIANT_BOOL pfShowRestore;
  this->get_ConnectionBarShowRestoreButton((VARIANT_BOOL*)&pfShowRestore);
  return pfShowRestore;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_CanAutoReconnect(VARIANT_BOOL* pfCanAutoReconnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanAutoReconnect"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfCanAutoReconnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_CanAutoReconnect(void)
{
  VARIANT_BOOL pfCanAutoReconnect;
  this->get_CanAutoReconnect((VARIANT_BOOL*)&pfCanAutoReconnect);
  return pfCanAutoReconnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_EnableAutoReconnect(VARIANT_BOOL pfEnableAutoReconnect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableAutoReconnect"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = pfEnableAutoReconnect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_EnableAutoReconnect(VARIANT_BOOL* pfEnableAutoReconnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableAutoReconnect"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnableAutoReconnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_EnableAutoReconnect(void)
{
  VARIANT_BOOL pfEnableAutoReconnect;
  this->get_EnableAutoReconnect((VARIANT_BOOL*)&pfEnableAutoReconnect);
  return pfEnableAutoReconnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_MaxReconnectAttempts(long pMaxReconnectAttempts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxReconnectAttempts"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = pMaxReconnectAttempts /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_MaxReconnectAttempts(long* pMaxReconnectAttempts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxReconnectAttempts"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMaxReconnectAttempts /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_MaxReconnectAttempts(void)
{
  long pMaxReconnectAttempts;
  this->get_MaxReconnectAttempts((long*)&pMaxReconnectAttempts);
  return pMaxReconnectAttempts;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_SmoothScroll(long psmoothScroll/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothScroll"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = psmoothScroll /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_SmoothScroll(long* psmoothScroll/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothScroll"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psmoothScroll /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_SmoothScroll(void)
{
  long psmoothScroll;
  this->get_SmoothScroll((long*)&psmoothScroll);
  return psmoothScroll;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorPassthrough"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pacceleratorPassthrough /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorPassthrough"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pacceleratorPassthrough /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_AcceleratorPassthrough(void)
{
  long pacceleratorPassthrough;
  this->get_AcceleratorPassthrough((long*)&pacceleratorPassthrough);
  return pacceleratorPassthrough;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_ShadowBitmap(long pshadowBitmap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShadowBitmap"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pshadowBitmap /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShadowBitmap"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pshadowBitmap /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_ShadowBitmap(void)
{
  long pshadowBitmap;
  this->get_ShadowBitmap((long*)&pshadowBitmap);
  return pshadowBitmap;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_TransportType(long ptransportType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportType"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = ptransportType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_TransportType(long* ptransportType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportType"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptransportType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_TransportType(void)
{
  long ptransportType;
  this->get_TransportType((long*)&ptransportType);
  return ptransportType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_SasSequence(long psasSequence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SasSequence"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = psasSequence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_SasSequence(long* psasSequence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SasSequence"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psasSequence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_SasSequence(void)
{
  long psasSequence;
  this->get_SasSequence((long*)&psasSequence);
  return psasSequence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_EncryptionEnabled(long pencryptionEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncryptionEnabled"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pencryptionEnabled /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncryptionEnabled"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pencryptionEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_EncryptionEnabled(void)
{
  long pencryptionEnabled;
  this->get_EncryptionEnabled((long*)&pencryptionEnabled);
  return pencryptionEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DedicatedTerminal"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = pdedicatedTerminal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DedicatedTerminal"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdedicatedTerminal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_DedicatedTerminal(void)
{
  long pdedicatedTerminal;
  this->get_DedicatedTerminal((long*)&pdedicatedTerminal);
  return pdedicatedTerminal;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_RDPPort(long prdpPort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RDPPort"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = prdpPort /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RDPPort(long* prdpPort/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RDPPort"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prdpPort /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RDPPort(void)
{
  long prdpPort;
  this->get_RDPPort((long*)&prdpPort);
  return prdpPort;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_EnableMouse(long penableMouse/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableMouse"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = penableMouse /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_EnableMouse(long* penableMouse/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableMouse"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(penableMouse /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_EnableMouse(void)
{
  long penableMouse;
  this->get_EnableMouse((long*)&penableMouse);
  return penableMouse;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableCtrlAltDel"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = pdisableCtrlAltDel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableCtrlAltDel"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdisableCtrlAltDel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_DisableCtrlAltDel(void)
{
  long pdisableCtrlAltDel;
  this->get_DisableCtrlAltDel((long*)&pdisableCtrlAltDel);
  return pdisableCtrlAltDel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_EnableWindowsKey(long penableWindowsKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableWindowsKey"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = penableWindowsKey /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableWindowsKey"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(penableWindowsKey /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_EnableWindowsKey(void)
{
  long penableWindowsKey;
  this->get_EnableWindowsKey((long*)&penableWindowsKey);
  return penableWindowsKey;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleClickDetect"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pdoubleClickDetect /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleClickDetect"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdoubleClickDetect /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_DoubleClickDetect(void)
{
  long pdoubleClickDetect;
  this->get_DoubleClickDetect((long*)&pdoubleClickDetect);
  return pdoubleClickDetect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_MaximizeShell(long pmaximizeShell/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximizeShell"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pmaximizeShell /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximizeShell"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmaximizeShell /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_MaximizeShell(void)
{
  long pmaximizeShell;
  this->get_MaximizeShell((long*)&pmaximizeShell);
  return pmaximizeShell;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFullScreen"), DISPID(114));
  TAutoArgs<1> _args;
  _args[1] = photKeyFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFullScreen"), DISPID(114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_HotKeyFullScreen(void)
{
  long photKeyFullScreen;
  this->get_HotKeyFullScreen((long*)&photKeyFullScreen);
  return photKeyFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlEsc"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = photKeyCtrlEsc /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlEsc"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyCtrlEsc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_HotKeyCtrlEsc(void)
{
  long photKeyCtrlEsc;
  this->get_HotKeyCtrlEsc((long*)&photKeyCtrlEsc);
  return photKeyCtrlEsc;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltEsc"), DISPID(116));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltEsc /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltEsc"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltEsc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_HotKeyAltEsc(void)
{
  long photKeyAltEsc;
  this->get_HotKeyAltEsc((long*)&photKeyAltEsc);
  return photKeyAltEsc;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_HotKeyAltTab(long photKeyAltTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltTab"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltTab /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltTab"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltTab /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_HotKeyAltTab(void)
{
  long photKeyAltTab;
  this->get_HotKeyAltTab((long*)&photKeyAltTab);
  return photKeyAltTab;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltShiftTab"), DISPID(118));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltShiftTab /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltShiftTab"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltShiftTab /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_HotKeyAltShiftTab(void)
{
  long photKeyAltShiftTab;
  this->get_HotKeyAltShiftTab((long*)&photKeyAltShiftTab);
  return photKeyAltShiftTab;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltSpace"), DISPID(119));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltSpace /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltSpace"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltSpace /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_HotKeyAltSpace(void)
{
  long photKeyAltSpace;
  this->get_HotKeyAltSpace((long*)&photKeyAltSpace);
  return photKeyAltSpace;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlAltDel"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = photKeyCtrlAltDel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlAltDel"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyCtrlAltDel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_HotKeyCtrlAltDel(void)
{
  long photKeyCtrlAltDel;
  this->get_HotKeyCtrlAltDel((long*)&photKeyCtrlAltDel);
  return photKeyCtrlAltDel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_orderDrawThreshold(long porderDrawThreshold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderDrawThreshold"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = porderDrawThreshold /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderDrawThreshold"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(porderDrawThreshold /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_orderDrawThreshold(void)
{
  long porderDrawThreshold;
  this->get_orderDrawThreshold((long*)&porderDrawThreshold);
  return porderDrawThreshold;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheSize"), DISPID(124));
  TAutoArgs<1> _args;
  _args[1] = pbitmapCacheSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheSize"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapCacheSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_BitmapCacheSize(void)
{
  long pbitmapCacheSize;
  this->get_BitmapCacheSize((long*)&pbitmapCacheSize);
  return pbitmapCacheSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCacheSize"), DISPID(125));
  TAutoArgs<1> _args;
  _args[1] = pbitmapVirtualCacheSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCacheSize"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapVirtualCacheSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_BitmapVirtualCacheSize(void)
{
  long pbitmapVirtualCacheSize;
  this->get_BitmapVirtualCacheSize((long*)&pbitmapVirtualCacheSize);
  return pbitmapVirtualCacheSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleBitmapCachesByBPP"), DISPID(175));
  TAutoArgs<1> _args;
  _args[1] = pbScale /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleBitmapCachesByBPP"), DISPID(175));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbScale /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_ScaleBitmapCachesByBPP(void)
{
  long pbScale;
  this->get_ScaleBitmapCachesByBPP((long*)&pbScale);
  return pbScale;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumBitmapCaches"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = pnumBitmapCaches /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumBitmapCaches"), DISPID(126));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnumBitmapCaches /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_NumBitmapCaches(void)
{
  long pnumBitmapCaches;
  this->get_NumBitmapCaches((long*)&pnumBitmapCaches);
  return pnumBitmapCaches;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CachePersistenceActive"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = pcachePersistenceActive /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CachePersistenceActive"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcachePersistenceActive /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_CachePersistenceActive(void)
{
  long pcachePersistenceActive;
  this->get_CachePersistenceActive((long*)&pcachePersistenceActive);
  return pcachePersistenceActive;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_PersistCacheDirectory(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PersistCacheDirectory"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_brushSupportLevel(long pbrushSupportLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("brushSupportLevel"), DISPID(156));
  TAutoArgs<1> _args;
  _args[1] = pbrushSupportLevel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("brushSupportLevel"), DISPID(156));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbrushSupportLevel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_brushSupportLevel(void)
{
  long pbrushSupportLevel;
  this->get_brushSupportLevel((long*)&pbrushSupportLevel);
  return pbrushSupportLevel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_minInputSendInterval(long pminInputSendInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("minInputSendInterval"), DISPID(157));
  TAutoArgs<1> _args;
  _args[1] = pminInputSendInterval /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("minInputSendInterval"), DISPID(157));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pminInputSendInterval /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_minInputSendInterval(void)
{
  long pminInputSendInterval;
  this->get_minInputSendInterval((long*)&pminInputSendInterval);
  return pminInputSendInterval;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputEventsAtOnce"), DISPID(158));
  TAutoArgs<1> _args;
  _args[1] = pinputEventsAtOnce /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputEventsAtOnce"), DISPID(158));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pinputEventsAtOnce /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_InputEventsAtOnce(void)
{
  long pinputEventsAtOnce;
  this->get_InputEventsAtOnce((long*)&pinputEventsAtOnce);
  return pinputEventsAtOnce;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_maxEventCount(long pmaxEventCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxEventCount"), DISPID(159));
  TAutoArgs<1> _args;
  _args[1] = pmaxEventCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_maxEventCount(long* pmaxEventCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxEventCount"), DISPID(159));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmaxEventCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_maxEventCount(void)
{
  long pmaxEventCount;
  this->get_maxEventCount((long*)&pmaxEventCount);
  return pmaxEventCount;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_keepAliveInterval(long pkeepAliveInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("keepAliveInterval"), DISPID(160));
  TAutoArgs<1> _args;
  _args[1] = pkeepAliveInterval /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("keepAliveInterval"), DISPID(160));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeepAliveInterval /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_keepAliveInterval(void)
{
  long pkeepAliveInterval;
  this->get_keepAliveInterval((long*)&pkeepAliveInterval);
  return pkeepAliveInterval;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_shutdownTimeout(long pshutdownTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("shutdownTimeout"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pshutdownTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("shutdownTimeout"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pshutdownTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_shutdownTimeout(void)
{
  long pshutdownTimeout;
  this->get_shutdownTimeout((long*)&pshutdownTimeout);
  return pshutdownTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("overallConnectionTimeout"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = poverallConnectionTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("overallConnectionTimeout"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(poverallConnectionTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_overallConnectionTimeout(void)
{
  long poverallConnectionTimeout;
  this->get_overallConnectionTimeout((long*)&poverallConnectionTimeout);
  return poverallConnectionTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("singleConnectionTimeout"), DISPID(165));
  TAutoArgs<1> _args;
  _args[1] = psingleConnectionTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("singleConnectionTimeout"), DISPID(165));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psingleConnectionTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_singleConnectionTimeout(void)
{
  long psingleConnectionTimeout;
  this->get_singleConnectionTimeout((long*)&psingleConnectionTimeout);
  return psingleConnectionTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_KeyboardType(long pkeyboardType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardType"), DISPID(166));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_KeyboardType(long* pkeyboardType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardType"), DISPID(166));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_KeyboardType(void)
{
  long pkeyboardType;
  this->get_KeyboardType((long*)&pkeyboardType);
  return pkeyboardType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_KeyboardSubType(long pkeyboardSubType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardSubType"), DISPID(167));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardSubType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardSubType"), DISPID(167));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardSubType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_KeyboardSubType(void)
{
  long pkeyboardSubType;
  this->get_KeyboardSubType((long*)&pkeyboardSubType);
  return pkeyboardSubType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardFunctionKey"), DISPID(168));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardFunctionKey /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardFunctionKey"), DISPID(168));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardFunctionKey /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_KeyboardFunctionKey(void)
{
  long pkeyboardFunctionKey;
  this->get_KeyboardFunctionKey((long*)&pkeyboardFunctionKey);
  return pkeyboardFunctionKey;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WinceFixedPalette"), DISPID(169));
  TAutoArgs<1> _args;
  _args[1] = pwinceFixedPalette /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WinceFixedPalette"), DISPID(169));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pwinceFixedPalette /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_WinceFixedPalette(void)
{
  long pwinceFixedPalette;
  this->get_WinceFixedPalette((long*)&pwinceFixedPalette);
  return pwinceFixedPalette;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToServerConsole"), DISPID(178));
  TAutoArgs<1> _args;
  _args[1] = pConnectToConsole /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToServerConsole"), DISPID(178));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectToConsole /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_ConnectToServerConsole(void)
{
  VARIANT_BOOL pConnectToConsole;
  this->get_ConnectToServerConsole((VARIANT_BOOL*)&pConnectToConsole);
  return pConnectToConsole;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_BitmapPersistence(long pbitmapPersistence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPersistence"), DISPID(182));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPersistence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPersistence"), DISPID(182));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPersistence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_BitmapPersistence(void)
{
  long pbitmapPersistence;
  this->get_BitmapPersistence((long*)&pbitmapPersistence);
  return pbitmapPersistence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinutesToIdleTimeout"), DISPID(183));
  TAutoArgs<1> _args;
  _args[1] = pminutesToIdleTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinutesToIdleTimeout"), DISPID(183));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pminutesToIdleTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_MinutesToIdleTimeout(void)
{
  long pminutesToIdleTimeout;
  this->get_MinutesToIdleTimeout((long*)&pminutesToIdleTimeout);
  return pminutesToIdleTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmartSizing"), DISPID(184));
  TAutoArgs<1> _args;
  _args[1] = pfSmartSizing /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmartSizing"), DISPID(184));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfSmartSizing /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_SmartSizing(void)
{
  VARIANT_BOOL pfSmartSizing;
  this->get_SmartSizing((VARIANT_BOOL*)&pfSmartSizing);
  return pfSmartSizing;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrLocalPrintingDocName"), DISPID(185));
  TAutoArgs<1> _args;
  _args[1] = pLocalPrintingDocName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrLocalPrintingDocName"), DISPID(185));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLocalPrintingDocName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RdpdrLocalPrintingDocName(void)
{
  BSTR pLocalPrintingDocName;
  this->get_RdpdrLocalPrintingDocName((BSTR*)&pLocalPrintingDocName);
  return pLocalPrintingDocName;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipCleanTempDirString"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = clipCleanTempDirString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipCleanTempDirString"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clipCleanTempDirString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RdpdrClipCleanTempDirString(void)
{
  BSTR clipCleanTempDirString;
  this->get_RdpdrClipCleanTempDirString((BSTR*)&clipCleanTempDirString);
  return clipCleanTempDirString;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipPasteInfoString"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = clipPasteInfoString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipPasteInfoString"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clipPasteInfoString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RdpdrClipPasteInfoString(void)
{
  BSTR clipPasteInfoString;
  this->get_RdpdrClipPasteInfoString((BSTR*)&clipPasteInfoString);
  return clipPasteInfoString;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_ClearTextPassword(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClearTextPassword"), DISPID(186));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayConnectionBar"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = pDisplayConnectionBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayConnectionBar"), DISPID(187));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisplayConnectionBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_DisplayConnectionBar(void)
{
  VARIANT_BOOL pDisplayConnectionBar;
  this->get_DisplayConnectionBar((VARIANT_BOOL*)&pDisplayConnectionBar);
  return pDisplayConnectionBar;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PinConnectionBar"), DISPID(188));
  TAutoArgs<1> _args;
  _args[1] = pPinConnectionBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PinConnectionBar"), DISPID(188));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pPinConnectionBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_PinConnectionBar(void)
{
  VARIANT_BOOL pPinConnectionBar;
  this->get_PinConnectionBar((VARIANT_BOOL*)&pPinConnectionBar);
  return pPinConnectionBar;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrabFocusOnConnect"), DISPID(189));
  TAutoArgs<1> _args;
  _args[1] = pfGrabFocusOnConnect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrabFocusOnConnect"), DISPID(189));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfGrabFocusOnConnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_GrabFocusOnConnect(void)
{
  VARIANT_BOOL pfGrabFocusOnConnect;
  this->get_GrabFocusOnConnect((VARIANT_BOOL*)&pfGrabFocusOnConnect);
  return pfGrabFocusOnConnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadBalanceInfo"), DISPID(190));
  TAutoArgs<1> _args;
  _args[1] = pLBInfo /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadBalanceInfo"), DISPID(190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLBInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_LoadBalanceInfo(void)
{
  BSTR pLBInfo;
  this->get_LoadBalanceInfo((BSTR*)&pLBInfo);
  return pLBInfo;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDrives"), DISPID(191));
  TAutoArgs<1> _args;
  _args[1] = pRedirectDrives /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDrives"), DISPID(191));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectDrives /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RedirectDrives(void)
{
  VARIANT_BOOL pRedirectDrives;
  this->get_RedirectDrives((VARIANT_BOOL*)&pRedirectDrives);
  return pRedirectDrives;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPrinters"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = pRedirectPrinters /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPrinters"), DISPID(192));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectPrinters /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RedirectPrinters(void)
{
  VARIANT_BOOL pRedirectPrinters;
  this->get_RedirectPrinters((VARIANT_BOOL*)&pRedirectPrinters);
  return pRedirectPrinters;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPorts"), DISPID(193));
  TAutoArgs<1> _args;
  _args[1] = pRedirectPorts /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPorts"), DISPID(193));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectPorts /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RedirectPorts(void)
{
  VARIANT_BOOL pRedirectPorts;
  this->get_RedirectPorts((VARIANT_BOOL*)&pRedirectPorts);
  return pRedirectPorts;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectSmartCards"), DISPID(194));
  TAutoArgs<1> _args;
  _args[1] = pRedirectSmartCards /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectSmartCards"), DISPID(194));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectSmartCards /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_RedirectSmartCards(void)
{
  VARIANT_BOOL pRedirectSmartCards;
  this->get_RedirectSmartCards((VARIANT_BOOL*)&pRedirectSmartCards);
  return pRedirectSmartCards;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache16BppSize"), DISPID(195));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache16BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache16BppSize"), DISPID(195));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache16BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_BitmapVirtualCache16BppSize(void)
{
  long pBitmapVirtualCache16BppSize;
  this->get_BitmapVirtualCache16BppSize((long*)&pBitmapVirtualCache16BppSize);
  return pBitmapVirtualCache16BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache24BppSize"), DISPID(196));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache24BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache24BppSize"), DISPID(196));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache24BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_BitmapVirtualCache24BppSize(void)
{
  long pBitmapVirtualCache24BppSize;
  this->get_BitmapVirtualCache24BppSize((long*)&pBitmapVirtualCache24BppSize);
  return pBitmapVirtualCache24BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_PerformanceFlags(long pDisableList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PerformanceFlags"), DISPID(200));
  TAutoArgs<1> _args;
  _args[1] = pDisableList /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_PerformanceFlags(long* pDisableList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PerformanceFlags"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableList /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_PerformanceFlags(void)
{
  long pDisableList;
  this->get_PerformanceFlags((long*)&pDisableList);
  return pDisableList;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectWithEndpoint"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyTSPublicKey"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = pfNotify /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyTSPublicKey"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfNotify /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_NotifyTSPublicKey(void)
{
  VARIANT_BOOL pfNotify;
  this->get_NotifyTSPublicKey((VARIANT_BOOL*)&pfNotify);
  return pfNotify;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_Compress(long pcompress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<1> _args;
  _args[1] = pcompress /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_Compress(long* pcompress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcompress /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_Compress(void)
{
  long pcompress;
  this->get_Compress((long*)&pcompress);
  return pcompress;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_BitmapPeristence(long pbitmapPeristence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPeristence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPeristence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_BitmapPeristence(void)
{
  long pbitmapPeristence;
  this->get_BitmapPeristence((long*)&pbitmapPeristence);
  return pbitmapPeristence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<1> _args;
  _args[1] = pallowBackgroundInput /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pallowBackgroundInput /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_allowBackgroundInput(void)
{
  long pallowBackgroundInput;
  this->get_allowBackgroundInput((long*)&pallowBackgroundInput);
  return pallowBackgroundInput;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_KeyBoardLayoutStr(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyBoardLayoutStr"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_PluginDlls(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PluginDlls"), DISPID(170));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_IconFile(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconFile"), DISPID(171));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_IconIndex(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconIndex"), DISPID(172));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<1> _args;
  _args[1] = pContainerHandledFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pContainerHandledFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_ContainerHandledFullScreen(void)
{
  long pContainerHandledFullScreen;
  this->get_ContainerHandledFullScreen((long*)&pContainerHandledFullScreen);
  return pContainerHandledFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::set_DisableRdpdr(long pDisableRdpdr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<1> _args;
  _args[1] = pDisableRdpdr /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableRdpdr /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings5DispT<T>::get_DisableRdpdr(void)
{
  long pDisableRdpdr;
  this->get_DisableRdpdr((long*)&pDisableRdpdr);
  return pDisableRdpdr;
}

// *********************************************************************//
// DispIntf:  ITSRemoteProgram
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FDD029F9-467A-4C49-8529-64B521DBD1B4}
// *********************************************************************//
template <class T> HRESULT __fastcall
ITSRemoteProgramDispT<T>::set_RemoteProgramMode(VARIANT_BOOL pvboolRemoteProgramMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgramMode"), DISPID(200));
  TAutoArgs<1> _args;
  _args[1] = pvboolRemoteProgramMode /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITSRemoteProgramDispT<T>::get_RemoteProgramMode(VARIANT_BOOL* pvboolRemoteProgramMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgramMode"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvboolRemoteProgramMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITSRemoteProgramDispT<T>::get_RemoteProgramMode(void)
{
  VARIANT_BOOL pvboolRemoteProgramMode;
  this->get_RemoteProgramMode((VARIANT_BOOL*)&pvboolRemoteProgramMode);
  return pvboolRemoteProgramMode;
}

template <class T> HRESULT __fastcall
ITSRemoteProgramDispT<T>::ServerStartProgram(BSTR bstrExecutablePath/*[in]*/, 
                                             BSTR bstrFilePath/*[in]*/, 
                                             BSTR bstrWorkingDirectory/*[in]*/, 
                                             VARIANT_BOOL vbExpandEnvVarInWorkingDirectoryOnServer/*[in]*/
                                             , BSTR bstrArguments/*[in]*/, 
                                             VARIANT_BOOL vbExpandEnvVarInArgumentsOnServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ServerStartProgram"), DISPID(201));
  TAutoArgs<6> _args;
  _args[1] = bstrExecutablePath /*[VT_BSTR:0]*/;
  _args[2] = bstrFilePath /*[VT_BSTR:0]*/;
  _args[3] = bstrWorkingDirectory /*[VT_BSTR:0]*/;
  _args[4] = vbExpandEnvVarInWorkingDirectoryOnServer /*[VT_BOOL:0]*/;
  _args[5] = bstrArguments /*[VT_BSTR:0]*/;
  _args[6] = vbExpandEnvVarInArgumentsOnServer /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMsRdpClientShell
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D012AE6D-C19A-4BFE-B367-201F8911F134}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClientShellDispT<T>::Launch()
{
  _TDispID _dispid(*this, OLETEXT("Launch"), DISPID(201));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClientShellDispT<T>::set_RdpFileContents(BSTR pszRdpFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpFileContents"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = pszRdpFile /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientShellDispT<T>::get_RdpFileContents(BSTR* pszRdpFile/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpFileContents"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszRdpFile /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientShellDispT<T>::get_RdpFileContents(void)
{
  BSTR pszRdpFile;
  this->get_RdpFileContents((BSTR*)&pszRdpFile);
  return pszRdpFile;
}

template <class T> HRESULT __fastcall
IMsRdpClientShellDispT<T>::SetRdpProperty(BSTR szProperty/*[in]*/, VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetRdpProperty"), DISPID(203));
  TAutoArgs<2> _args;
  _args[1] = szProperty /*[VT_BSTR:0]*/;
  _args[2] = Value /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientShellDispT<T>::GetRdpProperty(BSTR szProperty/*[in]*/, VARIANT* pValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRdpProperty"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = szProperty /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pValue /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMsRdpClientShellDispT<T>::GetRdpProperty(BSTR szProperty/*[in]*/)
{
  VARIANT pValue;
  this->GetRdpProperty(szProperty, (VARIANT*)&pValue);
  return pValue;
}

template <class T> HRESULT __fastcall
IMsRdpClientShellDispT<T>::get_IsRemoteProgramClientInstalled(VARIANT_BOOL* pbClientInstalled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsRemoteProgramClientInstalled"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbClientInstalled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientShellDispT<T>::get_IsRemoteProgramClientInstalled(void)
{
  VARIANT_BOOL pbClientInstalled;
  this->get_IsRemoteProgramClientInstalled((VARIANT_BOOL*)&pbClientInstalled);
  return pbClientInstalled;
}

template <class T> HRESULT __fastcall
IMsRdpClientShellDispT<T>::set_PublicMode(VARIANT_BOOL pfPublicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PublicMode"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = pfPublicMode /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientShellDispT<T>::get_PublicMode(VARIANT_BOOL* pfPublicMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PublicMode"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfPublicMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientShellDispT<T>::get_PublicMode(void)
{
  VARIANT_BOOL pfPublicMode;
  this->get_PublicMode((VARIANT_BOOL*)&pfPublicMode);
  return pfPublicMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientShellDispT<T>::ShowTrustedSitesManagementDialog()
{
  _TDispID _dispid(*this, OLETEXT("ShowTrustedSitesManagementDialog"), DISPID(212));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient6
// Interface: IMsRdpClient6
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMsRdpClient6T<T>::get_AdvancedSettings7(Mstsclib_tlb::IMsRdpClientAdvancedSettings6** ppAdvSettings/*[out,retval]*/)
{
  return (*this)->get_AdvancedSettings7(ppAdvSettings);
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr __fastcall
TCOMIMsRdpClient6T<T>::get_AdvancedSettings7(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr ppAdvSettings;
  OLECHECK(this->get_AdvancedSettings7((Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr*)&ppAdvSettings));
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient6T<T>::get_TransportSettings2(Mstsclib_tlb::IMsRdpClientTransportSettings2** ppXportSet2/*[out,retval]*/)
{
  return (*this)->get_TransportSettings2(ppXportSet2);
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr __fastcall
TCOMIMsRdpClient6T<T>::get_TransportSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr ppXportSet2;
  OLECHECK(this->get_TransportSettings2((Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr*)&ppXportSet2));
  return ppXportSet2;
}

// *********************************************************************//
// DispIntf:  IMsRdpClient6
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D43B7D80-8517-4B6D-9EAC-96AD6800D7F2}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_AdvancedSettings7(Mstsclib_tlb::IMsRdpClientAdvancedSettings6** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings7"), DISPID(507));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings6**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr __fastcall
IMsRdpClient6DispT<T>::get_AdvancedSettings7(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr ppAdvSettings;
  this->get_AdvancedSettings7(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_TransportSettings2(Mstsclib_tlb::IMsRdpClientTransportSettings2** ppXportSet2/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings2"), DISPID(506));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings2**)ppXportSet2 /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr __fastcall
IMsRdpClient6DispT<T>::get_TransportSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr ppXportSet2;
  this->get_TransportSettings2(&ppXportSet2);
  return ppXportSet2;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_TransportSettings(Mstsclib_tlb::IMsRdpClientTransportSettings** ppXportSet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings"), DISPID(500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings**)ppXportSet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettingsPtr __fastcall
IMsRdpClient6DispT<T>::get_TransportSettings(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettingsPtr ppXportSet;
  this->get_TransportSettings(&ppXportSet);
  return ppXportSet;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_AdvancedSettings6(Mstsclib_tlb::IMsRdpClientAdvancedSettings5** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings6"), DISPID(502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings5**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr __fastcall
IMsRdpClient6DispT<T>::get_AdvancedSettings6(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr ppAdvSettings;
  this->get_AdvancedSettings6(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                           unsigned ExtendedDisconnectReason/*[in]*/, 
                                           BSTR* pBstrErrorMsg/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetErrorDescription"), DISPID(503));
  TAutoArgs<2> _args;
  _args[1] = disconnectReason /*[VT_UINT:0]*/;
  _args[2] = ExtendedDisconnectReason /*[VT_UINT:0]*/;
  return OutRetValSetterPtr(pBstrErrorMsg /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient6DispT<T>::GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                           unsigned ExtendedDisconnectReason/*[in]*/)
{
  BSTR pBstrErrorMsg;
  this->GetErrorDescription(disconnectReason, ExtendedDisconnectReason, (BSTR*)&pBstrErrorMsg);
  return pBstrErrorMsg;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_RemoteProgram(Mstsclib_tlb::ITSRemoteProgram** ppRemoteProgram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgram"), DISPID(504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::ITSRemoteProgram**)ppRemoteProgram /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ITSRemoteProgramPtr __fastcall
IMsRdpClient6DispT<T>::get_RemoteProgram(void)
{
  Mstsclib_tlb::ITSRemoteProgramPtr ppRemoteProgram;
  this->get_RemoteProgram(&ppRemoteProgram);
  return ppRemoteProgram;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_MsRdpClientShell(Mstsclib_tlb::IMsRdpClientShell** ppLauncher/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MsRdpClientShell"), DISPID(505));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientShell**)ppLauncher /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientShellPtr __fastcall
IMsRdpClient6DispT<T>::get_MsRdpClientShell(void)
{
  Mstsclib_tlb::IMsRdpClientShellPtr ppLauncher;
  this->get_MsRdpClientShell(&ppLauncher);
  return ppLauncher;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings5"), DISPID(400));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings4**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall
IMsRdpClient6DispT<T>::get_AdvancedSettings5(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr ppAdvSettings;
  this->get_AdvancedSettings5(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings4"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings3**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall
IMsRdpClient6DispT<T>::get_AdvancedSettings4(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr ppAdvSettings;
  this->get_AdvancedSettings4(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings3"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings2**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall
IMsRdpClient6DispT<T>::get_AdvancedSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr ppAdvSettings;
  this->get_AdvancedSettings3(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = pConnectedStatusText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectedStatusText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient6DispT<T>::get_ConnectedStatusText(void)
{
  BSTR pConnectedStatusText;
  this->get_ConnectedStatusText((BSTR*)&pConnectedStatusText);
  return pConnectedStatusText;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::set_ColorDepth(long pcolorDepth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = pcolorDepth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_ColorDepth(long* pcolorDepth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcolorDepth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient6DispT<T>::get_ColorDepth(void)
{
  long pcolorDepth;
  this->get_ColorDepth((long*)&pcolorDepth);
  return pcolorDepth;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings2"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall
IMsRdpClient6DispT<T>::get_AdvancedSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings2(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings2"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall
IMsRdpClient6DispT<T>::get_SecuredSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings2(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedDisconnectReason"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pExtendedDisconnectReason /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall
IMsRdpClient6DispT<T>::get_ExtendedDisconnectReason(void)
{
  Mstsclib_tlb::ExtendedDisconnectReasonCode pExtendedDisconnectReason;
  this->get_ExtendedDisconnectReason((Mstsclib_tlb::ExtendedDisconnectReasonCode*)&pExtendedDisconnectReason);
  return pExtendedDisconnectReason;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pfFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClient6DispT<T>::get_FullScreen(void)
{
  VARIANT_BOOL pfFullScreen;
  this->get_FullScreen((VARIANT_BOOL*)&pfFullScreen);
  return pfFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::SetVirtualChannelOptions(BSTR chanName/*[in]*/, long chanOptions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVirtualChannelOptions"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = chanOptions /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                long* pChanOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVirtualChannelOptions"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pChanOptions /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient6DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/)
{
  long pChanOptions;
  this->GetVirtualChannelOptions(chanName, (long*)&pChanOptions);
  return pChanOptions;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestClose"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pCloseStatus /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mstsclib_tlb::ControlCloseStatus __fastcall
IMsRdpClient6DispT<T>::RequestClose(void)
{
  Mstsclib_tlb::ControlCloseStatus pCloseStatus;
  this->RequestClose((Mstsclib_tlb::ControlCloseStatus*)&pCloseStatus);
  return pCloseStatus;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::set_Server(BSTR pServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pServer /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_Server(BSTR* pServer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pServer /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient6DispT<T>::get_Server(void)
{
  BSTR pServer;
  this->get_Server((BSTR*)&pServer);
  return pServer;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::set_Domain(BSTR pDomain/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pDomain /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_Domain(BSTR* pDomain/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDomain /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient6DispT<T>::get_Domain(void)
{
  BSTR pDomain;
  this->get_Domain((BSTR*)&pDomain);
  return pDomain;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::set_UserName(BSTR pUserName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pUserName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_UserName(BSTR* pUserName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pUserName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient6DispT<T>::get_UserName(void)
{
  BSTR pUserName;
  this->get_UserName((BSTR*)&pUserName);
  return pUserName;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::set_DisconnectedText(BSTR pDisconnectedText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pDisconnectedText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisconnectedText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient6DispT<T>::get_DisconnectedText(void)
{
  BSTR pDisconnectedText;
  this->get_DisconnectedText((BSTR*)&pDisconnectedText);
  return pDisconnectedText;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::set_ConnectingText(BSTR pConnectingText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pConnectingText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectingText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient6DispT<T>::get_ConnectingText(void)
{
  BSTR pConnectingText;
  this->get_ConnectingText((BSTR*)&pConnectingText);
  return pConnectingText;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_Connected(short* pIsConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connected"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIsConnected /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMsRdpClient6DispT<T>::get_Connected(void)
{
  short pIsConnected;
  this->get_Connected((short*)&pIsConnected);
  return pIsConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::set_DesktopWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_DesktopWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient6DispT<T>::get_DesktopWidth(void)
{
  long pVal;
  this->get_DesktopWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::set_DesktopHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_DesktopHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient6DispT<T>::get_DesktopHeight(void)
{
  long pVal;
  this->get_DesktopHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::set_StartConnected(long pfStartConnected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pfStartConnected /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_StartConnected(long* pfStartConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfStartConnected /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient6DispT<T>::get_StartConnected(void)
{
  long pfStartConnected;
  this->get_StartConnected((long*)&pfStartConnected);
  return pfStartConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalScrollBarVisible"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient6DispT<T>::get_HorizontalScrollBarVisible(void)
{
  long pfHScrollVisible;
  this->get_HorizontalScrollBarVisible((long*)&pfHScrollVisible);
  return pfHScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarVisible"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient6DispT<T>::get_VerticalScrollBarVisible(void)
{
  long pfVScrollVisible;
  this->get_VerticalScrollBarVisible((long*)&pfVScrollVisible);
  return pfVScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::set_FullScreenTitle(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreenTitle"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_CipherStrength(long* pCipherStrength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CipherStrength"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCipherStrength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient6DispT<T>::get_CipherStrength(void)
{
  long pCipherStrength;
  this->get_CipherStrength((long*)&pCipherStrength);
  return pCipherStrength;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_Version(BSTR* pVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient6DispT<T>::get_Version(void)
{
  BSTR pVersion;
  this->get_Version((BSTR*)&pVersion);
  return pVersion;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettingsEnabled"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSecuredSettingsEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient6DispT<T>::get_SecuredSettingsEnabled(void)
{
  long pSecuredSettingsEnabled;
  this->get_SecuredSettingsEnabled((long*)&pSecuredSettingsEnabled);
  return pSecuredSettingsEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall
IMsRdpClient6DispT<T>::get_SecuredSettings(void)
{
  Mstsclib_tlb::IMsTscSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings"), DISPID(98));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall
IMsRdpClient6DispT<T>::get_AdvancedSettings(void)
{
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Debugger"), DISPID(99));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscDebug**)ppDebugger /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscDebugPtr __fastcall
IMsRdpClient6DispT<T>::get_Debugger(void)
{
  Mstsclib_tlb::IMsTscDebugPtr ppDebugger;
  this->get_Debugger(&ppDebugger);
  return ppDebugger;
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::Connect()
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(30));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(31));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::CreateVirtualChannels(BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateVirtualChannels"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient6DispT<T>::SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendOnVirtualChannel"), DISPID(34));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = ChanData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMsRdpClientAdvancedSettings6
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {222C4B5D-45D9-4DF0-A7C6-60CF9089D285}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_RelativeMouseMode(VARIANT_BOOL pfRelativeMouseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelativeMouseMode"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pfRelativeMouseMode /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RelativeMouseMode(VARIANT_BOOL* pfRelativeMouseMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelativeMouseMode"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRelativeMouseMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RelativeMouseMode(void)
{
  VARIANT_BOOL pfRelativeMouseMode;
  this->get_RelativeMouseMode((VARIANT_BOOL*)&pfRelativeMouseMode);
  return pfRelativeMouseMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_AuthenticationServiceClass(BSTR* pbstrAuthServiceClass/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationServiceClass"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrAuthServiceClass /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_AuthenticationServiceClass(void)
{
  BSTR pbstrAuthServiceClass;
  this->get_AuthenticationServiceClass((BSTR*)&pbstrAuthServiceClass);
  return pbstrAuthServiceClass;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_AuthenticationServiceClass(BSTR pbstrAuthServiceClass/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationServiceClass"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pbstrAuthServiceClass /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_PCB(BSTR* bstrPCB/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PCB"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrPCB /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_PCB(void)
{
  BSTR bstrPCB;
  this->get_PCB((BSTR*)&bstrPCB);
  return bstrPCB;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_PCB(BSTR bstrPCB/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PCB"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = bstrPCB /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_HotKeyFocusReleaseLeft(long HotKeyFocusReleaseLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFocusReleaseLeft"), DISPID(224));
  TAutoArgs<1> _args;
  _args[1] = HotKeyFocusReleaseLeft /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyFocusReleaseLeft(long* HotKeyFocusReleaseLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFocusReleaseLeft"), DISPID(224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HotKeyFocusReleaseLeft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyFocusReleaseLeft(void)
{
  long HotKeyFocusReleaseLeft;
  this->get_HotKeyFocusReleaseLeft((long*)&HotKeyFocusReleaseLeft);
  return HotKeyFocusReleaseLeft;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_HotKeyFocusReleaseRight(long HotKeyFocusReleaseRight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFocusReleaseRight"), DISPID(225));
  TAutoArgs<1> _args;
  _args[1] = HotKeyFocusReleaseRight /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyFocusReleaseRight(long* HotKeyFocusReleaseRight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFocusReleaseRight"), DISPID(225));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HotKeyFocusReleaseRight /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyFocusReleaseRight(void)
{
  long HotKeyFocusReleaseRight;
  this->get_HotKeyFocusReleaseRight((long*)&HotKeyFocusReleaseRight);
  return HotKeyFocusReleaseRight;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_EnableCredSspSupport(VARIANT_BOOL pfEnableSupport/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableCredSspSupport"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pfEnableSupport /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_EnableCredSspSupport(VARIANT_BOOL* pfEnableSupport/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableCredSspSupport"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnableSupport /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_EnableCredSspSupport(void)
{
  VARIANT_BOOL pfEnableSupport;
  this->get_EnableCredSspSupport((VARIANT_BOOL*)&pfEnableSupport);
  return pfEnableSupport;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_AuthenticationType(unsigned* puiAuthType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationType"), DISPID(226));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(puiAuthType /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_AuthenticationType(void)
{
  unsigned puiAuthType;
  this->get_AuthenticationType((unsigned*)&puiAuthType);
  return puiAuthType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_ConnectToAdministerServer(VARIANT_BOOL pConnectToAdministerServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToAdministerServer"), DISPID(227));
  TAutoArgs<1> _args;
  _args[1] = pConnectToAdministerServer /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_ConnectToAdministerServer(VARIANT_BOOL* pConnectToAdministerServer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToAdministerServer"), DISPID(227));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectToAdministerServer /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_ConnectToAdministerServer(void)
{
  VARIANT_BOOL pConnectToAdministerServer;
  this->get_ConnectToAdministerServer((VARIANT_BOOL*)&pConnectToAdministerServer);
  return pConnectToAdministerServer;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_RedirectClipboard(VARIANT_BOOL pfRedirectClipboard/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectClipboard"), DISPID(213));
  TAutoArgs<1> _args;
  _args[1] = pfRedirectClipboard /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RedirectClipboard(VARIANT_BOOL* pfRedirectClipboard/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectClipboard"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRedirectClipboard /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RedirectClipboard(void)
{
  VARIANT_BOOL pfRedirectClipboard;
  this->get_RedirectClipboard((VARIANT_BOOL*)&pfRedirectClipboard);
  return pfRedirectClipboard;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_AudioRedirectionMode(unsigned puiAudioRedirectionMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioRedirectionMode"), DISPID(215));
  TAutoArgs<1> _args;
  _args[1] = puiAudioRedirectionMode /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_AudioRedirectionMode(unsigned* puiAudioRedirectionMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioRedirectionMode"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(puiAudioRedirectionMode /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_AudioRedirectionMode(void)
{
  unsigned puiAudioRedirectionMode;
  this->get_AudioRedirectionMode((unsigned*)&puiAudioRedirectionMode);
  return puiAudioRedirectionMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_ConnectionBarShowPinButton(VARIANT_BOOL pfShowPin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowPinButton"), DISPID(216));
  TAutoArgs<1> _args;
  _args[1] = pfShowPin /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_ConnectionBarShowPinButton(VARIANT_BOOL* pfShowPin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowPinButton"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowPin /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_ConnectionBarShowPinButton(void)
{
  VARIANT_BOOL pfShowPin;
  this->get_ConnectionBarShowPinButton((VARIANT_BOOL*)&pfShowPin);
  return pfShowPin;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_PublicMode(VARIANT_BOOL pfPublicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PublicMode"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = pfPublicMode /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_PublicMode(VARIANT_BOOL* pfPublicMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PublicMode"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfPublicMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_PublicMode(void)
{
  VARIANT_BOOL pfPublicMode;
  this->get_PublicMode((VARIANT_BOOL*)&pfPublicMode);
  return pfPublicMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_RedirectDevices(VARIANT_BOOL pfRedirectPnPDevices/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDevices"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pfRedirectPnPDevices /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RedirectDevices(VARIANT_BOOL* pfRedirectPnPDevices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDevices"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRedirectPnPDevices /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RedirectDevices(void)
{
  VARIANT_BOOL pfRedirectPnPDevices;
  this->get_RedirectDevices((VARIANT_BOOL*)&pfRedirectPnPDevices);
  return pfRedirectPnPDevices;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_RedirectPOSDevices(VARIANT_BOOL pfRedirectPOSDevices/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPOSDevices"), DISPID(219));
  TAutoArgs<1> _args;
  _args[1] = pfRedirectPOSDevices /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RedirectPOSDevices(VARIANT_BOOL* pfRedirectPOSDevices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPOSDevices"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRedirectPOSDevices /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RedirectPOSDevices(void)
{
  VARIANT_BOOL pfRedirectPOSDevices;
  this->get_RedirectPOSDevices((VARIANT_BOOL*)&pfRedirectPOSDevices);
  return pfRedirectPOSDevices;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_BitmapVirtualCache32BppSize(long pBitmapVirtualCache32BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache32BppSize"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache32BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_BitmapVirtualCache32BppSize(long* pBitmapVirtualCache32BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache32BppSize"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache32BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_BitmapVirtualCache32BppSize(void)
{
  long pBitmapVirtualCache32BppSize;
  this->get_BitmapVirtualCache32BppSize((long*)&pBitmapVirtualCache32BppSize);
  return pBitmapVirtualCache32BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_AuthenticationLevel(unsigned puiAuthLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationLevel"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = puiAuthLevel /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_AuthenticationLevel(unsigned* puiAuthLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationLevel"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(puiAuthLevel /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_AuthenticationLevel(void)
{
  unsigned puiAuthLevel;
  this->get_AuthenticationLevel((unsigned*)&puiAuthLevel);
  return puiAuthLevel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_ConnectionBarShowMinimizeButton(VARIANT_BOOL pfShowMinimize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowMinimizeButton"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = pfShowMinimize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_ConnectionBarShowMinimizeButton(VARIANT_BOOL* pfShowMinimize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowMinimizeButton"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowMinimize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_ConnectionBarShowMinimizeButton(void)
{
  VARIANT_BOOL pfShowMinimize;
  this->get_ConnectionBarShowMinimizeButton((VARIANT_BOOL*)&pfShowMinimize);
  return pfShowMinimize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_ConnectionBarShowRestoreButton(VARIANT_BOOL pfShowRestore/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowRestoreButton"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = pfShowRestore /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_ConnectionBarShowRestoreButton(VARIANT_BOOL* pfShowRestore/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowRestoreButton"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowRestore /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_ConnectionBarShowRestoreButton(void)
{
  VARIANT_BOOL pfShowRestore;
  this->get_ConnectionBarShowRestoreButton((VARIANT_BOOL*)&pfShowRestore);
  return pfShowRestore;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_CanAutoReconnect(VARIANT_BOOL* pfCanAutoReconnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanAutoReconnect"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfCanAutoReconnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_CanAutoReconnect(void)
{
  VARIANT_BOOL pfCanAutoReconnect;
  this->get_CanAutoReconnect((VARIANT_BOOL*)&pfCanAutoReconnect);
  return pfCanAutoReconnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_EnableAutoReconnect(VARIANT_BOOL pfEnableAutoReconnect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableAutoReconnect"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = pfEnableAutoReconnect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_EnableAutoReconnect(VARIANT_BOOL* pfEnableAutoReconnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableAutoReconnect"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnableAutoReconnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_EnableAutoReconnect(void)
{
  VARIANT_BOOL pfEnableAutoReconnect;
  this->get_EnableAutoReconnect((VARIANT_BOOL*)&pfEnableAutoReconnect);
  return pfEnableAutoReconnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_MaxReconnectAttempts(long pMaxReconnectAttempts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxReconnectAttempts"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = pMaxReconnectAttempts /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_MaxReconnectAttempts(long* pMaxReconnectAttempts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxReconnectAttempts"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMaxReconnectAttempts /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_MaxReconnectAttempts(void)
{
  long pMaxReconnectAttempts;
  this->get_MaxReconnectAttempts((long*)&pMaxReconnectAttempts);
  return pMaxReconnectAttempts;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_SmoothScroll(long psmoothScroll/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothScroll"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = psmoothScroll /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_SmoothScroll(long* psmoothScroll/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothScroll"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psmoothScroll /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_SmoothScroll(void)
{
  long psmoothScroll;
  this->get_SmoothScroll((long*)&psmoothScroll);
  return psmoothScroll;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorPassthrough"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pacceleratorPassthrough /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorPassthrough"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pacceleratorPassthrough /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_AcceleratorPassthrough(void)
{
  long pacceleratorPassthrough;
  this->get_AcceleratorPassthrough((long*)&pacceleratorPassthrough);
  return pacceleratorPassthrough;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_ShadowBitmap(long pshadowBitmap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShadowBitmap"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pshadowBitmap /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShadowBitmap"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pshadowBitmap /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_ShadowBitmap(void)
{
  long pshadowBitmap;
  this->get_ShadowBitmap((long*)&pshadowBitmap);
  return pshadowBitmap;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_TransportType(long ptransportType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportType"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = ptransportType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_TransportType(long* ptransportType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportType"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptransportType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_TransportType(void)
{
  long ptransportType;
  this->get_TransportType((long*)&ptransportType);
  return ptransportType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_SasSequence(long psasSequence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SasSequence"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = psasSequence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_SasSequence(long* psasSequence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SasSequence"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psasSequence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_SasSequence(void)
{
  long psasSequence;
  this->get_SasSequence((long*)&psasSequence);
  return psasSequence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_EncryptionEnabled(long pencryptionEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncryptionEnabled"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pencryptionEnabled /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncryptionEnabled"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pencryptionEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_EncryptionEnabled(void)
{
  long pencryptionEnabled;
  this->get_EncryptionEnabled((long*)&pencryptionEnabled);
  return pencryptionEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DedicatedTerminal"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = pdedicatedTerminal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DedicatedTerminal"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdedicatedTerminal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_DedicatedTerminal(void)
{
  long pdedicatedTerminal;
  this->get_DedicatedTerminal((long*)&pdedicatedTerminal);
  return pdedicatedTerminal;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_RDPPort(long prdpPort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RDPPort"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = prdpPort /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RDPPort(long* prdpPort/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RDPPort"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prdpPort /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RDPPort(void)
{
  long prdpPort;
  this->get_RDPPort((long*)&prdpPort);
  return prdpPort;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_EnableMouse(long penableMouse/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableMouse"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = penableMouse /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_EnableMouse(long* penableMouse/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableMouse"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(penableMouse /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_EnableMouse(void)
{
  long penableMouse;
  this->get_EnableMouse((long*)&penableMouse);
  return penableMouse;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableCtrlAltDel"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = pdisableCtrlAltDel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableCtrlAltDel"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdisableCtrlAltDel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_DisableCtrlAltDel(void)
{
  long pdisableCtrlAltDel;
  this->get_DisableCtrlAltDel((long*)&pdisableCtrlAltDel);
  return pdisableCtrlAltDel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_EnableWindowsKey(long penableWindowsKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableWindowsKey"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = penableWindowsKey /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableWindowsKey"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(penableWindowsKey /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_EnableWindowsKey(void)
{
  long penableWindowsKey;
  this->get_EnableWindowsKey((long*)&penableWindowsKey);
  return penableWindowsKey;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleClickDetect"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pdoubleClickDetect /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleClickDetect"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdoubleClickDetect /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_DoubleClickDetect(void)
{
  long pdoubleClickDetect;
  this->get_DoubleClickDetect((long*)&pdoubleClickDetect);
  return pdoubleClickDetect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_MaximizeShell(long pmaximizeShell/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximizeShell"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pmaximizeShell /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximizeShell"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmaximizeShell /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_MaximizeShell(void)
{
  long pmaximizeShell;
  this->get_MaximizeShell((long*)&pmaximizeShell);
  return pmaximizeShell;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFullScreen"), DISPID(114));
  TAutoArgs<1> _args;
  _args[1] = photKeyFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFullScreen"), DISPID(114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyFullScreen(void)
{
  long photKeyFullScreen;
  this->get_HotKeyFullScreen((long*)&photKeyFullScreen);
  return photKeyFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlEsc"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = photKeyCtrlEsc /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlEsc"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyCtrlEsc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyCtrlEsc(void)
{
  long photKeyCtrlEsc;
  this->get_HotKeyCtrlEsc((long*)&photKeyCtrlEsc);
  return photKeyCtrlEsc;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltEsc"), DISPID(116));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltEsc /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltEsc"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltEsc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyAltEsc(void)
{
  long photKeyAltEsc;
  this->get_HotKeyAltEsc((long*)&photKeyAltEsc);
  return photKeyAltEsc;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_HotKeyAltTab(long photKeyAltTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltTab"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltTab /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltTab"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltTab /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyAltTab(void)
{
  long photKeyAltTab;
  this->get_HotKeyAltTab((long*)&photKeyAltTab);
  return photKeyAltTab;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltShiftTab"), DISPID(118));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltShiftTab /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltShiftTab"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltShiftTab /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyAltShiftTab(void)
{
  long photKeyAltShiftTab;
  this->get_HotKeyAltShiftTab((long*)&photKeyAltShiftTab);
  return photKeyAltShiftTab;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltSpace"), DISPID(119));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltSpace /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltSpace"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltSpace /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyAltSpace(void)
{
  long photKeyAltSpace;
  this->get_HotKeyAltSpace((long*)&photKeyAltSpace);
  return photKeyAltSpace;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlAltDel"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = photKeyCtrlAltDel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlAltDel"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyCtrlAltDel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_HotKeyCtrlAltDel(void)
{
  long photKeyCtrlAltDel;
  this->get_HotKeyCtrlAltDel((long*)&photKeyCtrlAltDel);
  return photKeyCtrlAltDel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_orderDrawThreshold(long porderDrawThreshold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderDrawThreshold"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = porderDrawThreshold /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderDrawThreshold"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(porderDrawThreshold /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_orderDrawThreshold(void)
{
  long porderDrawThreshold;
  this->get_orderDrawThreshold((long*)&porderDrawThreshold);
  return porderDrawThreshold;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheSize"), DISPID(124));
  TAutoArgs<1> _args;
  _args[1] = pbitmapCacheSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheSize"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapCacheSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_BitmapCacheSize(void)
{
  long pbitmapCacheSize;
  this->get_BitmapCacheSize((long*)&pbitmapCacheSize);
  return pbitmapCacheSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCacheSize"), DISPID(125));
  TAutoArgs<1> _args;
  _args[1] = pbitmapVirtualCacheSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCacheSize"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapVirtualCacheSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_BitmapVirtualCacheSize(void)
{
  long pbitmapVirtualCacheSize;
  this->get_BitmapVirtualCacheSize((long*)&pbitmapVirtualCacheSize);
  return pbitmapVirtualCacheSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleBitmapCachesByBPP"), DISPID(175));
  TAutoArgs<1> _args;
  _args[1] = pbScale /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleBitmapCachesByBPP"), DISPID(175));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbScale /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_ScaleBitmapCachesByBPP(void)
{
  long pbScale;
  this->get_ScaleBitmapCachesByBPP((long*)&pbScale);
  return pbScale;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumBitmapCaches"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = pnumBitmapCaches /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumBitmapCaches"), DISPID(126));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnumBitmapCaches /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_NumBitmapCaches(void)
{
  long pnumBitmapCaches;
  this->get_NumBitmapCaches((long*)&pnumBitmapCaches);
  return pnumBitmapCaches;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CachePersistenceActive"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = pcachePersistenceActive /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CachePersistenceActive"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcachePersistenceActive /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_CachePersistenceActive(void)
{
  long pcachePersistenceActive;
  this->get_CachePersistenceActive((long*)&pcachePersistenceActive);
  return pcachePersistenceActive;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_PersistCacheDirectory(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PersistCacheDirectory"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_brushSupportLevel(long pbrushSupportLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("brushSupportLevel"), DISPID(156));
  TAutoArgs<1> _args;
  _args[1] = pbrushSupportLevel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("brushSupportLevel"), DISPID(156));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbrushSupportLevel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_brushSupportLevel(void)
{
  long pbrushSupportLevel;
  this->get_brushSupportLevel((long*)&pbrushSupportLevel);
  return pbrushSupportLevel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_minInputSendInterval(long pminInputSendInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("minInputSendInterval"), DISPID(157));
  TAutoArgs<1> _args;
  _args[1] = pminInputSendInterval /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("minInputSendInterval"), DISPID(157));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pminInputSendInterval /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_minInputSendInterval(void)
{
  long pminInputSendInterval;
  this->get_minInputSendInterval((long*)&pminInputSendInterval);
  return pminInputSendInterval;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputEventsAtOnce"), DISPID(158));
  TAutoArgs<1> _args;
  _args[1] = pinputEventsAtOnce /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputEventsAtOnce"), DISPID(158));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pinputEventsAtOnce /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_InputEventsAtOnce(void)
{
  long pinputEventsAtOnce;
  this->get_InputEventsAtOnce((long*)&pinputEventsAtOnce);
  return pinputEventsAtOnce;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_maxEventCount(long pmaxEventCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxEventCount"), DISPID(159));
  TAutoArgs<1> _args;
  _args[1] = pmaxEventCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_maxEventCount(long* pmaxEventCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxEventCount"), DISPID(159));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmaxEventCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_maxEventCount(void)
{
  long pmaxEventCount;
  this->get_maxEventCount((long*)&pmaxEventCount);
  return pmaxEventCount;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_keepAliveInterval(long pkeepAliveInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("keepAliveInterval"), DISPID(160));
  TAutoArgs<1> _args;
  _args[1] = pkeepAliveInterval /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("keepAliveInterval"), DISPID(160));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeepAliveInterval /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_keepAliveInterval(void)
{
  long pkeepAliveInterval;
  this->get_keepAliveInterval((long*)&pkeepAliveInterval);
  return pkeepAliveInterval;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_shutdownTimeout(long pshutdownTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("shutdownTimeout"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pshutdownTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("shutdownTimeout"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pshutdownTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_shutdownTimeout(void)
{
  long pshutdownTimeout;
  this->get_shutdownTimeout((long*)&pshutdownTimeout);
  return pshutdownTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("overallConnectionTimeout"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = poverallConnectionTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("overallConnectionTimeout"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(poverallConnectionTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_overallConnectionTimeout(void)
{
  long poverallConnectionTimeout;
  this->get_overallConnectionTimeout((long*)&poverallConnectionTimeout);
  return poverallConnectionTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("singleConnectionTimeout"), DISPID(165));
  TAutoArgs<1> _args;
  _args[1] = psingleConnectionTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("singleConnectionTimeout"), DISPID(165));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psingleConnectionTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_singleConnectionTimeout(void)
{
  long psingleConnectionTimeout;
  this->get_singleConnectionTimeout((long*)&psingleConnectionTimeout);
  return psingleConnectionTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_KeyboardType(long pkeyboardType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardType"), DISPID(166));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_KeyboardType(long* pkeyboardType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardType"), DISPID(166));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_KeyboardType(void)
{
  long pkeyboardType;
  this->get_KeyboardType((long*)&pkeyboardType);
  return pkeyboardType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_KeyboardSubType(long pkeyboardSubType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardSubType"), DISPID(167));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardSubType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardSubType"), DISPID(167));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardSubType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_KeyboardSubType(void)
{
  long pkeyboardSubType;
  this->get_KeyboardSubType((long*)&pkeyboardSubType);
  return pkeyboardSubType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardFunctionKey"), DISPID(168));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardFunctionKey /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardFunctionKey"), DISPID(168));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardFunctionKey /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_KeyboardFunctionKey(void)
{
  long pkeyboardFunctionKey;
  this->get_KeyboardFunctionKey((long*)&pkeyboardFunctionKey);
  return pkeyboardFunctionKey;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WinceFixedPalette"), DISPID(169));
  TAutoArgs<1> _args;
  _args[1] = pwinceFixedPalette /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WinceFixedPalette"), DISPID(169));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pwinceFixedPalette /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_WinceFixedPalette(void)
{
  long pwinceFixedPalette;
  this->get_WinceFixedPalette((long*)&pwinceFixedPalette);
  return pwinceFixedPalette;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToServerConsole"), DISPID(178));
  TAutoArgs<1> _args;
  _args[1] = pConnectToConsole /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToServerConsole"), DISPID(178));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectToConsole /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_ConnectToServerConsole(void)
{
  VARIANT_BOOL pConnectToConsole;
  this->get_ConnectToServerConsole((VARIANT_BOOL*)&pConnectToConsole);
  return pConnectToConsole;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_BitmapPersistence(long pbitmapPersistence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPersistence"), DISPID(182));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPersistence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPersistence"), DISPID(182));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPersistence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_BitmapPersistence(void)
{
  long pbitmapPersistence;
  this->get_BitmapPersistence((long*)&pbitmapPersistence);
  return pbitmapPersistence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinutesToIdleTimeout"), DISPID(183));
  TAutoArgs<1> _args;
  _args[1] = pminutesToIdleTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinutesToIdleTimeout"), DISPID(183));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pminutesToIdleTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_MinutesToIdleTimeout(void)
{
  long pminutesToIdleTimeout;
  this->get_MinutesToIdleTimeout((long*)&pminutesToIdleTimeout);
  return pminutesToIdleTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmartSizing"), DISPID(184));
  TAutoArgs<1> _args;
  _args[1] = pfSmartSizing /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmartSizing"), DISPID(184));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfSmartSizing /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_SmartSizing(void)
{
  VARIANT_BOOL pfSmartSizing;
  this->get_SmartSizing((VARIANT_BOOL*)&pfSmartSizing);
  return pfSmartSizing;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrLocalPrintingDocName"), DISPID(185));
  TAutoArgs<1> _args;
  _args[1] = pLocalPrintingDocName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrLocalPrintingDocName"), DISPID(185));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLocalPrintingDocName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RdpdrLocalPrintingDocName(void)
{
  BSTR pLocalPrintingDocName;
  this->get_RdpdrLocalPrintingDocName((BSTR*)&pLocalPrintingDocName);
  return pLocalPrintingDocName;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipCleanTempDirString"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = clipCleanTempDirString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipCleanTempDirString"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clipCleanTempDirString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RdpdrClipCleanTempDirString(void)
{
  BSTR clipCleanTempDirString;
  this->get_RdpdrClipCleanTempDirString((BSTR*)&clipCleanTempDirString);
  return clipCleanTempDirString;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipPasteInfoString"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = clipPasteInfoString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipPasteInfoString"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clipPasteInfoString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RdpdrClipPasteInfoString(void)
{
  BSTR clipPasteInfoString;
  this->get_RdpdrClipPasteInfoString((BSTR*)&clipPasteInfoString);
  return clipPasteInfoString;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_ClearTextPassword(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClearTextPassword"), DISPID(186));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayConnectionBar"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = pDisplayConnectionBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayConnectionBar"), DISPID(187));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisplayConnectionBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_DisplayConnectionBar(void)
{
  VARIANT_BOOL pDisplayConnectionBar;
  this->get_DisplayConnectionBar((VARIANT_BOOL*)&pDisplayConnectionBar);
  return pDisplayConnectionBar;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PinConnectionBar"), DISPID(188));
  TAutoArgs<1> _args;
  _args[1] = pPinConnectionBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PinConnectionBar"), DISPID(188));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pPinConnectionBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_PinConnectionBar(void)
{
  VARIANT_BOOL pPinConnectionBar;
  this->get_PinConnectionBar((VARIANT_BOOL*)&pPinConnectionBar);
  return pPinConnectionBar;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrabFocusOnConnect"), DISPID(189));
  TAutoArgs<1> _args;
  _args[1] = pfGrabFocusOnConnect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrabFocusOnConnect"), DISPID(189));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfGrabFocusOnConnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_GrabFocusOnConnect(void)
{
  VARIANT_BOOL pfGrabFocusOnConnect;
  this->get_GrabFocusOnConnect((VARIANT_BOOL*)&pfGrabFocusOnConnect);
  return pfGrabFocusOnConnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadBalanceInfo"), DISPID(190));
  TAutoArgs<1> _args;
  _args[1] = pLBInfo /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadBalanceInfo"), DISPID(190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLBInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_LoadBalanceInfo(void)
{
  BSTR pLBInfo;
  this->get_LoadBalanceInfo((BSTR*)&pLBInfo);
  return pLBInfo;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDrives"), DISPID(191));
  TAutoArgs<1> _args;
  _args[1] = pRedirectDrives /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDrives"), DISPID(191));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectDrives /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RedirectDrives(void)
{
  VARIANT_BOOL pRedirectDrives;
  this->get_RedirectDrives((VARIANT_BOOL*)&pRedirectDrives);
  return pRedirectDrives;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPrinters"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = pRedirectPrinters /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPrinters"), DISPID(192));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectPrinters /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RedirectPrinters(void)
{
  VARIANT_BOOL pRedirectPrinters;
  this->get_RedirectPrinters((VARIANT_BOOL*)&pRedirectPrinters);
  return pRedirectPrinters;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPorts"), DISPID(193));
  TAutoArgs<1> _args;
  _args[1] = pRedirectPorts /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPorts"), DISPID(193));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectPorts /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RedirectPorts(void)
{
  VARIANT_BOOL pRedirectPorts;
  this->get_RedirectPorts((VARIANT_BOOL*)&pRedirectPorts);
  return pRedirectPorts;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectSmartCards"), DISPID(194));
  TAutoArgs<1> _args;
  _args[1] = pRedirectSmartCards /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectSmartCards"), DISPID(194));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectSmartCards /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_RedirectSmartCards(void)
{
  VARIANT_BOOL pRedirectSmartCards;
  this->get_RedirectSmartCards((VARIANT_BOOL*)&pRedirectSmartCards);
  return pRedirectSmartCards;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache16BppSize"), DISPID(195));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache16BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache16BppSize"), DISPID(195));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache16BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_BitmapVirtualCache16BppSize(void)
{
  long pBitmapVirtualCache16BppSize;
  this->get_BitmapVirtualCache16BppSize((long*)&pBitmapVirtualCache16BppSize);
  return pBitmapVirtualCache16BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache24BppSize"), DISPID(196));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache24BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache24BppSize"), DISPID(196));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache24BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_BitmapVirtualCache24BppSize(void)
{
  long pBitmapVirtualCache24BppSize;
  this->get_BitmapVirtualCache24BppSize((long*)&pBitmapVirtualCache24BppSize);
  return pBitmapVirtualCache24BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_PerformanceFlags(long pDisableList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PerformanceFlags"), DISPID(200));
  TAutoArgs<1> _args;
  _args[1] = pDisableList /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_PerformanceFlags(long* pDisableList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PerformanceFlags"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableList /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_PerformanceFlags(void)
{
  long pDisableList;
  this->get_PerformanceFlags((long*)&pDisableList);
  return pDisableList;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectWithEndpoint"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyTSPublicKey"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = pfNotify /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyTSPublicKey"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfNotify /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_NotifyTSPublicKey(void)
{
  VARIANT_BOOL pfNotify;
  this->get_NotifyTSPublicKey((VARIANT_BOOL*)&pfNotify);
  return pfNotify;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_Compress(long pcompress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<1> _args;
  _args[1] = pcompress /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_Compress(long* pcompress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcompress /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_Compress(void)
{
  long pcompress;
  this->get_Compress((long*)&pcompress);
  return pcompress;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_BitmapPeristence(long pbitmapPeristence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPeristence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPeristence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_BitmapPeristence(void)
{
  long pbitmapPeristence;
  this->get_BitmapPeristence((long*)&pbitmapPeristence);
  return pbitmapPeristence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<1> _args;
  _args[1] = pallowBackgroundInput /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pallowBackgroundInput /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_allowBackgroundInput(void)
{
  long pallowBackgroundInput;
  this->get_allowBackgroundInput((long*)&pallowBackgroundInput);
  return pallowBackgroundInput;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_KeyBoardLayoutStr(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyBoardLayoutStr"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_PluginDlls(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PluginDlls"), DISPID(170));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_IconFile(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconFile"), DISPID(171));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_IconIndex(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconIndex"), DISPID(172));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<1> _args;
  _args[1] = pContainerHandledFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pContainerHandledFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_ContainerHandledFullScreen(void)
{
  long pContainerHandledFullScreen;
  this->get_ContainerHandledFullScreen((long*)&pContainerHandledFullScreen);
  return pContainerHandledFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::set_DisableRdpdr(long pDisableRdpdr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<1> _args;
  _args[1] = pDisableRdpdr /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableRdpdr /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings6DispT<T>::get_DisableRdpdr(void)
{
  long pDisableRdpdr;
  this->get_DisableRdpdr((long*)&pDisableRdpdr);
  return pDisableRdpdr;
}

// *********************************************************************//
// DispIntf:  IMsRdpClientTransportSettings2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {67341688-D606-4C73-A5D2-2E0489009319}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::set_GatewayCredSharing(unsigned_long pulProxyCredSharing/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredSharing"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pulProxyCredSharing /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayCredSharing(unsigned_long* pulProxyCredSharing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredSharing"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyCredSharing /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayCredSharing(void)
{
  unsigned_long pulProxyCredSharing;
  this->get_GatewayCredSharing((unsigned_long*)&pulProxyCredSharing);
  return pulProxyCredSharing;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::set_GatewayPreAuthRequirement(unsigned_long pulProxyPreAuthRequirement/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayPreAuthRequirement"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = pulProxyPreAuthRequirement /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayPreAuthRequirement(unsigned_long* pulProxyPreAuthRequirement/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayPreAuthRequirement"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyPreAuthRequirement /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayPreAuthRequirement(void)
{
  unsigned_long pulProxyPreAuthRequirement;
  this->get_GatewayPreAuthRequirement((unsigned_long*)&pulProxyPreAuthRequirement);
  return pulProxyPreAuthRequirement;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::set_GatewayPreAuthServerAddr(BSTR pbstrProxyPreAuthServerAddr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayPreAuthServerAddr"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pbstrProxyPreAuthServerAddr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayPreAuthServerAddr(BSTR* pbstrProxyPreAuthServerAddr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayPreAuthServerAddr"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrProxyPreAuthServerAddr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayPreAuthServerAddr(void)
{
  BSTR pbstrProxyPreAuthServerAddr;
  this->get_GatewayPreAuthServerAddr((BSTR*)&pbstrProxyPreAuthServerAddr);
  return pbstrProxyPreAuthServerAddr;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::set_GatewaySupportUrl(BSTR pbstrProxySupportUrl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewaySupportUrl"), DISPID(219));
  TAutoArgs<1> _args;
  _args[1] = pbstrProxySupportUrl /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewaySupportUrl(BSTR* pbstrProxySupportUrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewaySupportUrl"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrProxySupportUrl /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewaySupportUrl(void)
{
  BSTR pbstrProxySupportUrl;
  this->get_GatewaySupportUrl((BSTR*)&pbstrProxySupportUrl);
  return pbstrProxySupportUrl;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::set_GatewayEncryptedOtpCookie(BSTR pbstrEncryptedOtpCookie/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedOtpCookie"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = pbstrEncryptedOtpCookie /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayEncryptedOtpCookie(BSTR* pbstrEncryptedOtpCookie/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedOtpCookie"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrEncryptedOtpCookie /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayEncryptedOtpCookie(void)
{
  BSTR pbstrEncryptedOtpCookie;
  this->get_GatewayEncryptedOtpCookie((BSTR*)&pbstrEncryptedOtpCookie);
  return pbstrEncryptedOtpCookie;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::set_GatewayEncryptedOtpCookieSize(unsigned_long pulEncryptedOtpCookieSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedOtpCookieSize"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pulEncryptedOtpCookieSize /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayEncryptedOtpCookieSize(unsigned_long* pulEncryptedOtpCookieSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedOtpCookieSize"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulEncryptedOtpCookieSize /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayEncryptedOtpCookieSize(void)
{
  unsigned_long pulEncryptedOtpCookieSize;
  this->get_GatewayEncryptedOtpCookieSize((unsigned_long*)&pulEncryptedOtpCookieSize);
  return pulEncryptedOtpCookieSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::set_GatewayUsername(BSTR pProxyUsername/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUsername"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pProxyUsername /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayUsername(BSTR* pProxyUsername/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUsername"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pProxyUsername /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayUsername(void)
{
  BSTR pProxyUsername;
  this->get_GatewayUsername((BSTR*)&pProxyUsername);
  return pProxyUsername;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::set_GatewayDomain(BSTR pProxyDomain/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayDomain"), DISPID(224));
  TAutoArgs<1> _args;
  _args[1] = pProxyDomain /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayDomain(BSTR* pProxyDomain/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayDomain"), DISPID(224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pProxyDomain /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayDomain(void)
{
  BSTR pProxyDomain;
  this->get_GatewayDomain((BSTR*)&pProxyDomain);
  return pProxyDomain;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::set_GatewayPassword(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayPassword"), DISPID(225));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::set_GatewayHostname(BSTR pProxyHostname/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayHostname"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = pProxyHostname /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayHostname(BSTR* pProxyHostname/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayHostname"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pProxyHostname /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayHostname(void)
{
  BSTR pProxyHostname;
  this->get_GatewayHostname((BSTR*)&pProxyHostname);
  return pProxyHostname;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::set_GatewayUsageMethod(unsigned_long pulProxyUsageMethod/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUsageMethod"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = pulProxyUsageMethod /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayUsageMethod(unsigned_long* pulProxyUsageMethod/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUsageMethod"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyUsageMethod /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayUsageMethod(void)
{
  unsigned_long pulProxyUsageMethod;
  this->get_GatewayUsageMethod((unsigned_long*)&pulProxyUsageMethod);
  return pulProxyUsageMethod;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::set_GatewayProfileUsageMethod(unsigned_long pulProxyProfileUsageMethod/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayProfileUsageMethod"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = pulProxyProfileUsageMethod /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayProfileUsageMethod(unsigned_long* pulProxyProfileUsageMethod/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayProfileUsageMethod"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyProfileUsageMethod /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayProfileUsageMethod(void)
{
  unsigned_long pulProxyProfileUsageMethod;
  this->get_GatewayProfileUsageMethod((unsigned_long*)&pulProxyProfileUsageMethod);
  return pulProxyProfileUsageMethod;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::set_GatewayCredsSource(unsigned_long pulProxyCredsSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredsSource"), DISPID(213));
  TAutoArgs<1> _args;
  _args[1] = pulProxyCredsSource /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredsSource"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyCredsSource /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayCredsSource(void)
{
  unsigned_long pulProxyCredsSource;
  this->get_GatewayCredsSource((unsigned_long*)&pulProxyCredsSource);
  return pulProxyCredsSource;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::set_GatewayUserSelectedCredsSource(unsigned_long pulProxyCredsSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUserSelectedCredsSource"), DISPID(216));
  TAutoArgs<1> _args;
  _args[1] = pulProxyCredsSource /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayUserSelectedCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUserSelectedCredsSource"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyCredsSource /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayUserSelectedCredsSource(void)
{
  unsigned_long pulProxyCredsSource;
  this->get_GatewayUserSelectedCredsSource((unsigned_long*)&pulProxyCredsSource);
  return pulProxyCredsSource;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayIsSupported(long* pfProxyIsSupported/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayIsSupported"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfProxyIsSupported /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayIsSupported(void)
{
  long pfProxyIsSupported;
  this->get_GatewayIsSupported((long*)&pfProxyIsSupported);
  return pfProxyIsSupported;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayDefaultUsageMethod(unsigned_long* pulProxyDefaultUsageMethod/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayDefaultUsageMethod"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyDefaultUsageMethod /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings2DispT<T>::get_GatewayDefaultUsageMethod(void)
{
  unsigned_long pulProxyDefaultUsageMethod;
  this->get_GatewayDefaultUsageMethod((unsigned_long*)&pulProxyDefaultUsageMethod);
  return pulProxyDefaultUsageMethod;
}

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient7
// Interface: IMsRdpClient7
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMsRdpClient7T<T>::get_AdvancedSettings8(Mstsclib_tlb::IMsRdpClientAdvancedSettings7** ppAdvSettings/*[out,retval]*/)
{
  return (*this)->get_AdvancedSettings8(ppAdvSettings);
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr __fastcall
TCOMIMsRdpClient7T<T>::get_AdvancedSettings8(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr ppAdvSettings;
  OLECHECK(this->get_AdvancedSettings8((Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr*)&ppAdvSettings));
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient7T<T>::get_TransportSettings3(Mstsclib_tlb::IMsRdpClientTransportSettings3** ppXportSet3/*[out,retval]*/)
{
  return (*this)->get_TransportSettings3(ppXportSet3);
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr __fastcall
TCOMIMsRdpClient7T<T>::get_TransportSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr ppXportSet3;
  OLECHECK(this->get_TransportSettings3((Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr*)&ppXportSet3));
  return ppXportSet3;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient7T<T>::GetStatusText(unsigned statusCode/*[in]*/, 
                                     BSTR* pBstrStatusText/*[out,retval]*/)
{
  return (*this)->GetStatusText(statusCode, pBstrStatusText);
}

template <class T> BSTR __fastcall
TCOMIMsRdpClient7T<T>::GetStatusText(unsigned statusCode/*[in]*/)
{
  BSTR pBstrStatusText = 0;
  OLECHECK(this->GetStatusText(statusCode/*[in]*/, (BSTR*)&pBstrStatusText));
  return pBstrStatusText;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient7T<T>::get_SecuredSettings3(Mstsclib_tlb::IMsRdpClientSecuredSettings2** ppSecuredSettings/*[out,retval]*/)
{
  return (*this)->get_SecuredSettings3(ppSecuredSettings);
}

template <class T> Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr __fastcall
TCOMIMsRdpClient7T<T>::get_SecuredSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr ppSecuredSettings;
  OLECHECK(this->get_SecuredSettings3((Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr*)&ppSecuredSettings));
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient7T<T>::get_RemoteProgram2(Mstsclib_tlb::ITSRemoteProgram2** ppRemoteProgram/*[out,retval]*/)
{
  return (*this)->get_RemoteProgram2(ppRemoteProgram);
}

template <class T> Mstsclib_tlb::ITSRemoteProgram2Ptr __fastcall
TCOMIMsRdpClient7T<T>::get_RemoteProgram2(void)
{
  Mstsclib_tlb::ITSRemoteProgram2Ptr ppRemoteProgram;
  OLECHECK(this->get_RemoteProgram2((Mstsclib_tlb::ITSRemoteProgram2Ptr*)&ppRemoteProgram));
  return ppRemoteProgram;
}

// *********************************************************************//
// DispIntf:  IMsRdpClient7
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B2A5B5CE-3461-444A-91D4-ADD26D070638}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_AdvancedSettings8(Mstsclib_tlb::IMsRdpClientAdvancedSettings7** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings8"), DISPID(600));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings7**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr __fastcall
IMsRdpClient7DispT<T>::get_AdvancedSettings8(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr ppAdvSettings;
  this->get_AdvancedSettings8(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_TransportSettings3(Mstsclib_tlb::IMsRdpClientTransportSettings3** ppXportSet3/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings3"), DISPID(601));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings3**)ppXportSet3 /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr __fastcall
IMsRdpClient7DispT<T>::get_TransportSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr ppXportSet3;
  this->get_TransportSettings3(&ppXportSet3);
  return ppXportSet3;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::GetStatusText(unsigned statusCode/*[in]*/, 
                                     BSTR* pBstrStatusText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetStatusText"), DISPID(602));
  TAutoArgs<1> _args;
  _args[1] = statusCode /*[VT_UINT:0]*/;
  return OutRetValSetterPtr(pBstrStatusText /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient7DispT<T>::GetStatusText(unsigned statusCode/*[in]*/)
{
  BSTR pBstrStatusText;
  this->GetStatusText(statusCode, (BSTR*)&pBstrStatusText);
  return pBstrStatusText;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_SecuredSettings3(Mstsclib_tlb::IMsRdpClientSecuredSettings2** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings3"), DISPID(603));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientSecuredSettings2**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr __fastcall
IMsRdpClient7DispT<T>::get_SecuredSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr ppSecuredSettings;
  this->get_SecuredSettings3(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_RemoteProgram2(Mstsclib_tlb::ITSRemoteProgram2** ppRemoteProgram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgram2"), DISPID(604));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::ITSRemoteProgram2**)ppRemoteProgram /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ITSRemoteProgram2Ptr __fastcall
IMsRdpClient7DispT<T>::get_RemoteProgram2(void)
{
  Mstsclib_tlb::ITSRemoteProgram2Ptr ppRemoteProgram;
  this->get_RemoteProgram2(&ppRemoteProgram);
  return ppRemoteProgram;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_AdvancedSettings7(Mstsclib_tlb::IMsRdpClientAdvancedSettings6** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings7"), DISPID(507));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings6**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr __fastcall
IMsRdpClient7DispT<T>::get_AdvancedSettings7(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr ppAdvSettings;
  this->get_AdvancedSettings7(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_TransportSettings2(Mstsclib_tlb::IMsRdpClientTransportSettings2** ppXportSet2/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings2"), DISPID(506));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings2**)ppXportSet2 /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr __fastcall
IMsRdpClient7DispT<T>::get_TransportSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr ppXportSet2;
  this->get_TransportSettings2(&ppXportSet2);
  return ppXportSet2;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_TransportSettings(Mstsclib_tlb::IMsRdpClientTransportSettings** ppXportSet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings"), DISPID(500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings**)ppXportSet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettingsPtr __fastcall
IMsRdpClient7DispT<T>::get_TransportSettings(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettingsPtr ppXportSet;
  this->get_TransportSettings(&ppXportSet);
  return ppXportSet;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_AdvancedSettings6(Mstsclib_tlb::IMsRdpClientAdvancedSettings5** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings6"), DISPID(502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings5**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr __fastcall
IMsRdpClient7DispT<T>::get_AdvancedSettings6(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr ppAdvSettings;
  this->get_AdvancedSettings6(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                           unsigned ExtendedDisconnectReason/*[in]*/, 
                                           BSTR* pBstrErrorMsg/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetErrorDescription"), DISPID(503));
  TAutoArgs<2> _args;
  _args[1] = disconnectReason /*[VT_UINT:0]*/;
  _args[2] = ExtendedDisconnectReason /*[VT_UINT:0]*/;
  return OutRetValSetterPtr(pBstrErrorMsg /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient7DispT<T>::GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                           unsigned ExtendedDisconnectReason/*[in]*/)
{
  BSTR pBstrErrorMsg;
  this->GetErrorDescription(disconnectReason, ExtendedDisconnectReason, (BSTR*)&pBstrErrorMsg);
  return pBstrErrorMsg;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_RemoteProgram(Mstsclib_tlb::ITSRemoteProgram** ppRemoteProgram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgram"), DISPID(504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::ITSRemoteProgram**)ppRemoteProgram /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ITSRemoteProgramPtr __fastcall
IMsRdpClient7DispT<T>::get_RemoteProgram(void)
{
  Mstsclib_tlb::ITSRemoteProgramPtr ppRemoteProgram;
  this->get_RemoteProgram(&ppRemoteProgram);
  return ppRemoteProgram;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_MsRdpClientShell(Mstsclib_tlb::IMsRdpClientShell** ppLauncher/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MsRdpClientShell"), DISPID(505));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientShell**)ppLauncher /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientShellPtr __fastcall
IMsRdpClient7DispT<T>::get_MsRdpClientShell(void)
{
  Mstsclib_tlb::IMsRdpClientShellPtr ppLauncher;
  this->get_MsRdpClientShell(&ppLauncher);
  return ppLauncher;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings5"), DISPID(400));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings4**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall
IMsRdpClient7DispT<T>::get_AdvancedSettings5(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr ppAdvSettings;
  this->get_AdvancedSettings5(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings4"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings3**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall
IMsRdpClient7DispT<T>::get_AdvancedSettings4(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr ppAdvSettings;
  this->get_AdvancedSettings4(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings3"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings2**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall
IMsRdpClient7DispT<T>::get_AdvancedSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr ppAdvSettings;
  this->get_AdvancedSettings3(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = pConnectedStatusText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectedStatusText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient7DispT<T>::get_ConnectedStatusText(void)
{
  BSTR pConnectedStatusText;
  this->get_ConnectedStatusText((BSTR*)&pConnectedStatusText);
  return pConnectedStatusText;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::set_ColorDepth(long pcolorDepth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = pcolorDepth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_ColorDepth(long* pcolorDepth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcolorDepth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient7DispT<T>::get_ColorDepth(void)
{
  long pcolorDepth;
  this->get_ColorDepth((long*)&pcolorDepth);
  return pcolorDepth;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings2"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall
IMsRdpClient7DispT<T>::get_AdvancedSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings2(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings2"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall
IMsRdpClient7DispT<T>::get_SecuredSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings2(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedDisconnectReason"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pExtendedDisconnectReason /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall
IMsRdpClient7DispT<T>::get_ExtendedDisconnectReason(void)
{
  Mstsclib_tlb::ExtendedDisconnectReasonCode pExtendedDisconnectReason;
  this->get_ExtendedDisconnectReason((Mstsclib_tlb::ExtendedDisconnectReasonCode*)&pExtendedDisconnectReason);
  return pExtendedDisconnectReason;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pfFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClient7DispT<T>::get_FullScreen(void)
{
  VARIANT_BOOL pfFullScreen;
  this->get_FullScreen((VARIANT_BOOL*)&pfFullScreen);
  return pfFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::SetVirtualChannelOptions(BSTR chanName/*[in]*/, long chanOptions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVirtualChannelOptions"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = chanOptions /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                long* pChanOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVirtualChannelOptions"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pChanOptions /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient7DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/)
{
  long pChanOptions;
  this->GetVirtualChannelOptions(chanName, (long*)&pChanOptions);
  return pChanOptions;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestClose"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pCloseStatus /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mstsclib_tlb::ControlCloseStatus __fastcall
IMsRdpClient7DispT<T>::RequestClose(void)
{
  Mstsclib_tlb::ControlCloseStatus pCloseStatus;
  this->RequestClose((Mstsclib_tlb::ControlCloseStatus*)&pCloseStatus);
  return pCloseStatus;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::set_Server(BSTR pServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pServer /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_Server(BSTR* pServer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pServer /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient7DispT<T>::get_Server(void)
{
  BSTR pServer;
  this->get_Server((BSTR*)&pServer);
  return pServer;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::set_Domain(BSTR pDomain/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pDomain /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_Domain(BSTR* pDomain/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDomain /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient7DispT<T>::get_Domain(void)
{
  BSTR pDomain;
  this->get_Domain((BSTR*)&pDomain);
  return pDomain;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::set_UserName(BSTR pUserName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pUserName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_UserName(BSTR* pUserName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pUserName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient7DispT<T>::get_UserName(void)
{
  BSTR pUserName;
  this->get_UserName((BSTR*)&pUserName);
  return pUserName;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::set_DisconnectedText(BSTR pDisconnectedText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pDisconnectedText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisconnectedText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient7DispT<T>::get_DisconnectedText(void)
{
  BSTR pDisconnectedText;
  this->get_DisconnectedText((BSTR*)&pDisconnectedText);
  return pDisconnectedText;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::set_ConnectingText(BSTR pConnectingText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pConnectingText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectingText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient7DispT<T>::get_ConnectingText(void)
{
  BSTR pConnectingText;
  this->get_ConnectingText((BSTR*)&pConnectingText);
  return pConnectingText;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_Connected(short* pIsConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connected"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIsConnected /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMsRdpClient7DispT<T>::get_Connected(void)
{
  short pIsConnected;
  this->get_Connected((short*)&pIsConnected);
  return pIsConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::set_DesktopWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_DesktopWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient7DispT<T>::get_DesktopWidth(void)
{
  long pVal;
  this->get_DesktopWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::set_DesktopHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_DesktopHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient7DispT<T>::get_DesktopHeight(void)
{
  long pVal;
  this->get_DesktopHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::set_StartConnected(long pfStartConnected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pfStartConnected /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_StartConnected(long* pfStartConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfStartConnected /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient7DispT<T>::get_StartConnected(void)
{
  long pfStartConnected;
  this->get_StartConnected((long*)&pfStartConnected);
  return pfStartConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalScrollBarVisible"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient7DispT<T>::get_HorizontalScrollBarVisible(void)
{
  long pfHScrollVisible;
  this->get_HorizontalScrollBarVisible((long*)&pfHScrollVisible);
  return pfHScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarVisible"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient7DispT<T>::get_VerticalScrollBarVisible(void)
{
  long pfVScrollVisible;
  this->get_VerticalScrollBarVisible((long*)&pfVScrollVisible);
  return pfVScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::set_FullScreenTitle(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreenTitle"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_CipherStrength(long* pCipherStrength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CipherStrength"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCipherStrength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient7DispT<T>::get_CipherStrength(void)
{
  long pCipherStrength;
  this->get_CipherStrength((long*)&pCipherStrength);
  return pCipherStrength;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_Version(BSTR* pVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient7DispT<T>::get_Version(void)
{
  BSTR pVersion;
  this->get_Version((BSTR*)&pVersion);
  return pVersion;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettingsEnabled"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSecuredSettingsEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient7DispT<T>::get_SecuredSettingsEnabled(void)
{
  long pSecuredSettingsEnabled;
  this->get_SecuredSettingsEnabled((long*)&pSecuredSettingsEnabled);
  return pSecuredSettingsEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall
IMsRdpClient7DispT<T>::get_SecuredSettings(void)
{
  Mstsclib_tlb::IMsTscSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings"), DISPID(98));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall
IMsRdpClient7DispT<T>::get_AdvancedSettings(void)
{
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Debugger"), DISPID(99));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscDebug**)ppDebugger /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscDebugPtr __fastcall
IMsRdpClient7DispT<T>::get_Debugger(void)
{
  Mstsclib_tlb::IMsTscDebugPtr ppDebugger;
  this->get_Debugger(&ppDebugger);
  return ppDebugger;
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::Connect()
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(30));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(31));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::CreateVirtualChannels(BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateVirtualChannels"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient7DispT<T>::SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendOnVirtualChannel"), DISPID(34));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = ChanData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMsRdpClientAdvancedSettings7
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {26036036-4010-4578-8091-0DB9A1EDF9C3}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_AudioCaptureRedirectionMode(VARIANT_BOOL pfRedir/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioCaptureRedirectionMode"), DISPID(228));
  TAutoArgs<1> _args;
  _args[1] = pfRedir /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_AudioCaptureRedirectionMode(VARIANT_BOOL* pfRedir/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioCaptureRedirectionMode"), DISPID(228));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRedir /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_AudioCaptureRedirectionMode(void)
{
  VARIANT_BOOL pfRedir;
  this->get_AudioCaptureRedirectionMode((VARIANT_BOOL*)&pfRedir);
  return pfRedir;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_VideoPlaybackMode(unsigned pVideoPlaybackMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoPlaybackMode"), DISPID(229));
  TAutoArgs<1> _args;
  _args[1] = pVideoPlaybackMode /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_VideoPlaybackMode(unsigned* pVideoPlaybackMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoPlaybackMode"), DISPID(229));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVideoPlaybackMode /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_VideoPlaybackMode(void)
{
  unsigned pVideoPlaybackMode;
  this->get_VideoPlaybackMode((unsigned*)&pVideoPlaybackMode);
  return pVideoPlaybackMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_EnableSuperPan(VARIANT_BOOL pfEnableSuperPan/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableSuperPan"), DISPID(230));
  TAutoArgs<1> _args;
  _args[1] = pfEnableSuperPan /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_EnableSuperPan(VARIANT_BOOL* pfEnableSuperPan/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableSuperPan"), DISPID(230));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnableSuperPan /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_EnableSuperPan(void)
{
  VARIANT_BOOL pfEnableSuperPan;
  this->get_EnableSuperPan((VARIANT_BOOL*)&pfEnableSuperPan);
  return pfEnableSuperPan;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_SuperPanAccelerationFactor(unsigned_long puAccelFactor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SuperPanAccelerationFactor"), DISPID(231));
  TAutoArgs<1> _args;
  _args[1] = puAccelFactor /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_SuperPanAccelerationFactor(unsigned_long* puAccelFactor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SuperPanAccelerationFactor"), DISPID(231));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(puAccelFactor /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_SuperPanAccelerationFactor(void)
{
  unsigned_long puAccelFactor;
  this->get_SuperPanAccelerationFactor((unsigned_long*)&puAccelFactor);
  return puAccelFactor;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_NegotiateSecurityLayer(VARIANT_BOOL pfNegotiate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NegotiateSecurityLayer"), DISPID(232));
  TAutoArgs<1> _args;
  _args[1] = pfNegotiate /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_NegotiateSecurityLayer(VARIANT_BOOL* pfNegotiate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NegotiateSecurityLayer"), DISPID(232));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfNegotiate /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_NegotiateSecurityLayer(void)
{
  VARIANT_BOOL pfNegotiate;
  this->get_NegotiateSecurityLayer((VARIANT_BOOL*)&pfNegotiate);
  return pfNegotiate;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_AudioQualityMode(unsigned pAudioQualityMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioQualityMode"), DISPID(233));
  TAutoArgs<1> _args;
  _args[1] = pAudioQualityMode /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_AudioQualityMode(unsigned* pAudioQualityMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioQualityMode"), DISPID(233));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAudioQualityMode /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_AudioQualityMode(void)
{
  unsigned pAudioQualityMode;
  this->get_AudioQualityMode((unsigned*)&pAudioQualityMode);
  return pAudioQualityMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_RedirectDirectX(VARIANT_BOOL pfRedirectDirectX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDirectX"), DISPID(234));
  TAutoArgs<1> _args;
  _args[1] = pfRedirectDirectX /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RedirectDirectX(VARIANT_BOOL* pfRedirectDirectX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDirectX"), DISPID(234));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRedirectDirectX /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RedirectDirectX(void)
{
  VARIANT_BOOL pfRedirectDirectX;
  this->get_RedirectDirectX((VARIANT_BOOL*)&pfRedirectDirectX);
  return pfRedirectDirectX;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_NetworkConnectionType(unsigned pConnectionType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NetworkConnectionType"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = pConnectionType /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_NetworkConnectionType(unsigned* pConnectionType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NetworkConnectionType"), DISPID(235));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectionType /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_NetworkConnectionType(void)
{
  unsigned pConnectionType;
  this->get_NetworkConnectionType((unsigned*)&pConnectionType);
  return pConnectionType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_RelativeMouseMode(VARIANT_BOOL pfRelativeMouseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelativeMouseMode"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pfRelativeMouseMode /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RelativeMouseMode(VARIANT_BOOL* pfRelativeMouseMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelativeMouseMode"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRelativeMouseMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RelativeMouseMode(void)
{
  VARIANT_BOOL pfRelativeMouseMode;
  this->get_RelativeMouseMode((VARIANT_BOOL*)&pfRelativeMouseMode);
  return pfRelativeMouseMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_AuthenticationServiceClass(BSTR* pbstrAuthServiceClass/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationServiceClass"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrAuthServiceClass /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_AuthenticationServiceClass(void)
{
  BSTR pbstrAuthServiceClass;
  this->get_AuthenticationServiceClass((BSTR*)&pbstrAuthServiceClass);
  return pbstrAuthServiceClass;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_AuthenticationServiceClass(BSTR pbstrAuthServiceClass/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationServiceClass"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pbstrAuthServiceClass /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_PCB(BSTR* bstrPCB/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PCB"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrPCB /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_PCB(void)
{
  BSTR bstrPCB;
  this->get_PCB((BSTR*)&bstrPCB);
  return bstrPCB;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_PCB(BSTR bstrPCB/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PCB"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = bstrPCB /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_HotKeyFocusReleaseLeft(long HotKeyFocusReleaseLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFocusReleaseLeft"), DISPID(224));
  TAutoArgs<1> _args;
  _args[1] = HotKeyFocusReleaseLeft /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyFocusReleaseLeft(long* HotKeyFocusReleaseLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFocusReleaseLeft"), DISPID(224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HotKeyFocusReleaseLeft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyFocusReleaseLeft(void)
{
  long HotKeyFocusReleaseLeft;
  this->get_HotKeyFocusReleaseLeft((long*)&HotKeyFocusReleaseLeft);
  return HotKeyFocusReleaseLeft;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_HotKeyFocusReleaseRight(long HotKeyFocusReleaseRight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFocusReleaseRight"), DISPID(225));
  TAutoArgs<1> _args;
  _args[1] = HotKeyFocusReleaseRight /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyFocusReleaseRight(long* HotKeyFocusReleaseRight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFocusReleaseRight"), DISPID(225));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HotKeyFocusReleaseRight /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyFocusReleaseRight(void)
{
  long HotKeyFocusReleaseRight;
  this->get_HotKeyFocusReleaseRight((long*)&HotKeyFocusReleaseRight);
  return HotKeyFocusReleaseRight;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_EnableCredSspSupport(VARIANT_BOOL pfEnableSupport/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableCredSspSupport"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pfEnableSupport /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_EnableCredSspSupport(VARIANT_BOOL* pfEnableSupport/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableCredSspSupport"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnableSupport /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_EnableCredSspSupport(void)
{
  VARIANT_BOOL pfEnableSupport;
  this->get_EnableCredSspSupport((VARIANT_BOOL*)&pfEnableSupport);
  return pfEnableSupport;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_AuthenticationType(unsigned* puiAuthType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationType"), DISPID(226));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(puiAuthType /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_AuthenticationType(void)
{
  unsigned puiAuthType;
  this->get_AuthenticationType((unsigned*)&puiAuthType);
  return puiAuthType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_ConnectToAdministerServer(VARIANT_BOOL pConnectToAdministerServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToAdministerServer"), DISPID(227));
  TAutoArgs<1> _args;
  _args[1] = pConnectToAdministerServer /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_ConnectToAdministerServer(VARIANT_BOOL* pConnectToAdministerServer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToAdministerServer"), DISPID(227));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectToAdministerServer /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_ConnectToAdministerServer(void)
{
  VARIANT_BOOL pConnectToAdministerServer;
  this->get_ConnectToAdministerServer((VARIANT_BOOL*)&pConnectToAdministerServer);
  return pConnectToAdministerServer;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_RedirectClipboard(VARIANT_BOOL pfRedirectClipboard/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectClipboard"), DISPID(213));
  TAutoArgs<1> _args;
  _args[1] = pfRedirectClipboard /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RedirectClipboard(VARIANT_BOOL* pfRedirectClipboard/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectClipboard"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRedirectClipboard /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RedirectClipboard(void)
{
  VARIANT_BOOL pfRedirectClipboard;
  this->get_RedirectClipboard((VARIANT_BOOL*)&pfRedirectClipboard);
  return pfRedirectClipboard;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_AudioRedirectionMode(unsigned puiAudioRedirectionMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioRedirectionMode"), DISPID(215));
  TAutoArgs<1> _args;
  _args[1] = puiAudioRedirectionMode /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_AudioRedirectionMode(unsigned* puiAudioRedirectionMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioRedirectionMode"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(puiAudioRedirectionMode /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_AudioRedirectionMode(void)
{
  unsigned puiAudioRedirectionMode;
  this->get_AudioRedirectionMode((unsigned*)&puiAudioRedirectionMode);
  return puiAudioRedirectionMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_ConnectionBarShowPinButton(VARIANT_BOOL pfShowPin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowPinButton"), DISPID(216));
  TAutoArgs<1> _args;
  _args[1] = pfShowPin /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_ConnectionBarShowPinButton(VARIANT_BOOL* pfShowPin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowPinButton"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowPin /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_ConnectionBarShowPinButton(void)
{
  VARIANT_BOOL pfShowPin;
  this->get_ConnectionBarShowPinButton((VARIANT_BOOL*)&pfShowPin);
  return pfShowPin;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_PublicMode(VARIANT_BOOL pfPublicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PublicMode"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = pfPublicMode /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_PublicMode(VARIANT_BOOL* pfPublicMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PublicMode"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfPublicMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_PublicMode(void)
{
  VARIANT_BOOL pfPublicMode;
  this->get_PublicMode((VARIANT_BOOL*)&pfPublicMode);
  return pfPublicMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_RedirectDevices(VARIANT_BOOL pfRedirectPnPDevices/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDevices"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pfRedirectPnPDevices /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RedirectDevices(VARIANT_BOOL* pfRedirectPnPDevices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDevices"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRedirectPnPDevices /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RedirectDevices(void)
{
  VARIANT_BOOL pfRedirectPnPDevices;
  this->get_RedirectDevices((VARIANT_BOOL*)&pfRedirectPnPDevices);
  return pfRedirectPnPDevices;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_RedirectPOSDevices(VARIANT_BOOL pfRedirectPOSDevices/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPOSDevices"), DISPID(219));
  TAutoArgs<1> _args;
  _args[1] = pfRedirectPOSDevices /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RedirectPOSDevices(VARIANT_BOOL* pfRedirectPOSDevices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPOSDevices"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRedirectPOSDevices /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RedirectPOSDevices(void)
{
  VARIANT_BOOL pfRedirectPOSDevices;
  this->get_RedirectPOSDevices((VARIANT_BOOL*)&pfRedirectPOSDevices);
  return pfRedirectPOSDevices;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_BitmapVirtualCache32BppSize(long pBitmapVirtualCache32BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache32BppSize"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache32BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_BitmapVirtualCache32BppSize(long* pBitmapVirtualCache32BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache32BppSize"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache32BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_BitmapVirtualCache32BppSize(void)
{
  long pBitmapVirtualCache32BppSize;
  this->get_BitmapVirtualCache32BppSize((long*)&pBitmapVirtualCache32BppSize);
  return pBitmapVirtualCache32BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_AuthenticationLevel(unsigned puiAuthLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationLevel"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = puiAuthLevel /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_AuthenticationLevel(unsigned* puiAuthLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationLevel"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(puiAuthLevel /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_AuthenticationLevel(void)
{
  unsigned puiAuthLevel;
  this->get_AuthenticationLevel((unsigned*)&puiAuthLevel);
  return puiAuthLevel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_ConnectionBarShowMinimizeButton(VARIANT_BOOL pfShowMinimize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowMinimizeButton"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = pfShowMinimize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_ConnectionBarShowMinimizeButton(VARIANT_BOOL* pfShowMinimize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowMinimizeButton"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowMinimize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_ConnectionBarShowMinimizeButton(void)
{
  VARIANT_BOOL pfShowMinimize;
  this->get_ConnectionBarShowMinimizeButton((VARIANT_BOOL*)&pfShowMinimize);
  return pfShowMinimize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_ConnectionBarShowRestoreButton(VARIANT_BOOL pfShowRestore/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowRestoreButton"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = pfShowRestore /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_ConnectionBarShowRestoreButton(VARIANT_BOOL* pfShowRestore/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowRestoreButton"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowRestore /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_ConnectionBarShowRestoreButton(void)
{
  VARIANT_BOOL pfShowRestore;
  this->get_ConnectionBarShowRestoreButton((VARIANT_BOOL*)&pfShowRestore);
  return pfShowRestore;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_CanAutoReconnect(VARIANT_BOOL* pfCanAutoReconnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanAutoReconnect"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfCanAutoReconnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_CanAutoReconnect(void)
{
  VARIANT_BOOL pfCanAutoReconnect;
  this->get_CanAutoReconnect((VARIANT_BOOL*)&pfCanAutoReconnect);
  return pfCanAutoReconnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_EnableAutoReconnect(VARIANT_BOOL pfEnableAutoReconnect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableAutoReconnect"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = pfEnableAutoReconnect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_EnableAutoReconnect(VARIANT_BOOL* pfEnableAutoReconnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableAutoReconnect"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnableAutoReconnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_EnableAutoReconnect(void)
{
  VARIANT_BOOL pfEnableAutoReconnect;
  this->get_EnableAutoReconnect((VARIANT_BOOL*)&pfEnableAutoReconnect);
  return pfEnableAutoReconnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_MaxReconnectAttempts(long pMaxReconnectAttempts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxReconnectAttempts"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = pMaxReconnectAttempts /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_MaxReconnectAttempts(long* pMaxReconnectAttempts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxReconnectAttempts"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMaxReconnectAttempts /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_MaxReconnectAttempts(void)
{
  long pMaxReconnectAttempts;
  this->get_MaxReconnectAttempts((long*)&pMaxReconnectAttempts);
  return pMaxReconnectAttempts;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_SmoothScroll(long psmoothScroll/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothScroll"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = psmoothScroll /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_SmoothScroll(long* psmoothScroll/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothScroll"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psmoothScroll /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_SmoothScroll(void)
{
  long psmoothScroll;
  this->get_SmoothScroll((long*)&psmoothScroll);
  return psmoothScroll;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorPassthrough"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pacceleratorPassthrough /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorPassthrough"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pacceleratorPassthrough /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_AcceleratorPassthrough(void)
{
  long pacceleratorPassthrough;
  this->get_AcceleratorPassthrough((long*)&pacceleratorPassthrough);
  return pacceleratorPassthrough;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_ShadowBitmap(long pshadowBitmap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShadowBitmap"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pshadowBitmap /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShadowBitmap"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pshadowBitmap /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_ShadowBitmap(void)
{
  long pshadowBitmap;
  this->get_ShadowBitmap((long*)&pshadowBitmap);
  return pshadowBitmap;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_TransportType(long ptransportType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportType"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = ptransportType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_TransportType(long* ptransportType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportType"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptransportType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_TransportType(void)
{
  long ptransportType;
  this->get_TransportType((long*)&ptransportType);
  return ptransportType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_SasSequence(long psasSequence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SasSequence"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = psasSequence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_SasSequence(long* psasSequence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SasSequence"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psasSequence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_SasSequence(void)
{
  long psasSequence;
  this->get_SasSequence((long*)&psasSequence);
  return psasSequence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_EncryptionEnabled(long pencryptionEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncryptionEnabled"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pencryptionEnabled /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncryptionEnabled"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pencryptionEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_EncryptionEnabled(void)
{
  long pencryptionEnabled;
  this->get_EncryptionEnabled((long*)&pencryptionEnabled);
  return pencryptionEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DedicatedTerminal"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = pdedicatedTerminal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DedicatedTerminal"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdedicatedTerminal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_DedicatedTerminal(void)
{
  long pdedicatedTerminal;
  this->get_DedicatedTerminal((long*)&pdedicatedTerminal);
  return pdedicatedTerminal;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_RDPPort(long prdpPort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RDPPort"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = prdpPort /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RDPPort(long* prdpPort/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RDPPort"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prdpPort /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RDPPort(void)
{
  long prdpPort;
  this->get_RDPPort((long*)&prdpPort);
  return prdpPort;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_EnableMouse(long penableMouse/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableMouse"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = penableMouse /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_EnableMouse(long* penableMouse/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableMouse"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(penableMouse /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_EnableMouse(void)
{
  long penableMouse;
  this->get_EnableMouse((long*)&penableMouse);
  return penableMouse;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableCtrlAltDel"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = pdisableCtrlAltDel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableCtrlAltDel"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdisableCtrlAltDel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_DisableCtrlAltDel(void)
{
  long pdisableCtrlAltDel;
  this->get_DisableCtrlAltDel((long*)&pdisableCtrlAltDel);
  return pdisableCtrlAltDel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_EnableWindowsKey(long penableWindowsKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableWindowsKey"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = penableWindowsKey /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableWindowsKey"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(penableWindowsKey /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_EnableWindowsKey(void)
{
  long penableWindowsKey;
  this->get_EnableWindowsKey((long*)&penableWindowsKey);
  return penableWindowsKey;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleClickDetect"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pdoubleClickDetect /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleClickDetect"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdoubleClickDetect /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_DoubleClickDetect(void)
{
  long pdoubleClickDetect;
  this->get_DoubleClickDetect((long*)&pdoubleClickDetect);
  return pdoubleClickDetect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_MaximizeShell(long pmaximizeShell/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximizeShell"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pmaximizeShell /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximizeShell"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmaximizeShell /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_MaximizeShell(void)
{
  long pmaximizeShell;
  this->get_MaximizeShell((long*)&pmaximizeShell);
  return pmaximizeShell;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFullScreen"), DISPID(114));
  TAutoArgs<1> _args;
  _args[1] = photKeyFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFullScreen"), DISPID(114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyFullScreen(void)
{
  long photKeyFullScreen;
  this->get_HotKeyFullScreen((long*)&photKeyFullScreen);
  return photKeyFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlEsc"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = photKeyCtrlEsc /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlEsc"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyCtrlEsc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyCtrlEsc(void)
{
  long photKeyCtrlEsc;
  this->get_HotKeyCtrlEsc((long*)&photKeyCtrlEsc);
  return photKeyCtrlEsc;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltEsc"), DISPID(116));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltEsc /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltEsc"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltEsc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyAltEsc(void)
{
  long photKeyAltEsc;
  this->get_HotKeyAltEsc((long*)&photKeyAltEsc);
  return photKeyAltEsc;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_HotKeyAltTab(long photKeyAltTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltTab"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltTab /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltTab"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltTab /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyAltTab(void)
{
  long photKeyAltTab;
  this->get_HotKeyAltTab((long*)&photKeyAltTab);
  return photKeyAltTab;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltShiftTab"), DISPID(118));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltShiftTab /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltShiftTab"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltShiftTab /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyAltShiftTab(void)
{
  long photKeyAltShiftTab;
  this->get_HotKeyAltShiftTab((long*)&photKeyAltShiftTab);
  return photKeyAltShiftTab;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltSpace"), DISPID(119));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltSpace /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltSpace"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltSpace /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyAltSpace(void)
{
  long photKeyAltSpace;
  this->get_HotKeyAltSpace((long*)&photKeyAltSpace);
  return photKeyAltSpace;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlAltDel"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = photKeyCtrlAltDel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlAltDel"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyCtrlAltDel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_HotKeyCtrlAltDel(void)
{
  long photKeyCtrlAltDel;
  this->get_HotKeyCtrlAltDel((long*)&photKeyCtrlAltDel);
  return photKeyCtrlAltDel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_orderDrawThreshold(long porderDrawThreshold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderDrawThreshold"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = porderDrawThreshold /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderDrawThreshold"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(porderDrawThreshold /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_orderDrawThreshold(void)
{
  long porderDrawThreshold;
  this->get_orderDrawThreshold((long*)&porderDrawThreshold);
  return porderDrawThreshold;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheSize"), DISPID(124));
  TAutoArgs<1> _args;
  _args[1] = pbitmapCacheSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheSize"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapCacheSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_BitmapCacheSize(void)
{
  long pbitmapCacheSize;
  this->get_BitmapCacheSize((long*)&pbitmapCacheSize);
  return pbitmapCacheSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCacheSize"), DISPID(125));
  TAutoArgs<1> _args;
  _args[1] = pbitmapVirtualCacheSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCacheSize"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapVirtualCacheSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_BitmapVirtualCacheSize(void)
{
  long pbitmapVirtualCacheSize;
  this->get_BitmapVirtualCacheSize((long*)&pbitmapVirtualCacheSize);
  return pbitmapVirtualCacheSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleBitmapCachesByBPP"), DISPID(175));
  TAutoArgs<1> _args;
  _args[1] = pbScale /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleBitmapCachesByBPP"), DISPID(175));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbScale /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_ScaleBitmapCachesByBPP(void)
{
  long pbScale;
  this->get_ScaleBitmapCachesByBPP((long*)&pbScale);
  return pbScale;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumBitmapCaches"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = pnumBitmapCaches /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumBitmapCaches"), DISPID(126));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnumBitmapCaches /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_NumBitmapCaches(void)
{
  long pnumBitmapCaches;
  this->get_NumBitmapCaches((long*)&pnumBitmapCaches);
  return pnumBitmapCaches;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CachePersistenceActive"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = pcachePersistenceActive /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CachePersistenceActive"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcachePersistenceActive /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_CachePersistenceActive(void)
{
  long pcachePersistenceActive;
  this->get_CachePersistenceActive((long*)&pcachePersistenceActive);
  return pcachePersistenceActive;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_PersistCacheDirectory(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PersistCacheDirectory"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_brushSupportLevel(long pbrushSupportLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("brushSupportLevel"), DISPID(156));
  TAutoArgs<1> _args;
  _args[1] = pbrushSupportLevel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("brushSupportLevel"), DISPID(156));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbrushSupportLevel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_brushSupportLevel(void)
{
  long pbrushSupportLevel;
  this->get_brushSupportLevel((long*)&pbrushSupportLevel);
  return pbrushSupportLevel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_minInputSendInterval(long pminInputSendInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("minInputSendInterval"), DISPID(157));
  TAutoArgs<1> _args;
  _args[1] = pminInputSendInterval /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("minInputSendInterval"), DISPID(157));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pminInputSendInterval /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_minInputSendInterval(void)
{
  long pminInputSendInterval;
  this->get_minInputSendInterval((long*)&pminInputSendInterval);
  return pminInputSendInterval;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputEventsAtOnce"), DISPID(158));
  TAutoArgs<1> _args;
  _args[1] = pinputEventsAtOnce /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputEventsAtOnce"), DISPID(158));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pinputEventsAtOnce /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_InputEventsAtOnce(void)
{
  long pinputEventsAtOnce;
  this->get_InputEventsAtOnce((long*)&pinputEventsAtOnce);
  return pinputEventsAtOnce;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_maxEventCount(long pmaxEventCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxEventCount"), DISPID(159));
  TAutoArgs<1> _args;
  _args[1] = pmaxEventCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_maxEventCount(long* pmaxEventCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxEventCount"), DISPID(159));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmaxEventCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_maxEventCount(void)
{
  long pmaxEventCount;
  this->get_maxEventCount((long*)&pmaxEventCount);
  return pmaxEventCount;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_keepAliveInterval(long pkeepAliveInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("keepAliveInterval"), DISPID(160));
  TAutoArgs<1> _args;
  _args[1] = pkeepAliveInterval /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("keepAliveInterval"), DISPID(160));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeepAliveInterval /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_keepAliveInterval(void)
{
  long pkeepAliveInterval;
  this->get_keepAliveInterval((long*)&pkeepAliveInterval);
  return pkeepAliveInterval;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_shutdownTimeout(long pshutdownTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("shutdownTimeout"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pshutdownTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("shutdownTimeout"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pshutdownTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_shutdownTimeout(void)
{
  long pshutdownTimeout;
  this->get_shutdownTimeout((long*)&pshutdownTimeout);
  return pshutdownTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("overallConnectionTimeout"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = poverallConnectionTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("overallConnectionTimeout"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(poverallConnectionTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_overallConnectionTimeout(void)
{
  long poverallConnectionTimeout;
  this->get_overallConnectionTimeout((long*)&poverallConnectionTimeout);
  return poverallConnectionTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("singleConnectionTimeout"), DISPID(165));
  TAutoArgs<1> _args;
  _args[1] = psingleConnectionTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("singleConnectionTimeout"), DISPID(165));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psingleConnectionTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_singleConnectionTimeout(void)
{
  long psingleConnectionTimeout;
  this->get_singleConnectionTimeout((long*)&psingleConnectionTimeout);
  return psingleConnectionTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_KeyboardType(long pkeyboardType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardType"), DISPID(166));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_KeyboardType(long* pkeyboardType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardType"), DISPID(166));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_KeyboardType(void)
{
  long pkeyboardType;
  this->get_KeyboardType((long*)&pkeyboardType);
  return pkeyboardType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_KeyboardSubType(long pkeyboardSubType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardSubType"), DISPID(167));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardSubType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardSubType"), DISPID(167));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardSubType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_KeyboardSubType(void)
{
  long pkeyboardSubType;
  this->get_KeyboardSubType((long*)&pkeyboardSubType);
  return pkeyboardSubType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardFunctionKey"), DISPID(168));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardFunctionKey /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardFunctionKey"), DISPID(168));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardFunctionKey /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_KeyboardFunctionKey(void)
{
  long pkeyboardFunctionKey;
  this->get_KeyboardFunctionKey((long*)&pkeyboardFunctionKey);
  return pkeyboardFunctionKey;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WinceFixedPalette"), DISPID(169));
  TAutoArgs<1> _args;
  _args[1] = pwinceFixedPalette /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WinceFixedPalette"), DISPID(169));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pwinceFixedPalette /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_WinceFixedPalette(void)
{
  long pwinceFixedPalette;
  this->get_WinceFixedPalette((long*)&pwinceFixedPalette);
  return pwinceFixedPalette;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToServerConsole"), DISPID(178));
  TAutoArgs<1> _args;
  _args[1] = pConnectToConsole /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToServerConsole"), DISPID(178));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectToConsole /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_ConnectToServerConsole(void)
{
  VARIANT_BOOL pConnectToConsole;
  this->get_ConnectToServerConsole((VARIANT_BOOL*)&pConnectToConsole);
  return pConnectToConsole;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_BitmapPersistence(long pbitmapPersistence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPersistence"), DISPID(182));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPersistence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPersistence"), DISPID(182));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPersistence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_BitmapPersistence(void)
{
  long pbitmapPersistence;
  this->get_BitmapPersistence((long*)&pbitmapPersistence);
  return pbitmapPersistence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinutesToIdleTimeout"), DISPID(183));
  TAutoArgs<1> _args;
  _args[1] = pminutesToIdleTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinutesToIdleTimeout"), DISPID(183));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pminutesToIdleTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_MinutesToIdleTimeout(void)
{
  long pminutesToIdleTimeout;
  this->get_MinutesToIdleTimeout((long*)&pminutesToIdleTimeout);
  return pminutesToIdleTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmartSizing"), DISPID(184));
  TAutoArgs<1> _args;
  _args[1] = pfSmartSizing /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmartSizing"), DISPID(184));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfSmartSizing /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_SmartSizing(void)
{
  VARIANT_BOOL pfSmartSizing;
  this->get_SmartSizing((VARIANT_BOOL*)&pfSmartSizing);
  return pfSmartSizing;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrLocalPrintingDocName"), DISPID(185));
  TAutoArgs<1> _args;
  _args[1] = pLocalPrintingDocName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrLocalPrintingDocName"), DISPID(185));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLocalPrintingDocName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RdpdrLocalPrintingDocName(void)
{
  BSTR pLocalPrintingDocName;
  this->get_RdpdrLocalPrintingDocName((BSTR*)&pLocalPrintingDocName);
  return pLocalPrintingDocName;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipCleanTempDirString"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = clipCleanTempDirString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipCleanTempDirString"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clipCleanTempDirString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RdpdrClipCleanTempDirString(void)
{
  BSTR clipCleanTempDirString;
  this->get_RdpdrClipCleanTempDirString((BSTR*)&clipCleanTempDirString);
  return clipCleanTempDirString;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipPasteInfoString"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = clipPasteInfoString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipPasteInfoString"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clipPasteInfoString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RdpdrClipPasteInfoString(void)
{
  BSTR clipPasteInfoString;
  this->get_RdpdrClipPasteInfoString((BSTR*)&clipPasteInfoString);
  return clipPasteInfoString;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_ClearTextPassword(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClearTextPassword"), DISPID(186));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayConnectionBar"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = pDisplayConnectionBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayConnectionBar"), DISPID(187));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisplayConnectionBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_DisplayConnectionBar(void)
{
  VARIANT_BOOL pDisplayConnectionBar;
  this->get_DisplayConnectionBar((VARIANT_BOOL*)&pDisplayConnectionBar);
  return pDisplayConnectionBar;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PinConnectionBar"), DISPID(188));
  TAutoArgs<1> _args;
  _args[1] = pPinConnectionBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PinConnectionBar"), DISPID(188));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pPinConnectionBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_PinConnectionBar(void)
{
  VARIANT_BOOL pPinConnectionBar;
  this->get_PinConnectionBar((VARIANT_BOOL*)&pPinConnectionBar);
  return pPinConnectionBar;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrabFocusOnConnect"), DISPID(189));
  TAutoArgs<1> _args;
  _args[1] = pfGrabFocusOnConnect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrabFocusOnConnect"), DISPID(189));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfGrabFocusOnConnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_GrabFocusOnConnect(void)
{
  VARIANT_BOOL pfGrabFocusOnConnect;
  this->get_GrabFocusOnConnect((VARIANT_BOOL*)&pfGrabFocusOnConnect);
  return pfGrabFocusOnConnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadBalanceInfo"), DISPID(190));
  TAutoArgs<1> _args;
  _args[1] = pLBInfo /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadBalanceInfo"), DISPID(190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLBInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_LoadBalanceInfo(void)
{
  BSTR pLBInfo;
  this->get_LoadBalanceInfo((BSTR*)&pLBInfo);
  return pLBInfo;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDrives"), DISPID(191));
  TAutoArgs<1> _args;
  _args[1] = pRedirectDrives /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDrives"), DISPID(191));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectDrives /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RedirectDrives(void)
{
  VARIANT_BOOL pRedirectDrives;
  this->get_RedirectDrives((VARIANT_BOOL*)&pRedirectDrives);
  return pRedirectDrives;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPrinters"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = pRedirectPrinters /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPrinters"), DISPID(192));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectPrinters /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RedirectPrinters(void)
{
  VARIANT_BOOL pRedirectPrinters;
  this->get_RedirectPrinters((VARIANT_BOOL*)&pRedirectPrinters);
  return pRedirectPrinters;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPorts"), DISPID(193));
  TAutoArgs<1> _args;
  _args[1] = pRedirectPorts /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPorts"), DISPID(193));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectPorts /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RedirectPorts(void)
{
  VARIANT_BOOL pRedirectPorts;
  this->get_RedirectPorts((VARIANT_BOOL*)&pRedirectPorts);
  return pRedirectPorts;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectSmartCards"), DISPID(194));
  TAutoArgs<1> _args;
  _args[1] = pRedirectSmartCards /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectSmartCards"), DISPID(194));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectSmartCards /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_RedirectSmartCards(void)
{
  VARIANT_BOOL pRedirectSmartCards;
  this->get_RedirectSmartCards((VARIANT_BOOL*)&pRedirectSmartCards);
  return pRedirectSmartCards;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache16BppSize"), DISPID(195));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache16BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache16BppSize"), DISPID(195));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache16BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_BitmapVirtualCache16BppSize(void)
{
  long pBitmapVirtualCache16BppSize;
  this->get_BitmapVirtualCache16BppSize((long*)&pBitmapVirtualCache16BppSize);
  return pBitmapVirtualCache16BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache24BppSize"), DISPID(196));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache24BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache24BppSize"), DISPID(196));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache24BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_BitmapVirtualCache24BppSize(void)
{
  long pBitmapVirtualCache24BppSize;
  this->get_BitmapVirtualCache24BppSize((long*)&pBitmapVirtualCache24BppSize);
  return pBitmapVirtualCache24BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_PerformanceFlags(long pDisableList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PerformanceFlags"), DISPID(200));
  TAutoArgs<1> _args;
  _args[1] = pDisableList /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_PerformanceFlags(long* pDisableList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PerformanceFlags"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableList /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_PerformanceFlags(void)
{
  long pDisableList;
  this->get_PerformanceFlags((long*)&pDisableList);
  return pDisableList;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectWithEndpoint"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyTSPublicKey"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = pfNotify /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyTSPublicKey"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfNotify /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_NotifyTSPublicKey(void)
{
  VARIANT_BOOL pfNotify;
  this->get_NotifyTSPublicKey((VARIANT_BOOL*)&pfNotify);
  return pfNotify;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_Compress(long pcompress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<1> _args;
  _args[1] = pcompress /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_Compress(long* pcompress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcompress /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_Compress(void)
{
  long pcompress;
  this->get_Compress((long*)&pcompress);
  return pcompress;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_BitmapPeristence(long pbitmapPeristence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPeristence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPeristence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_BitmapPeristence(void)
{
  long pbitmapPeristence;
  this->get_BitmapPeristence((long*)&pbitmapPeristence);
  return pbitmapPeristence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<1> _args;
  _args[1] = pallowBackgroundInput /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pallowBackgroundInput /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_allowBackgroundInput(void)
{
  long pallowBackgroundInput;
  this->get_allowBackgroundInput((long*)&pallowBackgroundInput);
  return pallowBackgroundInput;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_KeyBoardLayoutStr(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyBoardLayoutStr"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_PluginDlls(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PluginDlls"), DISPID(170));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_IconFile(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconFile"), DISPID(171));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_IconIndex(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconIndex"), DISPID(172));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<1> _args;
  _args[1] = pContainerHandledFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pContainerHandledFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_ContainerHandledFullScreen(void)
{
  long pContainerHandledFullScreen;
  this->get_ContainerHandledFullScreen((long*)&pContainerHandledFullScreen);
  return pContainerHandledFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::set_DisableRdpdr(long pDisableRdpdr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<1> _args;
  _args[1] = pDisableRdpdr /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableRdpdr /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings7DispT<T>::get_DisableRdpdr(void)
{
  long pDisableRdpdr;
  this->get_DisableRdpdr((long*)&pDisableRdpdr);
  return pDisableRdpdr;
}

// *********************************************************************//
// DispIntf:  IMsRdpClientTransportSettings3
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3D5B21AC-748D-41DE-8F30-E15169586BD4}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayCredSourceCookie(unsigned_long pulProxyCredSourceCookie/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredSourceCookie"), DISPID(226));
  TAutoArgs<1> _args;
  _args[1] = pulProxyCredSourceCookie /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayCredSourceCookie(unsigned_long* pulProxyCredSourceCookie/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredSourceCookie"), DISPID(226));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyCredSourceCookie /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayCredSourceCookie(void)
{
  unsigned_long pulProxyCredSourceCookie;
  this->get_GatewayCredSourceCookie((unsigned_long*)&pulProxyCredSourceCookie);
  return pulProxyCredSourceCookie;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayAuthCookieServerAddr(BSTR pbstrProxyAuthCookieServerAddr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayAuthCookieServerAddr"), DISPID(227));
  TAutoArgs<1> _args;
  _args[1] = pbstrProxyAuthCookieServerAddr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayAuthCookieServerAddr(BSTR* pbstrProxyAuthCookieServerAddr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayAuthCookieServerAddr"), DISPID(227));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrProxyAuthCookieServerAddr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayAuthCookieServerAddr(void)
{
  BSTR pbstrProxyAuthCookieServerAddr;
  this->get_GatewayAuthCookieServerAddr((BSTR*)&pbstrProxyAuthCookieServerAddr);
  return pbstrProxyAuthCookieServerAddr;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayEncryptedAuthCookie(BSTR pbstrEncryptedAuthCookie/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedAuthCookie"), DISPID(228));
  TAutoArgs<1> _args;
  _args[1] = pbstrEncryptedAuthCookie /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayEncryptedAuthCookie(BSTR* pbstrEncryptedAuthCookie/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedAuthCookie"), DISPID(228));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrEncryptedAuthCookie /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayEncryptedAuthCookie(void)
{
  BSTR pbstrEncryptedAuthCookie;
  this->get_GatewayEncryptedAuthCookie((BSTR*)&pbstrEncryptedAuthCookie);
  return pbstrEncryptedAuthCookie;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayEncryptedAuthCookieSize(unsigned_long pulEncryptedAuthCookieSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedAuthCookieSize"), DISPID(229));
  TAutoArgs<1> _args;
  _args[1] = pulEncryptedAuthCookieSize /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayEncryptedAuthCookieSize(unsigned_long* pulEncryptedAuthCookieSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedAuthCookieSize"), DISPID(229));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulEncryptedAuthCookieSize /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayEncryptedAuthCookieSize(void)
{
  unsigned_long pulEncryptedAuthCookieSize;
  this->get_GatewayEncryptedAuthCookieSize((unsigned_long*)&pulEncryptedAuthCookieSize);
  return pulEncryptedAuthCookieSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayAuthLoginPage(BSTR pbstrProxyAuthLoginPage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayAuthLoginPage"), DISPID(230));
  TAutoArgs<1> _args;
  _args[1] = pbstrProxyAuthLoginPage /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayAuthLoginPage(BSTR* pbstrProxyAuthLoginPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayAuthLoginPage"), DISPID(230));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrProxyAuthLoginPage /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayAuthLoginPage(void)
{
  BSTR pbstrProxyAuthLoginPage;
  this->get_GatewayAuthLoginPage((BSTR*)&pbstrProxyAuthLoginPage);
  return pbstrProxyAuthLoginPage;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayCredSharing(unsigned_long pulProxyCredSharing/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredSharing"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pulProxyCredSharing /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayCredSharing(unsigned_long* pulProxyCredSharing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredSharing"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyCredSharing /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayCredSharing(void)
{
  unsigned_long pulProxyCredSharing;
  this->get_GatewayCredSharing((unsigned_long*)&pulProxyCredSharing);
  return pulProxyCredSharing;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayPreAuthRequirement(unsigned_long pulProxyPreAuthRequirement/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayPreAuthRequirement"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = pulProxyPreAuthRequirement /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayPreAuthRequirement(unsigned_long* pulProxyPreAuthRequirement/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayPreAuthRequirement"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyPreAuthRequirement /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayPreAuthRequirement(void)
{
  unsigned_long pulProxyPreAuthRequirement;
  this->get_GatewayPreAuthRequirement((unsigned_long*)&pulProxyPreAuthRequirement);
  return pulProxyPreAuthRequirement;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayPreAuthServerAddr(BSTR pbstrProxyPreAuthServerAddr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayPreAuthServerAddr"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pbstrProxyPreAuthServerAddr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayPreAuthServerAddr(BSTR* pbstrProxyPreAuthServerAddr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayPreAuthServerAddr"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrProxyPreAuthServerAddr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayPreAuthServerAddr(void)
{
  BSTR pbstrProxyPreAuthServerAddr;
  this->get_GatewayPreAuthServerAddr((BSTR*)&pbstrProxyPreAuthServerAddr);
  return pbstrProxyPreAuthServerAddr;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewaySupportUrl(BSTR pbstrProxySupportUrl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewaySupportUrl"), DISPID(219));
  TAutoArgs<1> _args;
  _args[1] = pbstrProxySupportUrl /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewaySupportUrl(BSTR* pbstrProxySupportUrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewaySupportUrl"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrProxySupportUrl /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewaySupportUrl(void)
{
  BSTR pbstrProxySupportUrl;
  this->get_GatewaySupportUrl((BSTR*)&pbstrProxySupportUrl);
  return pbstrProxySupportUrl;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayEncryptedOtpCookie(BSTR pbstrEncryptedOtpCookie/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedOtpCookie"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = pbstrEncryptedOtpCookie /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayEncryptedOtpCookie(BSTR* pbstrEncryptedOtpCookie/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedOtpCookie"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrEncryptedOtpCookie /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayEncryptedOtpCookie(void)
{
  BSTR pbstrEncryptedOtpCookie;
  this->get_GatewayEncryptedOtpCookie((BSTR*)&pbstrEncryptedOtpCookie);
  return pbstrEncryptedOtpCookie;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayEncryptedOtpCookieSize(unsigned_long pulEncryptedOtpCookieSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedOtpCookieSize"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pulEncryptedOtpCookieSize /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayEncryptedOtpCookieSize(unsigned_long* pulEncryptedOtpCookieSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedOtpCookieSize"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulEncryptedOtpCookieSize /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayEncryptedOtpCookieSize(void)
{
  unsigned_long pulEncryptedOtpCookieSize;
  this->get_GatewayEncryptedOtpCookieSize((unsigned_long*)&pulEncryptedOtpCookieSize);
  return pulEncryptedOtpCookieSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayUsername(BSTR pProxyUsername/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUsername"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pProxyUsername /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayUsername(BSTR* pProxyUsername/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUsername"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pProxyUsername /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayUsername(void)
{
  BSTR pProxyUsername;
  this->get_GatewayUsername((BSTR*)&pProxyUsername);
  return pProxyUsername;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayDomain(BSTR pProxyDomain/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayDomain"), DISPID(224));
  TAutoArgs<1> _args;
  _args[1] = pProxyDomain /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayDomain(BSTR* pProxyDomain/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayDomain"), DISPID(224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pProxyDomain /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayDomain(void)
{
  BSTR pProxyDomain;
  this->get_GatewayDomain((BSTR*)&pProxyDomain);
  return pProxyDomain;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayPassword(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayPassword"), DISPID(225));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayHostname(BSTR pProxyHostname/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayHostname"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = pProxyHostname /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayHostname(BSTR* pProxyHostname/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayHostname"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pProxyHostname /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayHostname(void)
{
  BSTR pProxyHostname;
  this->get_GatewayHostname((BSTR*)&pProxyHostname);
  return pProxyHostname;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayUsageMethod(unsigned_long pulProxyUsageMethod/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUsageMethod"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = pulProxyUsageMethod /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayUsageMethod(unsigned_long* pulProxyUsageMethod/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUsageMethod"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyUsageMethod /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayUsageMethod(void)
{
  unsigned_long pulProxyUsageMethod;
  this->get_GatewayUsageMethod((unsigned_long*)&pulProxyUsageMethod);
  return pulProxyUsageMethod;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayProfileUsageMethod(unsigned_long pulProxyProfileUsageMethod/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayProfileUsageMethod"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = pulProxyProfileUsageMethod /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayProfileUsageMethod(unsigned_long* pulProxyProfileUsageMethod/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayProfileUsageMethod"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyProfileUsageMethod /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayProfileUsageMethod(void)
{
  unsigned_long pulProxyProfileUsageMethod;
  this->get_GatewayProfileUsageMethod((unsigned_long*)&pulProxyProfileUsageMethod);
  return pulProxyProfileUsageMethod;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayCredsSource(unsigned_long pulProxyCredsSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredsSource"), DISPID(213));
  TAutoArgs<1> _args;
  _args[1] = pulProxyCredsSource /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredsSource"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyCredsSource /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayCredsSource(void)
{
  unsigned_long pulProxyCredsSource;
  this->get_GatewayCredsSource((unsigned_long*)&pulProxyCredsSource);
  return pulProxyCredsSource;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::set_GatewayUserSelectedCredsSource(unsigned_long pulProxyCredsSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUserSelectedCredsSource"), DISPID(216));
  TAutoArgs<1> _args;
  _args[1] = pulProxyCredsSource /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayUserSelectedCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUserSelectedCredsSource"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyCredsSource /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayUserSelectedCredsSource(void)
{
  unsigned_long pulProxyCredsSource;
  this->get_GatewayUserSelectedCredsSource((unsigned_long*)&pulProxyCredsSource);
  return pulProxyCredsSource;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayIsSupported(long* pfProxyIsSupported/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayIsSupported"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfProxyIsSupported /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayIsSupported(void)
{
  long pfProxyIsSupported;
  this->get_GatewayIsSupported((long*)&pfProxyIsSupported);
  return pfProxyIsSupported;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayDefaultUsageMethod(unsigned_long* pulProxyDefaultUsageMethod/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayDefaultUsageMethod"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyDefaultUsageMethod /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings3DispT<T>::get_GatewayDefaultUsageMethod(void)
{
  unsigned_long pulProxyDefaultUsageMethod;
  this->get_GatewayDefaultUsageMethod((unsigned_long*)&pulProxyDefaultUsageMethod);
  return pulProxyDefaultUsageMethod;
}

// *********************************************************************//
// DispIntf:  IMsRdpClientSecuredSettings2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {25F2CE20-8B1D-4971-A7CD-549DAE201FC0}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettings2DispT<T>::get_PCB(BSTR* bstrPCB/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PCB"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrPCB /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientSecuredSettings2DispT<T>::get_PCB(void)
{
  BSTR bstrPCB;
  this->get_PCB((BSTR*)&bstrPCB);
  return bstrPCB;
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettings2DispT<T>::set_PCB(BSTR bstrPCB/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PCB"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = bstrPCB /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettings2DispT<T>::set_KeyboardHookMode(long pkeyboardHookMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardHookMode"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardHookMode /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettings2DispT<T>::get_KeyboardHookMode(long* pkeyboardHookMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardHookMode"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardHookMode /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientSecuredSettings2DispT<T>::get_KeyboardHookMode(void)
{
  long pkeyboardHookMode;
  this->get_KeyboardHookMode((long*)&pkeyboardHookMode);
  return pkeyboardHookMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettings2DispT<T>::set_AudioRedirectionMode(long pAudioRedirectionMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioRedirectionMode"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pAudioRedirectionMode /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettings2DispT<T>::get_AudioRedirectionMode(long* pAudioRedirectionMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioRedirectionMode"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAudioRedirectionMode /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientSecuredSettings2DispT<T>::get_AudioRedirectionMode(void)
{
  long pAudioRedirectionMode;
  this->get_AudioRedirectionMode((long*)&pAudioRedirectionMode);
  return pAudioRedirectionMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettings2DispT<T>::set_StartProgram(BSTR pStartProgram/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartProgram"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pStartProgram /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettings2DispT<T>::get_StartProgram(BSTR* pStartProgram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartProgram"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pStartProgram /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientSecuredSettings2DispT<T>::get_StartProgram(void)
{
  BSTR pStartProgram;
  this->get_StartProgram((BSTR*)&pStartProgram);
  return pStartProgram;
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettings2DispT<T>::set_WorkDir(BSTR pWorkDir/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WorkDir"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pWorkDir /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettings2DispT<T>::get_WorkDir(BSTR* pWorkDir/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WorkDir"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pWorkDir /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientSecuredSettings2DispT<T>::get_WorkDir(void)
{
  BSTR pWorkDir;
  this->get_WorkDir((BSTR*)&pWorkDir);
  return pWorkDir;
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettings2DispT<T>::set_FullScreen(long pfFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pfFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientSecuredSettings2DispT<T>::get_FullScreen(long* pfFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientSecuredSettings2DispT<T>::get_FullScreen(void)
{
  long pfFullScreen;
  this->get_FullScreen((long*)&pfFullScreen);
  return pfFullScreen;
}

// *********************************************************************//
// DispIntf:  ITSRemoteProgram2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {92C38A7D-241A-418C-9936-099872C9AF20}
// *********************************************************************//
template <class T> HRESULT __fastcall
ITSRemoteProgram2DispT<T>::set_RemoteApplicationName(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteApplicationName"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITSRemoteProgram2DispT<T>::set_RemoteApplicationProgram(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteApplicationProgram"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITSRemoteProgram2DispT<T>::set_RemoteApplicationArgs(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteApplicationArgs"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITSRemoteProgram2DispT<T>::set_RemoteProgramMode(VARIANT_BOOL pvboolRemoteProgramMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgramMode"), DISPID(200));
  TAutoArgs<1> _args;
  _args[1] = pvboolRemoteProgramMode /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITSRemoteProgram2DispT<T>::get_RemoteProgramMode(VARIANT_BOOL* pvboolRemoteProgramMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgramMode"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvboolRemoteProgramMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITSRemoteProgram2DispT<T>::get_RemoteProgramMode(void)
{
  VARIANT_BOOL pvboolRemoteProgramMode;
  this->get_RemoteProgramMode((VARIANT_BOOL*)&pvboolRemoteProgramMode);
  return pvboolRemoteProgramMode;
}

template <class T> HRESULT __fastcall
ITSRemoteProgram2DispT<T>::ServerStartProgram(BSTR bstrExecutablePath/*[in]*/, 
                                              BSTR bstrFilePath/*[in]*/, 
                                              BSTR bstrWorkingDirectory/*[in]*/, 
                                              VARIANT_BOOL vbExpandEnvVarInWorkingDirectoryOnServer/*[in]*/
                                              , BSTR bstrArguments/*[in]*/, 
                                              VARIANT_BOOL vbExpandEnvVarInArgumentsOnServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ServerStartProgram"), DISPID(201));
  TAutoArgs<6> _args;
  _args[1] = bstrExecutablePath /*[VT_BSTR:0]*/;
  _args[2] = bstrFilePath /*[VT_BSTR:0]*/;
  _args[3] = bstrWorkingDirectory /*[VT_BSTR:0]*/;
  _args[4] = vbExpandEnvVarInWorkingDirectoryOnServer /*[VT_BOOL:0]*/;
  _args[5] = bstrArguments /*[VT_BSTR:0]*/;
  _args[6] = vbExpandEnvVarInArgumentsOnServer /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient8
// Interface: IMsRdpClient8
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMsRdpClient8T<T>::SendRemoteAction(Mstsclib_tlb::RemoteSessionActionType actionType/*[in]*/)
{
  return (*this)->SendRemoteAction(actionType);
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient8T<T>::get_AdvancedSettings9(Mstsclib_tlb::IMsRdpClientAdvancedSettings8** ppAdvSettings/*[out,retval]*/)
{
  return (*this)->get_AdvancedSettings9(ppAdvSettings);
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr __fastcall
TCOMIMsRdpClient8T<T>::get_AdvancedSettings9(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr ppAdvSettings;
  OLECHECK(this->get_AdvancedSettings9((Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr*)&ppAdvSettings));
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient8T<T>::Reconnect(unsigned_long ulWidth/*[in]*/, unsigned_long ulHeight/*[in]*/, 
                                 Mstsclib_tlb::ControlReconnectStatus* pReconnectStatus/*[out,retval]*/)
{
  return (*this)->Reconnect(ulWidth, ulHeight, pReconnectStatus);
}

template <class T> Mstsclib_tlb::ControlReconnectStatus __fastcall
TCOMIMsRdpClient8T<T>::Reconnect(unsigned_long ulWidth/*[in]*/, unsigned_long ulHeight/*[in]*/)
{
  Mstsclib_tlb::ControlReconnectStatus pReconnectStatus;
  OLECHECK(this->Reconnect(ulWidth/*[in]*/, ulHeight/*[in]*/, (Mstsclib_tlb::ControlReconnectStatus*)&pReconnectStatus));
  return pReconnectStatus;
}

// *********************************************************************//
// DispIntf:  IMsRdpClient8
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4247E044-9271-43A9-BC49-E2AD9E855D62}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::SendRemoteAction(Mstsclib_tlb::RemoteSessionActionType actionType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendRemoteAction"), DISPID(700));
  TAutoArgs<1> _args;
  _args[1] = (int)actionType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings9(Mstsclib_tlb::IMsRdpClientAdvancedSettings8** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings9"), DISPID(701));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings8**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings9(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr ppAdvSettings;
  this->get_AdvancedSettings9(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::Reconnect(unsigned_long ulWidth/*[in]*/, unsigned_long ulHeight/*[in]*/, 
                                 Mstsclib_tlb::ControlReconnectStatus* pReconnectStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reconnect"), DISPID(702));
  TAutoArgs<2> _args;
  _args[1] = ulWidth /*[VT_UI4:0]*/;
  _args[2] = ulHeight /*[VT_UI4:0]*/;
  return OutRetValSetterPtr((int*)pReconnectStatus /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mstsclib_tlb::ControlReconnectStatus __fastcall
IMsRdpClient8DispT<T>::Reconnect(unsigned_long ulWidth/*[in]*/, unsigned_long ulHeight/*[in]*/)
{
  Mstsclib_tlb::ControlReconnectStatus pReconnectStatus;
  this->Reconnect(ulWidth, ulHeight, (Mstsclib_tlb::ControlReconnectStatus*)&pReconnectStatus);
  return pReconnectStatus;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings8(Mstsclib_tlb::IMsRdpClientAdvancedSettings7** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings8"), DISPID(600));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings7**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings8(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr ppAdvSettings;
  this->get_AdvancedSettings8(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_TransportSettings3(Mstsclib_tlb::IMsRdpClientTransportSettings3** ppXportSet3/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings3"), DISPID(601));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings3**)ppXportSet3 /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr __fastcall
IMsRdpClient8DispT<T>::get_TransportSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr ppXportSet3;
  this->get_TransportSettings3(&ppXportSet3);
  return ppXportSet3;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::GetStatusText(unsigned statusCode/*[in]*/, 
                                     BSTR* pBstrStatusText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetStatusText"), DISPID(602));
  TAutoArgs<1> _args;
  _args[1] = statusCode /*[VT_UINT:0]*/;
  return OutRetValSetterPtr(pBstrStatusText /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient8DispT<T>::GetStatusText(unsigned statusCode/*[in]*/)
{
  BSTR pBstrStatusText;
  this->GetStatusText(statusCode, (BSTR*)&pBstrStatusText);
  return pBstrStatusText;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_SecuredSettings3(Mstsclib_tlb::IMsRdpClientSecuredSettings2** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings3"), DISPID(603));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientSecuredSettings2**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr __fastcall
IMsRdpClient8DispT<T>::get_SecuredSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr ppSecuredSettings;
  this->get_SecuredSettings3(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_RemoteProgram2(Mstsclib_tlb::ITSRemoteProgram2** ppRemoteProgram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgram2"), DISPID(604));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::ITSRemoteProgram2**)ppRemoteProgram /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ITSRemoteProgram2Ptr __fastcall
IMsRdpClient8DispT<T>::get_RemoteProgram2(void)
{
  Mstsclib_tlb::ITSRemoteProgram2Ptr ppRemoteProgram;
  this->get_RemoteProgram2(&ppRemoteProgram);
  return ppRemoteProgram;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings7(Mstsclib_tlb::IMsRdpClientAdvancedSettings6** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings7"), DISPID(507));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings6**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings7(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr ppAdvSettings;
  this->get_AdvancedSettings7(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_TransportSettings2(Mstsclib_tlb::IMsRdpClientTransportSettings2** ppXportSet2/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings2"), DISPID(506));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings2**)ppXportSet2 /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr __fastcall
IMsRdpClient8DispT<T>::get_TransportSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr ppXportSet2;
  this->get_TransportSettings2(&ppXportSet2);
  return ppXportSet2;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_TransportSettings(Mstsclib_tlb::IMsRdpClientTransportSettings** ppXportSet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings"), DISPID(500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings**)ppXportSet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettingsPtr __fastcall
IMsRdpClient8DispT<T>::get_TransportSettings(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettingsPtr ppXportSet;
  this->get_TransportSettings(&ppXportSet);
  return ppXportSet;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings6(Mstsclib_tlb::IMsRdpClientAdvancedSettings5** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings6"), DISPID(502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings5**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings6(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr ppAdvSettings;
  this->get_AdvancedSettings6(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                           unsigned ExtendedDisconnectReason/*[in]*/, 
                                           BSTR* pBstrErrorMsg/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetErrorDescription"), DISPID(503));
  TAutoArgs<2> _args;
  _args[1] = disconnectReason /*[VT_UINT:0]*/;
  _args[2] = ExtendedDisconnectReason /*[VT_UINT:0]*/;
  return OutRetValSetterPtr(pBstrErrorMsg /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient8DispT<T>::GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                           unsigned ExtendedDisconnectReason/*[in]*/)
{
  BSTR pBstrErrorMsg;
  this->GetErrorDescription(disconnectReason, ExtendedDisconnectReason, (BSTR*)&pBstrErrorMsg);
  return pBstrErrorMsg;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_RemoteProgram(Mstsclib_tlb::ITSRemoteProgram** ppRemoteProgram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgram"), DISPID(504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::ITSRemoteProgram**)ppRemoteProgram /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ITSRemoteProgramPtr __fastcall
IMsRdpClient8DispT<T>::get_RemoteProgram(void)
{
  Mstsclib_tlb::ITSRemoteProgramPtr ppRemoteProgram;
  this->get_RemoteProgram(&ppRemoteProgram);
  return ppRemoteProgram;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_MsRdpClientShell(Mstsclib_tlb::IMsRdpClientShell** ppLauncher/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MsRdpClientShell"), DISPID(505));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientShell**)ppLauncher /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientShellPtr __fastcall
IMsRdpClient8DispT<T>::get_MsRdpClientShell(void)
{
  Mstsclib_tlb::IMsRdpClientShellPtr ppLauncher;
  this->get_MsRdpClientShell(&ppLauncher);
  return ppLauncher;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings5"), DISPID(400));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings4**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings5(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr ppAdvSettings;
  this->get_AdvancedSettings5(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings4"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings3**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings4(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr ppAdvSettings;
  this->get_AdvancedSettings4(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings3"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings2**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr ppAdvSettings;
  this->get_AdvancedSettings3(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = pConnectedStatusText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectedStatusText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient8DispT<T>::get_ConnectedStatusText(void)
{
  BSTR pConnectedStatusText;
  this->get_ConnectedStatusText((BSTR*)&pConnectedStatusText);
  return pConnectedStatusText;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::set_ColorDepth(long pcolorDepth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = pcolorDepth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_ColorDepth(long* pcolorDepth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcolorDepth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient8DispT<T>::get_ColorDepth(void)
{
  long pcolorDepth;
  this->get_ColorDepth((long*)&pcolorDepth);
  return pcolorDepth;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings2"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings2(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings2"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall
IMsRdpClient8DispT<T>::get_SecuredSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings2(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedDisconnectReason"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pExtendedDisconnectReason /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall
IMsRdpClient8DispT<T>::get_ExtendedDisconnectReason(void)
{
  Mstsclib_tlb::ExtendedDisconnectReasonCode pExtendedDisconnectReason;
  this->get_ExtendedDisconnectReason((Mstsclib_tlb::ExtendedDisconnectReasonCode*)&pExtendedDisconnectReason);
  return pExtendedDisconnectReason;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pfFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClient8DispT<T>::get_FullScreen(void)
{
  VARIANT_BOOL pfFullScreen;
  this->get_FullScreen((VARIANT_BOOL*)&pfFullScreen);
  return pfFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::SetVirtualChannelOptions(BSTR chanName/*[in]*/, long chanOptions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVirtualChannelOptions"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = chanOptions /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                long* pChanOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVirtualChannelOptions"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pChanOptions /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient8DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/)
{
  long pChanOptions;
  this->GetVirtualChannelOptions(chanName, (long*)&pChanOptions);
  return pChanOptions;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestClose"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pCloseStatus /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mstsclib_tlb::ControlCloseStatus __fastcall
IMsRdpClient8DispT<T>::RequestClose(void)
{
  Mstsclib_tlb::ControlCloseStatus pCloseStatus;
  this->RequestClose((Mstsclib_tlb::ControlCloseStatus*)&pCloseStatus);
  return pCloseStatus;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::set_Server(BSTR pServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pServer /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_Server(BSTR* pServer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pServer /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient8DispT<T>::get_Server(void)
{
  BSTR pServer;
  this->get_Server((BSTR*)&pServer);
  return pServer;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::set_Domain(BSTR pDomain/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pDomain /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_Domain(BSTR* pDomain/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDomain /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient8DispT<T>::get_Domain(void)
{
  BSTR pDomain;
  this->get_Domain((BSTR*)&pDomain);
  return pDomain;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::set_UserName(BSTR pUserName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pUserName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_UserName(BSTR* pUserName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pUserName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient8DispT<T>::get_UserName(void)
{
  BSTR pUserName;
  this->get_UserName((BSTR*)&pUserName);
  return pUserName;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::set_DisconnectedText(BSTR pDisconnectedText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pDisconnectedText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisconnectedText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient8DispT<T>::get_DisconnectedText(void)
{
  BSTR pDisconnectedText;
  this->get_DisconnectedText((BSTR*)&pDisconnectedText);
  return pDisconnectedText;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::set_ConnectingText(BSTR pConnectingText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pConnectingText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectingText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient8DispT<T>::get_ConnectingText(void)
{
  BSTR pConnectingText;
  this->get_ConnectingText((BSTR*)&pConnectingText);
  return pConnectingText;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_Connected(short* pIsConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connected"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIsConnected /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMsRdpClient8DispT<T>::get_Connected(void)
{
  short pIsConnected;
  this->get_Connected((short*)&pIsConnected);
  return pIsConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::set_DesktopWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_DesktopWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient8DispT<T>::get_DesktopWidth(void)
{
  long pVal;
  this->get_DesktopWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::set_DesktopHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_DesktopHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient8DispT<T>::get_DesktopHeight(void)
{
  long pVal;
  this->get_DesktopHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::set_StartConnected(long pfStartConnected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pfStartConnected /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_StartConnected(long* pfStartConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfStartConnected /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient8DispT<T>::get_StartConnected(void)
{
  long pfStartConnected;
  this->get_StartConnected((long*)&pfStartConnected);
  return pfStartConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalScrollBarVisible"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient8DispT<T>::get_HorizontalScrollBarVisible(void)
{
  long pfHScrollVisible;
  this->get_HorizontalScrollBarVisible((long*)&pfHScrollVisible);
  return pfHScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarVisible"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient8DispT<T>::get_VerticalScrollBarVisible(void)
{
  long pfVScrollVisible;
  this->get_VerticalScrollBarVisible((long*)&pfVScrollVisible);
  return pfVScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::set_FullScreenTitle(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreenTitle"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_CipherStrength(long* pCipherStrength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CipherStrength"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCipherStrength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient8DispT<T>::get_CipherStrength(void)
{
  long pCipherStrength;
  this->get_CipherStrength((long*)&pCipherStrength);
  return pCipherStrength;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_Version(BSTR* pVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient8DispT<T>::get_Version(void)
{
  BSTR pVersion;
  this->get_Version((BSTR*)&pVersion);
  return pVersion;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettingsEnabled"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSecuredSettingsEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient8DispT<T>::get_SecuredSettingsEnabled(void)
{
  long pSecuredSettingsEnabled;
  this->get_SecuredSettingsEnabled((long*)&pSecuredSettingsEnabled);
  return pSecuredSettingsEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall
IMsRdpClient8DispT<T>::get_SecuredSettings(void)
{
  Mstsclib_tlb::IMsTscSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings"), DISPID(98));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall
IMsRdpClient8DispT<T>::get_AdvancedSettings(void)
{
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Debugger"), DISPID(99));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscDebug**)ppDebugger /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscDebugPtr __fastcall
IMsRdpClient8DispT<T>::get_Debugger(void)
{
  Mstsclib_tlb::IMsTscDebugPtr ppDebugger;
  this->get_Debugger(&ppDebugger);
  return ppDebugger;
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::Connect()
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(30));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(31));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::CreateVirtualChannels(BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateVirtualChannels"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient8DispT<T>::SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendOnVirtualChannel"), DISPID(34));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = ChanData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMsRdpClientAdvancedSettings8
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {89ACB528-2557-4D16-8625-226A30E97E9A}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_BandwidthDetection(VARIANT_BOOL pfAutodetect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BandwidthDetection"), DISPID(236));
  TAutoArgs<1> _args;
  _args[1] = pfAutodetect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_BandwidthDetection(VARIANT_BOOL* pfAutodetect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BandwidthDetection"), DISPID(236));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfAutodetect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_BandwidthDetection(void)
{
  VARIANT_BOOL pfAutodetect;
  this->get_BandwidthDetection((VARIANT_BOOL*)&pfAutodetect);
  return pfAutodetect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_ClientProtocolSpec(Mstsclib_tlb::ClientSpec pClientMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientProtocolSpec"), DISPID(237));
  TAutoArgs<1> _args;
  _args[1] = (int)pClientMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ClientProtocolSpec(Mstsclib_tlb::ClientSpec* pClientMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientProtocolSpec"), DISPID(237));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pClientMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ClientSpec __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ClientProtocolSpec(void)
{
  Mstsclib_tlb::ClientSpec pClientMode;
  this->get_ClientProtocolSpec((Mstsclib_tlb::ClientSpec*)&pClientMode);
  return pClientMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_AudioCaptureRedirectionMode(VARIANT_BOOL pfRedir/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioCaptureRedirectionMode"), DISPID(228));
  TAutoArgs<1> _args;
  _args[1] = pfRedir /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_AudioCaptureRedirectionMode(VARIANT_BOOL* pfRedir/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioCaptureRedirectionMode"), DISPID(228));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRedir /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_AudioCaptureRedirectionMode(void)
{
  VARIANT_BOOL pfRedir;
  this->get_AudioCaptureRedirectionMode((VARIANT_BOOL*)&pfRedir);
  return pfRedir;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_VideoPlaybackMode(unsigned pVideoPlaybackMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoPlaybackMode"), DISPID(229));
  TAutoArgs<1> _args;
  _args[1] = pVideoPlaybackMode /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_VideoPlaybackMode(unsigned* pVideoPlaybackMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoPlaybackMode"), DISPID(229));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVideoPlaybackMode /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_VideoPlaybackMode(void)
{
  unsigned pVideoPlaybackMode;
  this->get_VideoPlaybackMode((unsigned*)&pVideoPlaybackMode);
  return pVideoPlaybackMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_EnableSuperPan(VARIANT_BOOL pfEnableSuperPan/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableSuperPan"), DISPID(230));
  TAutoArgs<1> _args;
  _args[1] = pfEnableSuperPan /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_EnableSuperPan(VARIANT_BOOL* pfEnableSuperPan/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableSuperPan"), DISPID(230));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnableSuperPan /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_EnableSuperPan(void)
{
  VARIANT_BOOL pfEnableSuperPan;
  this->get_EnableSuperPan((VARIANT_BOOL*)&pfEnableSuperPan);
  return pfEnableSuperPan;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_SuperPanAccelerationFactor(unsigned_long puAccelFactor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SuperPanAccelerationFactor"), DISPID(231));
  TAutoArgs<1> _args;
  _args[1] = puAccelFactor /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_SuperPanAccelerationFactor(unsigned_long* puAccelFactor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SuperPanAccelerationFactor"), DISPID(231));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(puAccelFactor /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_SuperPanAccelerationFactor(void)
{
  unsigned_long puAccelFactor;
  this->get_SuperPanAccelerationFactor((unsigned_long*)&puAccelFactor);
  return puAccelFactor;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_NegotiateSecurityLayer(VARIANT_BOOL pfNegotiate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NegotiateSecurityLayer"), DISPID(232));
  TAutoArgs<1> _args;
  _args[1] = pfNegotiate /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_NegotiateSecurityLayer(VARIANT_BOOL* pfNegotiate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NegotiateSecurityLayer"), DISPID(232));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfNegotiate /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_NegotiateSecurityLayer(void)
{
  VARIANT_BOOL pfNegotiate;
  this->get_NegotiateSecurityLayer((VARIANT_BOOL*)&pfNegotiate);
  return pfNegotiate;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_AudioQualityMode(unsigned pAudioQualityMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioQualityMode"), DISPID(233));
  TAutoArgs<1> _args;
  _args[1] = pAudioQualityMode /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_AudioQualityMode(unsigned* pAudioQualityMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioQualityMode"), DISPID(233));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAudioQualityMode /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_AudioQualityMode(void)
{
  unsigned pAudioQualityMode;
  this->get_AudioQualityMode((unsigned*)&pAudioQualityMode);
  return pAudioQualityMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_RedirectDirectX(VARIANT_BOOL pfRedirectDirectX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDirectX"), DISPID(234));
  TAutoArgs<1> _args;
  _args[1] = pfRedirectDirectX /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RedirectDirectX(VARIANT_BOOL* pfRedirectDirectX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDirectX"), DISPID(234));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRedirectDirectX /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RedirectDirectX(void)
{
  VARIANT_BOOL pfRedirectDirectX;
  this->get_RedirectDirectX((VARIANT_BOOL*)&pfRedirectDirectX);
  return pfRedirectDirectX;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_NetworkConnectionType(unsigned pConnectionType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NetworkConnectionType"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = pConnectionType /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_NetworkConnectionType(unsigned* pConnectionType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NetworkConnectionType"), DISPID(235));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectionType /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_NetworkConnectionType(void)
{
  unsigned pConnectionType;
  this->get_NetworkConnectionType((unsigned*)&pConnectionType);
  return pConnectionType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_RelativeMouseMode(VARIANT_BOOL pfRelativeMouseMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelativeMouseMode"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pfRelativeMouseMode /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RelativeMouseMode(VARIANT_BOOL* pfRelativeMouseMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RelativeMouseMode"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRelativeMouseMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RelativeMouseMode(void)
{
  VARIANT_BOOL pfRelativeMouseMode;
  this->get_RelativeMouseMode((VARIANT_BOOL*)&pfRelativeMouseMode);
  return pfRelativeMouseMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_AuthenticationServiceClass(BSTR* pbstrAuthServiceClass/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationServiceClass"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrAuthServiceClass /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_AuthenticationServiceClass(void)
{
  BSTR pbstrAuthServiceClass;
  this->get_AuthenticationServiceClass((BSTR*)&pbstrAuthServiceClass);
  return pbstrAuthServiceClass;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_AuthenticationServiceClass(BSTR pbstrAuthServiceClass/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationServiceClass"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pbstrAuthServiceClass /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_PCB(BSTR* bstrPCB/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PCB"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrPCB /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_PCB(void)
{
  BSTR bstrPCB;
  this->get_PCB((BSTR*)&bstrPCB);
  return bstrPCB;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_PCB(BSTR bstrPCB/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PCB"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = bstrPCB /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_HotKeyFocusReleaseLeft(long HotKeyFocusReleaseLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFocusReleaseLeft"), DISPID(224));
  TAutoArgs<1> _args;
  _args[1] = HotKeyFocusReleaseLeft /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyFocusReleaseLeft(long* HotKeyFocusReleaseLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFocusReleaseLeft"), DISPID(224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HotKeyFocusReleaseLeft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyFocusReleaseLeft(void)
{
  long HotKeyFocusReleaseLeft;
  this->get_HotKeyFocusReleaseLeft((long*)&HotKeyFocusReleaseLeft);
  return HotKeyFocusReleaseLeft;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_HotKeyFocusReleaseRight(long HotKeyFocusReleaseRight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFocusReleaseRight"), DISPID(225));
  TAutoArgs<1> _args;
  _args[1] = HotKeyFocusReleaseRight /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyFocusReleaseRight(long* HotKeyFocusReleaseRight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFocusReleaseRight"), DISPID(225));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(HotKeyFocusReleaseRight /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyFocusReleaseRight(void)
{
  long HotKeyFocusReleaseRight;
  this->get_HotKeyFocusReleaseRight((long*)&HotKeyFocusReleaseRight);
  return HotKeyFocusReleaseRight;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_EnableCredSspSupport(VARIANT_BOOL pfEnableSupport/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableCredSspSupport"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pfEnableSupport /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_EnableCredSspSupport(VARIANT_BOOL* pfEnableSupport/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableCredSspSupport"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnableSupport /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_EnableCredSspSupport(void)
{
  VARIANT_BOOL pfEnableSupport;
  this->get_EnableCredSspSupport((VARIANT_BOOL*)&pfEnableSupport);
  return pfEnableSupport;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_AuthenticationType(unsigned* puiAuthType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationType"), DISPID(226));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(puiAuthType /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_AuthenticationType(void)
{
  unsigned puiAuthType;
  this->get_AuthenticationType((unsigned*)&puiAuthType);
  return puiAuthType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_ConnectToAdministerServer(VARIANT_BOOL pConnectToAdministerServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToAdministerServer"), DISPID(227));
  TAutoArgs<1> _args;
  _args[1] = pConnectToAdministerServer /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ConnectToAdministerServer(VARIANT_BOOL* pConnectToAdministerServer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToAdministerServer"), DISPID(227));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectToAdministerServer /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ConnectToAdministerServer(void)
{
  VARIANT_BOOL pConnectToAdministerServer;
  this->get_ConnectToAdministerServer((VARIANT_BOOL*)&pConnectToAdministerServer);
  return pConnectToAdministerServer;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_RedirectClipboard(VARIANT_BOOL pfRedirectClipboard/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectClipboard"), DISPID(213));
  TAutoArgs<1> _args;
  _args[1] = pfRedirectClipboard /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RedirectClipboard(VARIANT_BOOL* pfRedirectClipboard/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectClipboard"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRedirectClipboard /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RedirectClipboard(void)
{
  VARIANT_BOOL pfRedirectClipboard;
  this->get_RedirectClipboard((VARIANT_BOOL*)&pfRedirectClipboard);
  return pfRedirectClipboard;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_AudioRedirectionMode(unsigned puiAudioRedirectionMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioRedirectionMode"), DISPID(215));
  TAutoArgs<1> _args;
  _args[1] = puiAudioRedirectionMode /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_AudioRedirectionMode(unsigned* puiAudioRedirectionMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioRedirectionMode"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(puiAudioRedirectionMode /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_AudioRedirectionMode(void)
{
  unsigned puiAudioRedirectionMode;
  this->get_AudioRedirectionMode((unsigned*)&puiAudioRedirectionMode);
  return puiAudioRedirectionMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_ConnectionBarShowPinButton(VARIANT_BOOL pfShowPin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowPinButton"), DISPID(216));
  TAutoArgs<1> _args;
  _args[1] = pfShowPin /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ConnectionBarShowPinButton(VARIANT_BOOL* pfShowPin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowPinButton"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowPin /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ConnectionBarShowPinButton(void)
{
  VARIANT_BOOL pfShowPin;
  this->get_ConnectionBarShowPinButton((VARIANT_BOOL*)&pfShowPin);
  return pfShowPin;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_PublicMode(VARIANT_BOOL pfPublicMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PublicMode"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = pfPublicMode /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_PublicMode(VARIANT_BOOL* pfPublicMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PublicMode"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfPublicMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_PublicMode(void)
{
  VARIANT_BOOL pfPublicMode;
  this->get_PublicMode((VARIANT_BOOL*)&pfPublicMode);
  return pfPublicMode;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_RedirectDevices(VARIANT_BOOL pfRedirectPnPDevices/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDevices"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pfRedirectPnPDevices /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RedirectDevices(VARIANT_BOOL* pfRedirectPnPDevices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDevices"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRedirectPnPDevices /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RedirectDevices(void)
{
  VARIANT_BOOL pfRedirectPnPDevices;
  this->get_RedirectDevices((VARIANT_BOOL*)&pfRedirectPnPDevices);
  return pfRedirectPnPDevices;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_RedirectPOSDevices(VARIANT_BOOL pfRedirectPOSDevices/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPOSDevices"), DISPID(219));
  TAutoArgs<1> _args;
  _args[1] = pfRedirectPOSDevices /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RedirectPOSDevices(VARIANT_BOOL* pfRedirectPOSDevices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPOSDevices"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfRedirectPOSDevices /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RedirectPOSDevices(void)
{
  VARIANT_BOOL pfRedirectPOSDevices;
  this->get_RedirectPOSDevices((VARIANT_BOOL*)&pfRedirectPOSDevices);
  return pfRedirectPOSDevices;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_BitmapVirtualCache32BppSize(long pBitmapVirtualCache32BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache32BppSize"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache32BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_BitmapVirtualCache32BppSize(long* pBitmapVirtualCache32BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache32BppSize"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache32BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_BitmapVirtualCache32BppSize(void)
{
  long pBitmapVirtualCache32BppSize;
  this->get_BitmapVirtualCache32BppSize((long*)&pBitmapVirtualCache32BppSize);
  return pBitmapVirtualCache32BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_AuthenticationLevel(unsigned puiAuthLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationLevel"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = puiAuthLevel /*[VT_UINT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_AuthenticationLevel(unsigned* puiAuthLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AuthenticationLevel"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(puiAuthLevel /*[VT_UINT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_AuthenticationLevel(void)
{
  unsigned puiAuthLevel;
  this->get_AuthenticationLevel((unsigned*)&puiAuthLevel);
  return puiAuthLevel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_ConnectionBarShowMinimizeButton(VARIANT_BOOL pfShowMinimize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowMinimizeButton"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = pfShowMinimize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ConnectionBarShowMinimizeButton(VARIANT_BOOL* pfShowMinimize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowMinimizeButton"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowMinimize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ConnectionBarShowMinimizeButton(void)
{
  VARIANT_BOOL pfShowMinimize;
  this->get_ConnectionBarShowMinimizeButton((VARIANT_BOOL*)&pfShowMinimize);
  return pfShowMinimize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_ConnectionBarShowRestoreButton(VARIANT_BOOL pfShowRestore/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowRestoreButton"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = pfShowRestore /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ConnectionBarShowRestoreButton(VARIANT_BOOL* pfShowRestore/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionBarShowRestoreButton"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowRestore /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ConnectionBarShowRestoreButton(void)
{
  VARIANT_BOOL pfShowRestore;
  this->get_ConnectionBarShowRestoreButton((VARIANT_BOOL*)&pfShowRestore);
  return pfShowRestore;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_CanAutoReconnect(VARIANT_BOOL* pfCanAutoReconnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanAutoReconnect"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfCanAutoReconnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_CanAutoReconnect(void)
{
  VARIANT_BOOL pfCanAutoReconnect;
  this->get_CanAutoReconnect((VARIANT_BOOL*)&pfCanAutoReconnect);
  return pfCanAutoReconnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_EnableAutoReconnect(VARIANT_BOOL pfEnableAutoReconnect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableAutoReconnect"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = pfEnableAutoReconnect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_EnableAutoReconnect(VARIANT_BOOL* pfEnableAutoReconnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableAutoReconnect"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnableAutoReconnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_EnableAutoReconnect(void)
{
  VARIANT_BOOL pfEnableAutoReconnect;
  this->get_EnableAutoReconnect((VARIANT_BOOL*)&pfEnableAutoReconnect);
  return pfEnableAutoReconnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_MaxReconnectAttempts(long pMaxReconnectAttempts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxReconnectAttempts"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = pMaxReconnectAttempts /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_MaxReconnectAttempts(long* pMaxReconnectAttempts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxReconnectAttempts"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMaxReconnectAttempts /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_MaxReconnectAttempts(void)
{
  long pMaxReconnectAttempts;
  this->get_MaxReconnectAttempts((long*)&pMaxReconnectAttempts);
  return pMaxReconnectAttempts;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_SmoothScroll(long psmoothScroll/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothScroll"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = psmoothScroll /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_SmoothScroll(long* psmoothScroll/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmoothScroll"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psmoothScroll /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_SmoothScroll(void)
{
  long psmoothScroll;
  this->get_SmoothScroll((long*)&psmoothScroll);
  return psmoothScroll;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_AcceleratorPassthrough(long pacceleratorPassthrough/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorPassthrough"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pacceleratorPassthrough /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_AcceleratorPassthrough(long* pacceleratorPassthrough/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AcceleratorPassthrough"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pacceleratorPassthrough /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_AcceleratorPassthrough(void)
{
  long pacceleratorPassthrough;
  this->get_AcceleratorPassthrough((long*)&pacceleratorPassthrough);
  return pacceleratorPassthrough;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_ShadowBitmap(long pshadowBitmap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShadowBitmap"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pshadowBitmap /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ShadowBitmap(long* pshadowBitmap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShadowBitmap"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pshadowBitmap /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ShadowBitmap(void)
{
  long pshadowBitmap;
  this->get_ShadowBitmap((long*)&pshadowBitmap);
  return pshadowBitmap;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_TransportType(long ptransportType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportType"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = ptransportType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_TransportType(long* ptransportType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportType"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptransportType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_TransportType(void)
{
  long ptransportType;
  this->get_TransportType((long*)&ptransportType);
  return ptransportType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_SasSequence(long psasSequence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SasSequence"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = psasSequence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_SasSequence(long* psasSequence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SasSequence"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psasSequence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_SasSequence(void)
{
  long psasSequence;
  this->get_SasSequence((long*)&psasSequence);
  return psasSequence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_EncryptionEnabled(long pencryptionEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncryptionEnabled"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pencryptionEnabled /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_EncryptionEnabled(long* pencryptionEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EncryptionEnabled"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pencryptionEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_EncryptionEnabled(void)
{
  long pencryptionEnabled;
  this->get_EncryptionEnabled((long*)&pencryptionEnabled);
  return pencryptionEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_DedicatedTerminal(long pdedicatedTerminal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DedicatedTerminal"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = pdedicatedTerminal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_DedicatedTerminal(long* pdedicatedTerminal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DedicatedTerminal"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdedicatedTerminal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_DedicatedTerminal(void)
{
  long pdedicatedTerminal;
  this->get_DedicatedTerminal((long*)&pdedicatedTerminal);
  return pdedicatedTerminal;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_RDPPort(long prdpPort/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RDPPort"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = prdpPort /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RDPPort(long* prdpPort/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RDPPort"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prdpPort /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RDPPort(void)
{
  long prdpPort;
  this->get_RDPPort((long*)&prdpPort);
  return prdpPort;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_EnableMouse(long penableMouse/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableMouse"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = penableMouse /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_EnableMouse(long* penableMouse/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableMouse"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(penableMouse /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_EnableMouse(void)
{
  long penableMouse;
  this->get_EnableMouse((long*)&penableMouse);
  return penableMouse;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_DisableCtrlAltDel(long pdisableCtrlAltDel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableCtrlAltDel"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = pdisableCtrlAltDel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_DisableCtrlAltDel(long* pdisableCtrlAltDel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableCtrlAltDel"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdisableCtrlAltDel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_DisableCtrlAltDel(void)
{
  long pdisableCtrlAltDel;
  this->get_DisableCtrlAltDel((long*)&pdisableCtrlAltDel);
  return pdisableCtrlAltDel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_EnableWindowsKey(long penableWindowsKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableWindowsKey"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = penableWindowsKey /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_EnableWindowsKey(long* penableWindowsKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableWindowsKey"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(penableWindowsKey /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_EnableWindowsKey(void)
{
  long penableWindowsKey;
  this->get_EnableWindowsKey((long*)&penableWindowsKey);
  return penableWindowsKey;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_DoubleClickDetect(long pdoubleClickDetect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleClickDetect"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pdoubleClickDetect /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_DoubleClickDetect(long* pdoubleClickDetect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleClickDetect"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdoubleClickDetect /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_DoubleClickDetect(void)
{
  long pdoubleClickDetect;
  this->get_DoubleClickDetect((long*)&pdoubleClickDetect);
  return pdoubleClickDetect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_MaximizeShell(long pmaximizeShell/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximizeShell"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pmaximizeShell /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_MaximizeShell(long* pmaximizeShell/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximizeShell"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmaximizeShell /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_MaximizeShell(void)
{
  long pmaximizeShell;
  this->get_MaximizeShell((long*)&pmaximizeShell);
  return pmaximizeShell;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_HotKeyFullScreen(long photKeyFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFullScreen"), DISPID(114));
  TAutoArgs<1> _args;
  _args[1] = photKeyFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyFullScreen(long* photKeyFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyFullScreen"), DISPID(114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyFullScreen(void)
{
  long photKeyFullScreen;
  this->get_HotKeyFullScreen((long*)&photKeyFullScreen);
  return photKeyFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_HotKeyCtrlEsc(long photKeyCtrlEsc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlEsc"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = photKeyCtrlEsc /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyCtrlEsc(long* photKeyCtrlEsc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlEsc"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyCtrlEsc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyCtrlEsc(void)
{
  long photKeyCtrlEsc;
  this->get_HotKeyCtrlEsc((long*)&photKeyCtrlEsc);
  return photKeyCtrlEsc;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_HotKeyAltEsc(long photKeyAltEsc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltEsc"), DISPID(116));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltEsc /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyAltEsc(long* photKeyAltEsc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltEsc"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltEsc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyAltEsc(void)
{
  long photKeyAltEsc;
  this->get_HotKeyAltEsc((long*)&photKeyAltEsc);
  return photKeyAltEsc;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_HotKeyAltTab(long photKeyAltTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltTab"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltTab /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyAltTab(long* photKeyAltTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltTab"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltTab /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyAltTab(void)
{
  long photKeyAltTab;
  this->get_HotKeyAltTab((long*)&photKeyAltTab);
  return photKeyAltTab;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_HotKeyAltShiftTab(long photKeyAltShiftTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltShiftTab"), DISPID(118));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltShiftTab /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyAltShiftTab(long* photKeyAltShiftTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltShiftTab"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltShiftTab /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyAltShiftTab(void)
{
  long photKeyAltShiftTab;
  this->get_HotKeyAltShiftTab((long*)&photKeyAltShiftTab);
  return photKeyAltShiftTab;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_HotKeyAltSpace(long photKeyAltSpace/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltSpace"), DISPID(119));
  TAutoArgs<1> _args;
  _args[1] = photKeyAltSpace /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyAltSpace(long* photKeyAltSpace/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyAltSpace"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyAltSpace /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyAltSpace(void)
{
  long photKeyAltSpace;
  this->get_HotKeyAltSpace((long*)&photKeyAltSpace);
  return photKeyAltSpace;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_HotKeyCtrlAltDel(long photKeyCtrlAltDel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlAltDel"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = photKeyCtrlAltDel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyCtrlAltDel(long* photKeyCtrlAltDel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotKeyCtrlAltDel"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(photKeyCtrlAltDel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_HotKeyCtrlAltDel(void)
{
  long photKeyCtrlAltDel;
  this->get_HotKeyCtrlAltDel((long*)&photKeyCtrlAltDel);
  return photKeyCtrlAltDel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_orderDrawThreshold(long porderDrawThreshold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderDrawThreshold"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = porderDrawThreshold /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_orderDrawThreshold(long* porderDrawThreshold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("orderDrawThreshold"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(porderDrawThreshold /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_orderDrawThreshold(void)
{
  long porderDrawThreshold;
  this->get_orderDrawThreshold((long*)&porderDrawThreshold);
  return porderDrawThreshold;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_BitmapCacheSize(long pbitmapCacheSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheSize"), DISPID(124));
  TAutoArgs<1> _args;
  _args[1] = pbitmapCacheSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_BitmapCacheSize(long* pbitmapCacheSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapCacheSize"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapCacheSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_BitmapCacheSize(void)
{
  long pbitmapCacheSize;
  this->get_BitmapCacheSize((long*)&pbitmapCacheSize);
  return pbitmapCacheSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_BitmapVirtualCacheSize(long pbitmapVirtualCacheSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCacheSize"), DISPID(125));
  TAutoArgs<1> _args;
  _args[1] = pbitmapVirtualCacheSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_BitmapVirtualCacheSize(long* pbitmapVirtualCacheSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCacheSize"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapVirtualCacheSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_BitmapVirtualCacheSize(void)
{
  long pbitmapVirtualCacheSize;
  this->get_BitmapVirtualCacheSize((long*)&pbitmapVirtualCacheSize);
  return pbitmapVirtualCacheSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_ScaleBitmapCachesByBPP(long pbScale/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleBitmapCachesByBPP"), DISPID(175));
  TAutoArgs<1> _args;
  _args[1] = pbScale /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ScaleBitmapCachesByBPP(long* pbScale/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleBitmapCachesByBPP"), DISPID(175));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbScale /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ScaleBitmapCachesByBPP(void)
{
  long pbScale;
  this->get_ScaleBitmapCachesByBPP((long*)&pbScale);
  return pbScale;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_NumBitmapCaches(long pnumBitmapCaches/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumBitmapCaches"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = pnumBitmapCaches /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_NumBitmapCaches(long* pnumBitmapCaches/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumBitmapCaches"), DISPID(126));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnumBitmapCaches /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_NumBitmapCaches(void)
{
  long pnumBitmapCaches;
  this->get_NumBitmapCaches((long*)&pnumBitmapCaches);
  return pnumBitmapCaches;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_CachePersistenceActive(long pcachePersistenceActive/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CachePersistenceActive"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = pcachePersistenceActive /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_CachePersistenceActive(long* pcachePersistenceActive/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CachePersistenceActive"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcachePersistenceActive /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_CachePersistenceActive(void)
{
  long pcachePersistenceActive;
  this->get_CachePersistenceActive((long*)&pcachePersistenceActive);
  return pcachePersistenceActive;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_PersistCacheDirectory(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PersistCacheDirectory"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_brushSupportLevel(long pbrushSupportLevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("brushSupportLevel"), DISPID(156));
  TAutoArgs<1> _args;
  _args[1] = pbrushSupportLevel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_brushSupportLevel(long* pbrushSupportLevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("brushSupportLevel"), DISPID(156));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbrushSupportLevel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_brushSupportLevel(void)
{
  long pbrushSupportLevel;
  this->get_brushSupportLevel((long*)&pbrushSupportLevel);
  return pbrushSupportLevel;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_minInputSendInterval(long pminInputSendInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("minInputSendInterval"), DISPID(157));
  TAutoArgs<1> _args;
  _args[1] = pminInputSendInterval /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_minInputSendInterval(long* pminInputSendInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("minInputSendInterval"), DISPID(157));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pminInputSendInterval /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_minInputSendInterval(void)
{
  long pminInputSendInterval;
  this->get_minInputSendInterval((long*)&pminInputSendInterval);
  return pminInputSendInterval;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_InputEventsAtOnce(long pinputEventsAtOnce/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputEventsAtOnce"), DISPID(158));
  TAutoArgs<1> _args;
  _args[1] = pinputEventsAtOnce /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_InputEventsAtOnce(long* pinputEventsAtOnce/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputEventsAtOnce"), DISPID(158));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pinputEventsAtOnce /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_InputEventsAtOnce(void)
{
  long pinputEventsAtOnce;
  this->get_InputEventsAtOnce((long*)&pinputEventsAtOnce);
  return pinputEventsAtOnce;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_maxEventCount(long pmaxEventCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxEventCount"), DISPID(159));
  TAutoArgs<1> _args;
  _args[1] = pmaxEventCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_maxEventCount(long* pmaxEventCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("maxEventCount"), DISPID(159));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pmaxEventCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_maxEventCount(void)
{
  long pmaxEventCount;
  this->get_maxEventCount((long*)&pmaxEventCount);
  return pmaxEventCount;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_keepAliveInterval(long pkeepAliveInterval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("keepAliveInterval"), DISPID(160));
  TAutoArgs<1> _args;
  _args[1] = pkeepAliveInterval /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_keepAliveInterval(long* pkeepAliveInterval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("keepAliveInterval"), DISPID(160));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeepAliveInterval /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_keepAliveInterval(void)
{
  long pkeepAliveInterval;
  this->get_keepAliveInterval((long*)&pkeepAliveInterval);
  return pkeepAliveInterval;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_shutdownTimeout(long pshutdownTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("shutdownTimeout"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pshutdownTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_shutdownTimeout(long* pshutdownTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("shutdownTimeout"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pshutdownTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_shutdownTimeout(void)
{
  long pshutdownTimeout;
  this->get_shutdownTimeout((long*)&pshutdownTimeout);
  return pshutdownTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_overallConnectionTimeout(long poverallConnectionTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("overallConnectionTimeout"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = poverallConnectionTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_overallConnectionTimeout(long* poverallConnectionTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("overallConnectionTimeout"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(poverallConnectionTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_overallConnectionTimeout(void)
{
  long poverallConnectionTimeout;
  this->get_overallConnectionTimeout((long*)&poverallConnectionTimeout);
  return poverallConnectionTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_singleConnectionTimeout(long psingleConnectionTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("singleConnectionTimeout"), DISPID(165));
  TAutoArgs<1> _args;
  _args[1] = psingleConnectionTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_singleConnectionTimeout(long* psingleConnectionTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("singleConnectionTimeout"), DISPID(165));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psingleConnectionTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_singleConnectionTimeout(void)
{
  long psingleConnectionTimeout;
  this->get_singleConnectionTimeout((long*)&psingleConnectionTimeout);
  return psingleConnectionTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_KeyboardType(long pkeyboardType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardType"), DISPID(166));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_KeyboardType(long* pkeyboardType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardType"), DISPID(166));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_KeyboardType(void)
{
  long pkeyboardType;
  this->get_KeyboardType((long*)&pkeyboardType);
  return pkeyboardType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_KeyboardSubType(long pkeyboardSubType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardSubType"), DISPID(167));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardSubType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_KeyboardSubType(long* pkeyboardSubType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardSubType"), DISPID(167));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardSubType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_KeyboardSubType(void)
{
  long pkeyboardSubType;
  this->get_KeyboardSubType((long*)&pkeyboardSubType);
  return pkeyboardSubType;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_KeyboardFunctionKey(long pkeyboardFunctionKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardFunctionKey"), DISPID(168));
  TAutoArgs<1> _args;
  _args[1] = pkeyboardFunctionKey /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_KeyboardFunctionKey(long* pkeyboardFunctionKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardFunctionKey"), DISPID(168));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pkeyboardFunctionKey /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_KeyboardFunctionKey(void)
{
  long pkeyboardFunctionKey;
  this->get_KeyboardFunctionKey((long*)&pkeyboardFunctionKey);
  return pkeyboardFunctionKey;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_WinceFixedPalette(long pwinceFixedPalette/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WinceFixedPalette"), DISPID(169));
  TAutoArgs<1> _args;
  _args[1] = pwinceFixedPalette /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_WinceFixedPalette(long* pwinceFixedPalette/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WinceFixedPalette"), DISPID(169));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pwinceFixedPalette /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_WinceFixedPalette(void)
{
  long pwinceFixedPalette;
  this->get_WinceFixedPalette((long*)&pwinceFixedPalette);
  return pwinceFixedPalette;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_ConnectToServerConsole(VARIANT_BOOL pConnectToConsole/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToServerConsole"), DISPID(178));
  TAutoArgs<1> _args;
  _args[1] = pConnectToConsole /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ConnectToServerConsole(VARIANT_BOOL* pConnectToConsole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectToServerConsole"), DISPID(178));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectToConsole /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ConnectToServerConsole(void)
{
  VARIANT_BOOL pConnectToConsole;
  this->get_ConnectToServerConsole((VARIANT_BOOL*)&pConnectToConsole);
  return pConnectToConsole;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_BitmapPersistence(long pbitmapPersistence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPersistence"), DISPID(182));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPersistence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_BitmapPersistence(long* pbitmapPersistence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPersistence"), DISPID(182));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPersistence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_BitmapPersistence(void)
{
  long pbitmapPersistence;
  this->get_BitmapPersistence((long*)&pbitmapPersistence);
  return pbitmapPersistence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_MinutesToIdleTimeout(long pminutesToIdleTimeout/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinutesToIdleTimeout"), DISPID(183));
  TAutoArgs<1> _args;
  _args[1] = pminutesToIdleTimeout /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_MinutesToIdleTimeout(long* pminutesToIdleTimeout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinutesToIdleTimeout"), DISPID(183));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pminutesToIdleTimeout /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_MinutesToIdleTimeout(void)
{
  long pminutesToIdleTimeout;
  this->get_MinutesToIdleTimeout((long*)&pminutesToIdleTimeout);
  return pminutesToIdleTimeout;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_SmartSizing(VARIANT_BOOL pfSmartSizing/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmartSizing"), DISPID(184));
  TAutoArgs<1> _args;
  _args[1] = pfSmartSizing /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_SmartSizing(VARIANT_BOOL* pfSmartSizing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmartSizing"), DISPID(184));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfSmartSizing /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_SmartSizing(void)
{
  VARIANT_BOOL pfSmartSizing;
  this->get_SmartSizing((VARIANT_BOOL*)&pfSmartSizing);
  return pfSmartSizing;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_RdpdrLocalPrintingDocName(BSTR pLocalPrintingDocName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrLocalPrintingDocName"), DISPID(185));
  TAutoArgs<1> _args;
  _args[1] = pLocalPrintingDocName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RdpdrLocalPrintingDocName(BSTR* pLocalPrintingDocName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrLocalPrintingDocName"), DISPID(185));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLocalPrintingDocName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RdpdrLocalPrintingDocName(void)
{
  BSTR pLocalPrintingDocName;
  this->get_RdpdrLocalPrintingDocName((BSTR*)&pLocalPrintingDocName);
  return pLocalPrintingDocName;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_RdpdrClipCleanTempDirString(BSTR clipCleanTempDirString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipCleanTempDirString"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = clipCleanTempDirString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RdpdrClipCleanTempDirString(BSTR* clipCleanTempDirString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipCleanTempDirString"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clipCleanTempDirString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RdpdrClipCleanTempDirString(void)
{
  BSTR clipCleanTempDirString;
  this->get_RdpdrClipCleanTempDirString((BSTR*)&clipCleanTempDirString);
  return clipCleanTempDirString;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_RdpdrClipPasteInfoString(BSTR clipPasteInfoString/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipPasteInfoString"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = clipPasteInfoString /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RdpdrClipPasteInfoString(BSTR* clipPasteInfoString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RdpdrClipPasteInfoString"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(clipPasteInfoString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RdpdrClipPasteInfoString(void)
{
  BSTR clipPasteInfoString;
  this->get_RdpdrClipPasteInfoString((BSTR*)&clipPasteInfoString);
  return clipPasteInfoString;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_ClearTextPassword(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClearTextPassword"), DISPID(186));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_DisplayConnectionBar(VARIANT_BOOL pDisplayConnectionBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayConnectionBar"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = pDisplayConnectionBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_DisplayConnectionBar(VARIANT_BOOL* pDisplayConnectionBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayConnectionBar"), DISPID(187));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisplayConnectionBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_DisplayConnectionBar(void)
{
  VARIANT_BOOL pDisplayConnectionBar;
  this->get_DisplayConnectionBar((VARIANT_BOOL*)&pDisplayConnectionBar);
  return pDisplayConnectionBar;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_PinConnectionBar(VARIANT_BOOL pPinConnectionBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PinConnectionBar"), DISPID(188));
  TAutoArgs<1> _args;
  _args[1] = pPinConnectionBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_PinConnectionBar(VARIANT_BOOL* pPinConnectionBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PinConnectionBar"), DISPID(188));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pPinConnectionBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_PinConnectionBar(void)
{
  VARIANT_BOOL pPinConnectionBar;
  this->get_PinConnectionBar((VARIANT_BOOL*)&pPinConnectionBar);
  return pPinConnectionBar;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_GrabFocusOnConnect(VARIANT_BOOL pfGrabFocusOnConnect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrabFocusOnConnect"), DISPID(189));
  TAutoArgs<1> _args;
  _args[1] = pfGrabFocusOnConnect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_GrabFocusOnConnect(VARIANT_BOOL* pfGrabFocusOnConnect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrabFocusOnConnect"), DISPID(189));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfGrabFocusOnConnect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_GrabFocusOnConnect(void)
{
  VARIANT_BOOL pfGrabFocusOnConnect;
  this->get_GrabFocusOnConnect((VARIANT_BOOL*)&pfGrabFocusOnConnect);
  return pfGrabFocusOnConnect;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_LoadBalanceInfo(BSTR pLBInfo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadBalanceInfo"), DISPID(190));
  TAutoArgs<1> _args;
  _args[1] = pLBInfo /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_LoadBalanceInfo(BSTR* pLBInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadBalanceInfo"), DISPID(190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLBInfo /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_LoadBalanceInfo(void)
{
  BSTR pLBInfo;
  this->get_LoadBalanceInfo((BSTR*)&pLBInfo);
  return pLBInfo;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_RedirectDrives(VARIANT_BOOL pRedirectDrives/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDrives"), DISPID(191));
  TAutoArgs<1> _args;
  _args[1] = pRedirectDrives /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RedirectDrives(VARIANT_BOOL* pRedirectDrives/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectDrives"), DISPID(191));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectDrives /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RedirectDrives(void)
{
  VARIANT_BOOL pRedirectDrives;
  this->get_RedirectDrives((VARIANT_BOOL*)&pRedirectDrives);
  return pRedirectDrives;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_RedirectPrinters(VARIANT_BOOL pRedirectPrinters/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPrinters"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = pRedirectPrinters /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RedirectPrinters(VARIANT_BOOL* pRedirectPrinters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPrinters"), DISPID(192));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectPrinters /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RedirectPrinters(void)
{
  VARIANT_BOOL pRedirectPrinters;
  this->get_RedirectPrinters((VARIANT_BOOL*)&pRedirectPrinters);
  return pRedirectPrinters;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_RedirectPorts(VARIANT_BOOL pRedirectPorts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPorts"), DISPID(193));
  TAutoArgs<1> _args;
  _args[1] = pRedirectPorts /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RedirectPorts(VARIANT_BOOL* pRedirectPorts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectPorts"), DISPID(193));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectPorts /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RedirectPorts(void)
{
  VARIANT_BOOL pRedirectPorts;
  this->get_RedirectPorts((VARIANT_BOOL*)&pRedirectPorts);
  return pRedirectPorts;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_RedirectSmartCards(VARIANT_BOOL pRedirectSmartCards/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectSmartCards"), DISPID(194));
  TAutoArgs<1> _args;
  _args[1] = pRedirectSmartCards /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RedirectSmartCards(VARIANT_BOOL* pRedirectSmartCards/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RedirectSmartCards"), DISPID(194));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRedirectSmartCards /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_RedirectSmartCards(void)
{
  VARIANT_BOOL pRedirectSmartCards;
  this->get_RedirectSmartCards((VARIANT_BOOL*)&pRedirectSmartCards);
  return pRedirectSmartCards;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_BitmapVirtualCache16BppSize(long pBitmapVirtualCache16BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache16BppSize"), DISPID(195));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache16BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_BitmapVirtualCache16BppSize(long* pBitmapVirtualCache16BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache16BppSize"), DISPID(195));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache16BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_BitmapVirtualCache16BppSize(void)
{
  long pBitmapVirtualCache16BppSize;
  this->get_BitmapVirtualCache16BppSize((long*)&pBitmapVirtualCache16BppSize);
  return pBitmapVirtualCache16BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_BitmapVirtualCache24BppSize(long pBitmapVirtualCache24BppSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache24BppSize"), DISPID(196));
  TAutoArgs<1> _args;
  _args[1] = pBitmapVirtualCache24BppSize /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_BitmapVirtualCache24BppSize(long* pBitmapVirtualCache24BppSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapVirtualCache24BppSize"), DISPID(196));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBitmapVirtualCache24BppSize /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_BitmapVirtualCache24BppSize(void)
{
  long pBitmapVirtualCache24BppSize;
  this->get_BitmapVirtualCache24BppSize((long*)&pBitmapVirtualCache24BppSize);
  return pBitmapVirtualCache24BppSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_PerformanceFlags(long pDisableList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PerformanceFlags"), DISPID(200));
  TAutoArgs<1> _args;
  _args[1] = pDisableList /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_PerformanceFlags(long* pDisableList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PerformanceFlags"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableList /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_PerformanceFlags(void)
{
  long pDisableList;
  this->get_PerformanceFlags((long*)&pDisableList);
  return pDisableList;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_ConnectWithEndpoint(VARIANT* Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectWithEndpoint"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_NotifyTSPublicKey(VARIANT_BOOL pfNotify/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyTSPublicKey"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = pfNotify /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_NotifyTSPublicKey(VARIANT_BOOL* pfNotify/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NotifyTSPublicKey"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfNotify /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_NotifyTSPublicKey(void)
{
  VARIANT_BOOL pfNotify;
  this->get_NotifyTSPublicKey((VARIANT_BOOL*)&pfNotify);
  return pfNotify;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_Compress(long pcompress/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<1> _args;
  _args[1] = pcompress /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_Compress(long* pcompress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Compress"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcompress /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_Compress(void)
{
  long pcompress;
  this->get_Compress((long*)&pcompress);
  return pcompress;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_BitmapPeristence(long pbitmapPeristence/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = pbitmapPeristence /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_BitmapPeristence(long* pbitmapPeristence/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BitmapPeristence"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbitmapPeristence /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_BitmapPeristence(void)
{
  long pbitmapPeristence;
  this->get_BitmapPeristence((long*)&pbitmapPeristence);
  return pbitmapPeristence;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_allowBackgroundInput(long pallowBackgroundInput/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<1> _args;
  _args[1] = pallowBackgroundInput /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_allowBackgroundInput(long* pallowBackgroundInput/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("allowBackgroundInput"), DISPID(161));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pallowBackgroundInput /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_allowBackgroundInput(void)
{
  long pallowBackgroundInput;
  this->get_allowBackgroundInput((long*)&pallowBackgroundInput);
  return pallowBackgroundInput;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_KeyBoardLayoutStr(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyBoardLayoutStr"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_PluginDlls(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PluginDlls"), DISPID(170));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_IconFile(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconFile"), DISPID(171));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_IconIndex(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IconIndex"), DISPID(172));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_ContainerHandledFullScreen(long pContainerHandledFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<1> _args;
  _args[1] = pContainerHandledFullScreen /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ContainerHandledFullScreen(long* pContainerHandledFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContainerHandledFullScreen"), DISPID(173));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pContainerHandledFullScreen /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_ContainerHandledFullScreen(void)
{
  long pContainerHandledFullScreen;
  this->get_ContainerHandledFullScreen((long*)&pContainerHandledFullScreen);
  return pContainerHandledFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::set_DisableRdpdr(long pDisableRdpdr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<1> _args;
  _args[1] = pDisableRdpdr /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_DisableRdpdr(long* pDisableRdpdr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableRdpdr"), DISPID(174));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisableRdpdr /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientAdvancedSettings8DispT<T>::get_DisableRdpdr(void)
{
  long pDisableRdpdr;
  this->get_DisableRdpdr((long*)&pDisableRdpdr);
  return pDisableRdpdr;
}

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient9
// Interface: IMsRdpClient9
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMsRdpClient9T<T>::get_TransportSettings4(Mstsclib_tlb::IMsRdpClientTransportSettings4** ppXportSet4/*[out,retval]*/)
{
  return (*this)->get_TransportSettings4(ppXportSet4);
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettings4Ptr __fastcall
TCOMIMsRdpClient9T<T>::get_TransportSettings4(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettings4Ptr ppXportSet4;
  OLECHECK(this->get_TransportSettings4((Mstsclib_tlb::IMsRdpClientTransportSettings4Ptr*)&ppXportSet4));
  return ppXportSet4;
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient9T<T>::SyncSessionDisplaySettings(void)
{
  return (*this)->SyncSessionDisplaySettings();
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient9T<T>::UpdateSessionDisplaySettings(unsigned_long ulDesktopWidth/*[in]*/, 
                                                    unsigned_long ulDesktopHeight/*[in]*/, 
                                                    unsigned_long ulPhysicalWidth/*[in]*/, 
                                                    unsigned_long ulPhysicalHeight/*[in]*/, 
                                                    unsigned_long ulOrientation/*[in]*/, 
                                                    unsigned_long ulDesktopScaleFactor/*[in]*/, 
                                                    unsigned_long ulDeviceScaleFactor/*[in]*/)
{
  return (*this)->UpdateSessionDisplaySettings(ulDesktopWidth, ulDesktopHeight, ulPhysicalWidth, 
                                               ulPhysicalHeight, ulOrientation, ulDesktopScaleFactor, 
                                               ulDeviceScaleFactor);
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient9T<T>::attachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/)
{
  return (*this)->attachEvent(eventName, callback);
}

template <class T> HRESULT __fastcall
TCOMIMsRdpClient9T<T>::detachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/)
{
  return (*this)->detachEvent(eventName, callback);
}

// *********************************************************************//
// DispIntf:  IMsRdpClient9
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {28904001-04B6-436C-A55B-0AF1A0883DC9}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_TransportSettings4(Mstsclib_tlb::IMsRdpClientTransportSettings4** ppXportSet4/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings4"), DISPID(800));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings4**)ppXportSet4 /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettings4Ptr __fastcall
IMsRdpClient9DispT<T>::get_TransportSettings4(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettings4Ptr ppXportSet4;
  this->get_TransportSettings4(&ppXportSet4);
  return ppXportSet4;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::SyncSessionDisplaySettings()
{
  _TDispID _dispid(*this, OLETEXT("SyncSessionDisplaySettings"), DISPID(801));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::UpdateSessionDisplaySettings(unsigned_long ulDesktopWidth/*[in]*/, 
                                                    unsigned_long ulDesktopHeight/*[in]*/, 
                                                    unsigned_long ulPhysicalWidth/*[in]*/, 
                                                    unsigned_long ulPhysicalHeight/*[in]*/, 
                                                    unsigned_long ulOrientation/*[in]*/, 
                                                    unsigned_long ulDesktopScaleFactor/*[in]*/, 
                                                    unsigned_long ulDeviceScaleFactor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateSessionDisplaySettings"), DISPID(802));
  TAutoArgs<7> _args;
  _args[1] = ulDesktopWidth /*[VT_UI4:0]*/;
  _args[2] = ulDesktopHeight /*[VT_UI4:0]*/;
  _args[3] = ulPhysicalWidth /*[VT_UI4:0]*/;
  _args[4] = ulPhysicalHeight /*[VT_UI4:0]*/;
  _args[5] = ulOrientation /*[VT_UI4:0]*/;
  _args[6] = ulDesktopScaleFactor /*[VT_UI4:0]*/;
  _args[7] = ulDeviceScaleFactor /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::attachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("attachEvent"), DISPID(803));
  TAutoArgs<2> _args;
  _args[1] = eventName /*[VT_BSTR:0]*/;
  _args[2] = callback /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::detachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("detachEvent"), DISPID(804));
  TAutoArgs<2> _args;
  _args[1] = eventName /*[VT_BSTR:0]*/;
  _args[2] = callback /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::SendRemoteAction(Mstsclib_tlb::RemoteSessionActionType actionType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendRemoteAction"), DISPID(700));
  TAutoArgs<1> _args;
  _args[1] = (int)actionType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings9(Mstsclib_tlb::IMsRdpClientAdvancedSettings8** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings9"), DISPID(701));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings8**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings9(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr ppAdvSettings;
  this->get_AdvancedSettings9(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::Reconnect(unsigned_long ulWidth/*[in]*/, unsigned_long ulHeight/*[in]*/, 
                                 Mstsclib_tlb::ControlReconnectStatus* pReconnectStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reconnect"), DISPID(702));
  TAutoArgs<2> _args;
  _args[1] = ulWidth /*[VT_UI4:0]*/;
  _args[2] = ulHeight /*[VT_UI4:0]*/;
  return OutRetValSetterPtr((int*)pReconnectStatus /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mstsclib_tlb::ControlReconnectStatus __fastcall
IMsRdpClient9DispT<T>::Reconnect(unsigned_long ulWidth/*[in]*/, unsigned_long ulHeight/*[in]*/)
{
  Mstsclib_tlb::ControlReconnectStatus pReconnectStatus;
  this->Reconnect(ulWidth, ulHeight, (Mstsclib_tlb::ControlReconnectStatus*)&pReconnectStatus);
  return pReconnectStatus;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings8(Mstsclib_tlb::IMsRdpClientAdvancedSettings7** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings8"), DISPID(600));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings7**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings8(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr ppAdvSettings;
  this->get_AdvancedSettings8(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_TransportSettings3(Mstsclib_tlb::IMsRdpClientTransportSettings3** ppXportSet3/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings3"), DISPID(601));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings3**)ppXportSet3 /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr __fastcall
IMsRdpClient9DispT<T>::get_TransportSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr ppXportSet3;
  this->get_TransportSettings3(&ppXportSet3);
  return ppXportSet3;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::GetStatusText(unsigned statusCode/*[in]*/, 
                                     BSTR* pBstrStatusText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetStatusText"), DISPID(602));
  TAutoArgs<1> _args;
  _args[1] = statusCode /*[VT_UINT:0]*/;
  return OutRetValSetterPtr(pBstrStatusText /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient9DispT<T>::GetStatusText(unsigned statusCode/*[in]*/)
{
  BSTR pBstrStatusText;
  this->GetStatusText(statusCode, (BSTR*)&pBstrStatusText);
  return pBstrStatusText;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_SecuredSettings3(Mstsclib_tlb::IMsRdpClientSecuredSettings2** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings3"), DISPID(603));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientSecuredSettings2**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr __fastcall
IMsRdpClient9DispT<T>::get_SecuredSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr ppSecuredSettings;
  this->get_SecuredSettings3(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_RemoteProgram2(Mstsclib_tlb::ITSRemoteProgram2** ppRemoteProgram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgram2"), DISPID(604));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::ITSRemoteProgram2**)ppRemoteProgram /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ITSRemoteProgram2Ptr __fastcall
IMsRdpClient9DispT<T>::get_RemoteProgram2(void)
{
  Mstsclib_tlb::ITSRemoteProgram2Ptr ppRemoteProgram;
  this->get_RemoteProgram2(&ppRemoteProgram);
  return ppRemoteProgram;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings7(Mstsclib_tlb::IMsRdpClientAdvancedSettings6** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings7"), DISPID(507));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings6**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings7(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr ppAdvSettings;
  this->get_AdvancedSettings7(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_TransportSettings2(Mstsclib_tlb::IMsRdpClientTransportSettings2** ppXportSet2/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings2"), DISPID(506));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings2**)ppXportSet2 /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr __fastcall
IMsRdpClient9DispT<T>::get_TransportSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr ppXportSet2;
  this->get_TransportSettings2(&ppXportSet2);
  return ppXportSet2;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_TransportSettings(Mstsclib_tlb::IMsRdpClientTransportSettings** ppXportSet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings"), DISPID(500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings**)ppXportSet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettingsPtr __fastcall
IMsRdpClient9DispT<T>::get_TransportSettings(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettingsPtr ppXportSet;
  this->get_TransportSettings(&ppXportSet);
  return ppXportSet;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings6(Mstsclib_tlb::IMsRdpClientAdvancedSettings5** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings6"), DISPID(502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings5**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings6(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr ppAdvSettings;
  this->get_AdvancedSettings6(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                           unsigned ExtendedDisconnectReason/*[in]*/, 
                                           BSTR* pBstrErrorMsg/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetErrorDescription"), DISPID(503));
  TAutoArgs<2> _args;
  _args[1] = disconnectReason /*[VT_UINT:0]*/;
  _args[2] = ExtendedDisconnectReason /*[VT_UINT:0]*/;
  return OutRetValSetterPtr(pBstrErrorMsg /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient9DispT<T>::GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                           unsigned ExtendedDisconnectReason/*[in]*/)
{
  BSTR pBstrErrorMsg;
  this->GetErrorDescription(disconnectReason, ExtendedDisconnectReason, (BSTR*)&pBstrErrorMsg);
  return pBstrErrorMsg;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_RemoteProgram(Mstsclib_tlb::ITSRemoteProgram** ppRemoteProgram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgram"), DISPID(504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::ITSRemoteProgram**)ppRemoteProgram /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ITSRemoteProgramPtr __fastcall
IMsRdpClient9DispT<T>::get_RemoteProgram(void)
{
  Mstsclib_tlb::ITSRemoteProgramPtr ppRemoteProgram;
  this->get_RemoteProgram(&ppRemoteProgram);
  return ppRemoteProgram;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_MsRdpClientShell(Mstsclib_tlb::IMsRdpClientShell** ppLauncher/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MsRdpClientShell"), DISPID(505));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientShell**)ppLauncher /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientShellPtr __fastcall
IMsRdpClient9DispT<T>::get_MsRdpClientShell(void)
{
  Mstsclib_tlb::IMsRdpClientShellPtr ppLauncher;
  this->get_MsRdpClientShell(&ppLauncher);
  return ppLauncher;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings5"), DISPID(400));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings4**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings5(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr ppAdvSettings;
  this->get_AdvancedSettings5(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings4"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings3**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings4(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr ppAdvSettings;
  this->get_AdvancedSettings4(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings3"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings2**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr ppAdvSettings;
  this->get_AdvancedSettings3(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = pConnectedStatusText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectedStatusText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient9DispT<T>::get_ConnectedStatusText(void)
{
  BSTR pConnectedStatusText;
  this->get_ConnectedStatusText((BSTR*)&pConnectedStatusText);
  return pConnectedStatusText;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::set_ColorDepth(long pcolorDepth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = pcolorDepth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_ColorDepth(long* pcolorDepth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcolorDepth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient9DispT<T>::get_ColorDepth(void)
{
  long pcolorDepth;
  this->get_ColorDepth((long*)&pcolorDepth);
  return pcolorDepth;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings2"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings2(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings2"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall
IMsRdpClient9DispT<T>::get_SecuredSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings2(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedDisconnectReason"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pExtendedDisconnectReason /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall
IMsRdpClient9DispT<T>::get_ExtendedDisconnectReason(void)
{
  Mstsclib_tlb::ExtendedDisconnectReasonCode pExtendedDisconnectReason;
  this->get_ExtendedDisconnectReason((Mstsclib_tlb::ExtendedDisconnectReasonCode*)&pExtendedDisconnectReason);
  return pExtendedDisconnectReason;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pfFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClient9DispT<T>::get_FullScreen(void)
{
  VARIANT_BOOL pfFullScreen;
  this->get_FullScreen((VARIANT_BOOL*)&pfFullScreen);
  return pfFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::SetVirtualChannelOptions(BSTR chanName/*[in]*/, long chanOptions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVirtualChannelOptions"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = chanOptions /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                long* pChanOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVirtualChannelOptions"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pChanOptions /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient9DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/)
{
  long pChanOptions;
  this->GetVirtualChannelOptions(chanName, (long*)&pChanOptions);
  return pChanOptions;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestClose"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pCloseStatus /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mstsclib_tlb::ControlCloseStatus __fastcall
IMsRdpClient9DispT<T>::RequestClose(void)
{
  Mstsclib_tlb::ControlCloseStatus pCloseStatus;
  this->RequestClose((Mstsclib_tlb::ControlCloseStatus*)&pCloseStatus);
  return pCloseStatus;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::set_Server(BSTR pServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pServer /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_Server(BSTR* pServer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pServer /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient9DispT<T>::get_Server(void)
{
  BSTR pServer;
  this->get_Server((BSTR*)&pServer);
  return pServer;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::set_Domain(BSTR pDomain/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pDomain /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_Domain(BSTR* pDomain/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDomain /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient9DispT<T>::get_Domain(void)
{
  BSTR pDomain;
  this->get_Domain((BSTR*)&pDomain);
  return pDomain;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::set_UserName(BSTR pUserName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pUserName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_UserName(BSTR* pUserName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pUserName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient9DispT<T>::get_UserName(void)
{
  BSTR pUserName;
  this->get_UserName((BSTR*)&pUserName);
  return pUserName;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::set_DisconnectedText(BSTR pDisconnectedText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pDisconnectedText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisconnectedText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient9DispT<T>::get_DisconnectedText(void)
{
  BSTR pDisconnectedText;
  this->get_DisconnectedText((BSTR*)&pDisconnectedText);
  return pDisconnectedText;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::set_ConnectingText(BSTR pConnectingText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pConnectingText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectingText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient9DispT<T>::get_ConnectingText(void)
{
  BSTR pConnectingText;
  this->get_ConnectingText((BSTR*)&pConnectingText);
  return pConnectingText;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_Connected(short* pIsConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connected"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIsConnected /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMsRdpClient9DispT<T>::get_Connected(void)
{
  short pIsConnected;
  this->get_Connected((short*)&pIsConnected);
  return pIsConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::set_DesktopWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_DesktopWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient9DispT<T>::get_DesktopWidth(void)
{
  long pVal;
  this->get_DesktopWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::set_DesktopHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_DesktopHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient9DispT<T>::get_DesktopHeight(void)
{
  long pVal;
  this->get_DesktopHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::set_StartConnected(long pfStartConnected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pfStartConnected /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_StartConnected(long* pfStartConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfStartConnected /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient9DispT<T>::get_StartConnected(void)
{
  long pfStartConnected;
  this->get_StartConnected((long*)&pfStartConnected);
  return pfStartConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalScrollBarVisible"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient9DispT<T>::get_HorizontalScrollBarVisible(void)
{
  long pfHScrollVisible;
  this->get_HorizontalScrollBarVisible((long*)&pfHScrollVisible);
  return pfHScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarVisible"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient9DispT<T>::get_VerticalScrollBarVisible(void)
{
  long pfVScrollVisible;
  this->get_VerticalScrollBarVisible((long*)&pfVScrollVisible);
  return pfVScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::set_FullScreenTitle(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreenTitle"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_CipherStrength(long* pCipherStrength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CipherStrength"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCipherStrength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient9DispT<T>::get_CipherStrength(void)
{
  long pCipherStrength;
  this->get_CipherStrength((long*)&pCipherStrength);
  return pCipherStrength;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_Version(BSTR* pVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient9DispT<T>::get_Version(void)
{
  BSTR pVersion;
  this->get_Version((BSTR*)&pVersion);
  return pVersion;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettingsEnabled"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSecuredSettingsEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient9DispT<T>::get_SecuredSettingsEnabled(void)
{
  long pSecuredSettingsEnabled;
  this->get_SecuredSettingsEnabled((long*)&pSecuredSettingsEnabled);
  return pSecuredSettingsEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall
IMsRdpClient9DispT<T>::get_SecuredSettings(void)
{
  Mstsclib_tlb::IMsTscSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings"), DISPID(98));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall
IMsRdpClient9DispT<T>::get_AdvancedSettings(void)
{
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Debugger"), DISPID(99));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscDebug**)ppDebugger /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscDebugPtr __fastcall
IMsRdpClient9DispT<T>::get_Debugger(void)
{
  Mstsclib_tlb::IMsTscDebugPtr ppDebugger;
  this->get_Debugger(&ppDebugger);
  return ppDebugger;
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::Connect()
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(30));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(31));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::CreateVirtualChannels(BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateVirtualChannels"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient9DispT<T>::SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendOnVirtualChannel"), DISPID(34));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = ChanData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMsRdpClientTransportSettings4
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {011C3236-4D81-4515-9143-067AB630D299}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayBrokeringType(unsigned_long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayBrokeringType"), DISPID(231));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayCredSourceCookie(unsigned_long pulProxyCredSourceCookie/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredSourceCookie"), DISPID(226));
  TAutoArgs<1> _args;
  _args[1] = pulProxyCredSourceCookie /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayCredSourceCookie(unsigned_long* pulProxyCredSourceCookie/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredSourceCookie"), DISPID(226));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyCredSourceCookie /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayCredSourceCookie(void)
{
  unsigned_long pulProxyCredSourceCookie;
  this->get_GatewayCredSourceCookie((unsigned_long*)&pulProxyCredSourceCookie);
  return pulProxyCredSourceCookie;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayAuthCookieServerAddr(BSTR pbstrProxyAuthCookieServerAddr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayAuthCookieServerAddr"), DISPID(227));
  TAutoArgs<1> _args;
  _args[1] = pbstrProxyAuthCookieServerAddr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayAuthCookieServerAddr(BSTR* pbstrProxyAuthCookieServerAddr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayAuthCookieServerAddr"), DISPID(227));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrProxyAuthCookieServerAddr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayAuthCookieServerAddr(void)
{
  BSTR pbstrProxyAuthCookieServerAddr;
  this->get_GatewayAuthCookieServerAddr((BSTR*)&pbstrProxyAuthCookieServerAddr);
  return pbstrProxyAuthCookieServerAddr;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayEncryptedAuthCookie(BSTR pbstrEncryptedAuthCookie/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedAuthCookie"), DISPID(228));
  TAutoArgs<1> _args;
  _args[1] = pbstrEncryptedAuthCookie /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayEncryptedAuthCookie(BSTR* pbstrEncryptedAuthCookie/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedAuthCookie"), DISPID(228));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrEncryptedAuthCookie /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayEncryptedAuthCookie(void)
{
  BSTR pbstrEncryptedAuthCookie;
  this->get_GatewayEncryptedAuthCookie((BSTR*)&pbstrEncryptedAuthCookie);
  return pbstrEncryptedAuthCookie;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayEncryptedAuthCookieSize(unsigned_long pulEncryptedAuthCookieSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedAuthCookieSize"), DISPID(229));
  TAutoArgs<1> _args;
  _args[1] = pulEncryptedAuthCookieSize /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayEncryptedAuthCookieSize(unsigned_long* pulEncryptedAuthCookieSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedAuthCookieSize"), DISPID(229));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulEncryptedAuthCookieSize /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayEncryptedAuthCookieSize(void)
{
  unsigned_long pulEncryptedAuthCookieSize;
  this->get_GatewayEncryptedAuthCookieSize((unsigned_long*)&pulEncryptedAuthCookieSize);
  return pulEncryptedAuthCookieSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayAuthLoginPage(BSTR pbstrProxyAuthLoginPage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayAuthLoginPage"), DISPID(230));
  TAutoArgs<1> _args;
  _args[1] = pbstrProxyAuthLoginPage /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayAuthLoginPage(BSTR* pbstrProxyAuthLoginPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayAuthLoginPage"), DISPID(230));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrProxyAuthLoginPage /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayAuthLoginPage(void)
{
  BSTR pbstrProxyAuthLoginPage;
  this->get_GatewayAuthLoginPage((BSTR*)&pbstrProxyAuthLoginPage);
  return pbstrProxyAuthLoginPage;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayCredSharing(unsigned_long pulProxyCredSharing/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredSharing"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pulProxyCredSharing /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayCredSharing(unsigned_long* pulProxyCredSharing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredSharing"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyCredSharing /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayCredSharing(void)
{
  unsigned_long pulProxyCredSharing;
  this->get_GatewayCredSharing((unsigned_long*)&pulProxyCredSharing);
  return pulProxyCredSharing;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayPreAuthRequirement(unsigned_long pulProxyPreAuthRequirement/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayPreAuthRequirement"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = pulProxyPreAuthRequirement /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayPreAuthRequirement(unsigned_long* pulProxyPreAuthRequirement/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayPreAuthRequirement"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyPreAuthRequirement /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayPreAuthRequirement(void)
{
  unsigned_long pulProxyPreAuthRequirement;
  this->get_GatewayPreAuthRequirement((unsigned_long*)&pulProxyPreAuthRequirement);
  return pulProxyPreAuthRequirement;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayPreAuthServerAddr(BSTR pbstrProxyPreAuthServerAddr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayPreAuthServerAddr"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pbstrProxyPreAuthServerAddr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayPreAuthServerAddr(BSTR* pbstrProxyPreAuthServerAddr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayPreAuthServerAddr"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrProxyPreAuthServerAddr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayPreAuthServerAddr(void)
{
  BSTR pbstrProxyPreAuthServerAddr;
  this->get_GatewayPreAuthServerAddr((BSTR*)&pbstrProxyPreAuthServerAddr);
  return pbstrProxyPreAuthServerAddr;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewaySupportUrl(BSTR pbstrProxySupportUrl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewaySupportUrl"), DISPID(219));
  TAutoArgs<1> _args;
  _args[1] = pbstrProxySupportUrl /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewaySupportUrl(BSTR* pbstrProxySupportUrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewaySupportUrl"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrProxySupportUrl /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewaySupportUrl(void)
{
  BSTR pbstrProxySupportUrl;
  this->get_GatewaySupportUrl((BSTR*)&pbstrProxySupportUrl);
  return pbstrProxySupportUrl;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayEncryptedOtpCookie(BSTR pbstrEncryptedOtpCookie/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedOtpCookie"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = pbstrEncryptedOtpCookie /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayEncryptedOtpCookie(BSTR* pbstrEncryptedOtpCookie/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedOtpCookie"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrEncryptedOtpCookie /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayEncryptedOtpCookie(void)
{
  BSTR pbstrEncryptedOtpCookie;
  this->get_GatewayEncryptedOtpCookie((BSTR*)&pbstrEncryptedOtpCookie);
  return pbstrEncryptedOtpCookie;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayEncryptedOtpCookieSize(unsigned_long pulEncryptedOtpCookieSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedOtpCookieSize"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pulEncryptedOtpCookieSize /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayEncryptedOtpCookieSize(unsigned_long* pulEncryptedOtpCookieSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayEncryptedOtpCookieSize"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulEncryptedOtpCookieSize /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayEncryptedOtpCookieSize(void)
{
  unsigned_long pulEncryptedOtpCookieSize;
  this->get_GatewayEncryptedOtpCookieSize((unsigned_long*)&pulEncryptedOtpCookieSize);
  return pulEncryptedOtpCookieSize;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayUsername(BSTR pProxyUsername/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUsername"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pProxyUsername /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayUsername(BSTR* pProxyUsername/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUsername"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pProxyUsername /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayUsername(void)
{
  BSTR pProxyUsername;
  this->get_GatewayUsername((BSTR*)&pProxyUsername);
  return pProxyUsername;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayDomain(BSTR pProxyDomain/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayDomain"), DISPID(224));
  TAutoArgs<1> _args;
  _args[1] = pProxyDomain /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayDomain(BSTR* pProxyDomain/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayDomain"), DISPID(224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pProxyDomain /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayDomain(void)
{
  BSTR pProxyDomain;
  this->get_GatewayDomain((BSTR*)&pProxyDomain);
  return pProxyDomain;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayPassword(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayPassword"), DISPID(225));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayHostname(BSTR pProxyHostname/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayHostname"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = pProxyHostname /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayHostname(BSTR* pProxyHostname/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayHostname"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pProxyHostname /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayHostname(void)
{
  BSTR pProxyHostname;
  this->get_GatewayHostname((BSTR*)&pProxyHostname);
  return pProxyHostname;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayUsageMethod(unsigned_long pulProxyUsageMethod/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUsageMethod"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = pulProxyUsageMethod /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayUsageMethod(unsigned_long* pulProxyUsageMethod/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUsageMethod"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyUsageMethod /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayUsageMethod(void)
{
  unsigned_long pulProxyUsageMethod;
  this->get_GatewayUsageMethod((unsigned_long*)&pulProxyUsageMethod);
  return pulProxyUsageMethod;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayProfileUsageMethod(unsigned_long pulProxyProfileUsageMethod/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayProfileUsageMethod"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = pulProxyProfileUsageMethod /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayProfileUsageMethod(unsigned_long* pulProxyProfileUsageMethod/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayProfileUsageMethod"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyProfileUsageMethod /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayProfileUsageMethod(void)
{
  unsigned_long pulProxyProfileUsageMethod;
  this->get_GatewayProfileUsageMethod((unsigned_long*)&pulProxyProfileUsageMethod);
  return pulProxyProfileUsageMethod;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayCredsSource(unsigned_long pulProxyCredsSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredsSource"), DISPID(213));
  TAutoArgs<1> _args;
  _args[1] = pulProxyCredsSource /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayCredsSource"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyCredsSource /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayCredsSource(void)
{
  unsigned_long pulProxyCredsSource;
  this->get_GatewayCredsSource((unsigned_long*)&pulProxyCredsSource);
  return pulProxyCredsSource;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::set_GatewayUserSelectedCredsSource(unsigned_long pulProxyCredsSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUserSelectedCredsSource"), DISPID(216));
  TAutoArgs<1> _args;
  _args[1] = pulProxyCredsSource /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayUserSelectedCredsSource(unsigned_long* pulProxyCredsSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayUserSelectedCredsSource"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyCredsSource /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayUserSelectedCredsSource(void)
{
  unsigned_long pulProxyCredsSource;
  this->get_GatewayUserSelectedCredsSource((unsigned_long*)&pulProxyCredsSource);
  return pulProxyCredsSource;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayIsSupported(long* pfProxyIsSupported/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayIsSupported"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfProxyIsSupported /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayIsSupported(void)
{
  long pfProxyIsSupported;
  this->get_GatewayIsSupported((long*)&pfProxyIsSupported);
  return pfProxyIsSupported;
}

template <class T> HRESULT __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayDefaultUsageMethod(unsigned_long* pulProxyDefaultUsageMethod/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatewayDefaultUsageMethod"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulProxyDefaultUsageMethod /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMsRdpClientTransportSettings4DispT<T>::get_GatewayDefaultUsageMethod(void)
{
  unsigned_long pulProxyDefaultUsageMethod;
  this->get_GatewayDefaultUsageMethod((unsigned_long*)&pulProxyDefaultUsageMethod);
  return pulProxyDefaultUsageMethod;
}

// *********************************************************************//
// SmartIntf: TCOMIMsRdpClient10
// Interface: IMsRdpClient10
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMsRdpClient10T<T>::get_RemoteProgram3(Mstsclib_tlb::ITSRemoteProgram3** ppRemoteProgram/*[out,retval]*/)
{
  return (*this)->get_RemoteProgram3(ppRemoteProgram);
}

template <class T> Mstsclib_tlb::ITSRemoteProgram3Ptr __fastcall
TCOMIMsRdpClient10T<T>::get_RemoteProgram3(void)
{
  Mstsclib_tlb::ITSRemoteProgram3Ptr ppRemoteProgram;
  OLECHECK(this->get_RemoteProgram3((Mstsclib_tlb::ITSRemoteProgram3Ptr*)&ppRemoteProgram));
  return ppRemoteProgram;
}

// *********************************************************************//
// DispIntf:  IMsRdpClient10
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7ED92C39-EB38-4927-A70A-708AC5A59321}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_RemoteProgram3(Mstsclib_tlb::ITSRemoteProgram3** ppRemoteProgram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgram3"), DISPID(900));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::ITSRemoteProgram3**)ppRemoteProgram /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ITSRemoteProgram3Ptr __fastcall
IMsRdpClient10DispT<T>::get_RemoteProgram3(void)
{
  Mstsclib_tlb::ITSRemoteProgram3Ptr ppRemoteProgram;
  this->get_RemoteProgram3(&ppRemoteProgram);
  return ppRemoteProgram;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_TransportSettings4(Mstsclib_tlb::IMsRdpClientTransportSettings4** ppXportSet4/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings4"), DISPID(800));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings4**)ppXportSet4 /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettings4Ptr __fastcall
IMsRdpClient10DispT<T>::get_TransportSettings4(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettings4Ptr ppXportSet4;
  this->get_TransportSettings4(&ppXportSet4);
  return ppXportSet4;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::SyncSessionDisplaySettings()
{
  _TDispID _dispid(*this, OLETEXT("SyncSessionDisplaySettings"), DISPID(801));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::UpdateSessionDisplaySettings(unsigned_long ulDesktopWidth/*[in]*/, 
                                                     unsigned_long ulDesktopHeight/*[in]*/, 
                                                     unsigned_long ulPhysicalWidth/*[in]*/, 
                                                     unsigned_long ulPhysicalHeight/*[in]*/, 
                                                     unsigned_long ulOrientation/*[in]*/, 
                                                     unsigned_long ulDesktopScaleFactor/*[in]*/, 
                                                     unsigned_long ulDeviceScaleFactor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateSessionDisplaySettings"), DISPID(802));
  TAutoArgs<7> _args;
  _args[1] = ulDesktopWidth /*[VT_UI4:0]*/;
  _args[2] = ulDesktopHeight /*[VT_UI4:0]*/;
  _args[3] = ulPhysicalWidth /*[VT_UI4:0]*/;
  _args[4] = ulPhysicalHeight /*[VT_UI4:0]*/;
  _args[5] = ulOrientation /*[VT_UI4:0]*/;
  _args[6] = ulDesktopScaleFactor /*[VT_UI4:0]*/;
  _args[7] = ulDeviceScaleFactor /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::attachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("attachEvent"), DISPID(803));
  TAutoArgs<2> _args;
  _args[1] = eventName /*[VT_BSTR:0]*/;
  _args[2] = callback /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::detachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("detachEvent"), DISPID(804));
  TAutoArgs<2> _args;
  _args[1] = eventName /*[VT_BSTR:0]*/;
  _args[2] = callback /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::SendRemoteAction(Mstsclib_tlb::RemoteSessionActionType actionType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendRemoteAction"), DISPID(700));
  TAutoArgs<1> _args;
  _args[1] = (int)actionType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings9(Mstsclib_tlb::IMsRdpClientAdvancedSettings8** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings9"), DISPID(701));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings8**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings9(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings8Ptr ppAdvSettings;
  this->get_AdvancedSettings9(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::Reconnect(unsigned_long ulWidth/*[in]*/, unsigned_long ulHeight/*[in]*/, 
                                  Mstsclib_tlb::ControlReconnectStatus* pReconnectStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reconnect"), DISPID(702));
  TAutoArgs<2> _args;
  _args[1] = ulWidth /*[VT_UI4:0]*/;
  _args[2] = ulHeight /*[VT_UI4:0]*/;
  return OutRetValSetterPtr((int*)pReconnectStatus /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mstsclib_tlb::ControlReconnectStatus __fastcall
IMsRdpClient10DispT<T>::Reconnect(unsigned_long ulWidth/*[in]*/, unsigned_long ulHeight/*[in]*/)
{
  Mstsclib_tlb::ControlReconnectStatus pReconnectStatus;
  this->Reconnect(ulWidth, ulHeight, (Mstsclib_tlb::ControlReconnectStatus*)&pReconnectStatus);
  return pReconnectStatus;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings8(Mstsclib_tlb::IMsRdpClientAdvancedSettings7** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings8"), DISPID(600));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings7**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings8(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings7Ptr ppAdvSettings;
  this->get_AdvancedSettings8(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_TransportSettings3(Mstsclib_tlb::IMsRdpClientTransportSettings3** ppXportSet3/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings3"), DISPID(601));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings3**)ppXportSet3 /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr __fastcall
IMsRdpClient10DispT<T>::get_TransportSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettings3Ptr ppXportSet3;
  this->get_TransportSettings3(&ppXportSet3);
  return ppXportSet3;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::GetStatusText(unsigned statusCode/*[in]*/, 
                                      BSTR* pBstrStatusText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetStatusText"), DISPID(602));
  TAutoArgs<1> _args;
  _args[1] = statusCode /*[VT_UINT:0]*/;
  return OutRetValSetterPtr(pBstrStatusText /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient10DispT<T>::GetStatusText(unsigned statusCode/*[in]*/)
{
  BSTR pBstrStatusText;
  this->GetStatusText(statusCode, (BSTR*)&pBstrStatusText);
  return pBstrStatusText;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_SecuredSettings3(Mstsclib_tlb::IMsRdpClientSecuredSettings2** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings3"), DISPID(603));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientSecuredSettings2**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr __fastcall
IMsRdpClient10DispT<T>::get_SecuredSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientSecuredSettings2Ptr ppSecuredSettings;
  this->get_SecuredSettings3(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_RemoteProgram2(Mstsclib_tlb::ITSRemoteProgram2** ppRemoteProgram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgram2"), DISPID(604));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::ITSRemoteProgram2**)ppRemoteProgram /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ITSRemoteProgram2Ptr __fastcall
IMsRdpClient10DispT<T>::get_RemoteProgram2(void)
{
  Mstsclib_tlb::ITSRemoteProgram2Ptr ppRemoteProgram;
  this->get_RemoteProgram2(&ppRemoteProgram);
  return ppRemoteProgram;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings7(Mstsclib_tlb::IMsRdpClientAdvancedSettings6** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings7"), DISPID(507));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings6**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings7(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings6Ptr ppAdvSettings;
  this->get_AdvancedSettings7(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_TransportSettings2(Mstsclib_tlb::IMsRdpClientTransportSettings2** ppXportSet2/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings2"), DISPID(506));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings2**)ppXportSet2 /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr __fastcall
IMsRdpClient10DispT<T>::get_TransportSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettings2Ptr ppXportSet2;
  this->get_TransportSettings2(&ppXportSet2);
  return ppXportSet2;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_TransportSettings(Mstsclib_tlb::IMsRdpClientTransportSettings** ppXportSet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransportSettings"), DISPID(500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientTransportSettings**)ppXportSet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientTransportSettingsPtr __fastcall
IMsRdpClient10DispT<T>::get_TransportSettings(void)
{
  Mstsclib_tlb::IMsRdpClientTransportSettingsPtr ppXportSet;
  this->get_TransportSettings(&ppXportSet);
  return ppXportSet;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings6(Mstsclib_tlb::IMsRdpClientAdvancedSettings5** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings6"), DISPID(502));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings5**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings6(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings5Ptr ppAdvSettings;
  this->get_AdvancedSettings6(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                            unsigned ExtendedDisconnectReason/*[in]*/, 
                                            BSTR* pBstrErrorMsg/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetErrorDescription"), DISPID(503));
  TAutoArgs<2> _args;
  _args[1] = disconnectReason /*[VT_UINT:0]*/;
  _args[2] = ExtendedDisconnectReason /*[VT_UINT:0]*/;
  return OutRetValSetterPtr(pBstrErrorMsg /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient10DispT<T>::GetErrorDescription(unsigned disconnectReason/*[in]*/, 
                                            unsigned ExtendedDisconnectReason/*[in]*/)
{
  BSTR pBstrErrorMsg;
  this->GetErrorDescription(disconnectReason, ExtendedDisconnectReason, (BSTR*)&pBstrErrorMsg);
  return pBstrErrorMsg;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_RemoteProgram(Mstsclib_tlb::ITSRemoteProgram** ppRemoteProgram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgram"), DISPID(504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::ITSRemoteProgram**)ppRemoteProgram /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ITSRemoteProgramPtr __fastcall
IMsRdpClient10DispT<T>::get_RemoteProgram(void)
{
  Mstsclib_tlb::ITSRemoteProgramPtr ppRemoteProgram;
  this->get_RemoteProgram(&ppRemoteProgram);
  return ppRemoteProgram;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_MsRdpClientShell(Mstsclib_tlb::IMsRdpClientShell** ppLauncher/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MsRdpClientShell"), DISPID(505));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientShell**)ppLauncher /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientShellPtr __fastcall
IMsRdpClient10DispT<T>::get_MsRdpClientShell(void)
{
  Mstsclib_tlb::IMsRdpClientShellPtr ppLauncher;
  this->get_MsRdpClientShell(&ppLauncher);
  return ppLauncher;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings5(Mstsclib_tlb::IMsRdpClientAdvancedSettings4** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings5"), DISPID(400));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings4**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings5(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings4Ptr ppAdvSettings;
  this->get_AdvancedSettings5(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings4(Mstsclib_tlb::IMsRdpClientAdvancedSettings3** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings4"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings3**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings4(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings3Ptr ppAdvSettings;
  this->get_AdvancedSettings4(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings3(Mstsclib_tlb::IMsRdpClientAdvancedSettings2** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings3"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings2**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings3(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettings2Ptr ppAdvSettings;
  this->get_AdvancedSettings3(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::set_ConnectedStatusText(BSTR pConnectedStatusText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = pConnectedStatusText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_ConnectedStatusText(BSTR* pConnectedStatusText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectedStatusText"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectedStatusText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient10DispT<T>::get_ConnectedStatusText(void)
{
  BSTR pConnectedStatusText;
  this->get_ConnectedStatusText((BSTR*)&pConnectedStatusText);
  return pConnectedStatusText;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::set_ColorDepth(long pcolorDepth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = pcolorDepth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_ColorDepth(long* pcolorDepth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorDepth"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcolorDepth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient10DispT<T>::get_ColorDepth(void)
{
  long pcolorDepth;
  this->get_ColorDepth((long*)&pcolorDepth);
  return pcolorDepth;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings2(Mstsclib_tlb::IMsRdpClientAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings2"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings2(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_SecuredSettings2(Mstsclib_tlb::IMsRdpClientSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings2"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsRdpClientSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr __fastcall
IMsRdpClient10DispT<T>::get_SecuredSettings2(void)
{
  Mstsclib_tlb::IMsRdpClientSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings2(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_ExtendedDisconnectReason(Mstsclib_tlb::ExtendedDisconnectReasonCode* pExtendedDisconnectReason/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtendedDisconnectReason"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pExtendedDisconnectReason /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::ExtendedDisconnectReasonCode __fastcall
IMsRdpClient10DispT<T>::get_ExtendedDisconnectReason(void)
{
  Mstsclib_tlb::ExtendedDisconnectReasonCode pExtendedDisconnectReason;
  this->get_ExtendedDisconnectReason((Mstsclib_tlb::ExtendedDisconnectReasonCode*)&pExtendedDisconnectReason);
  return pExtendedDisconnectReason;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::set_FullScreen(VARIANT_BOOL pfFullScreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pfFullScreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_FullScreen(VARIANT_BOOL* pfFullScreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreen"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfFullScreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMsRdpClient10DispT<T>::get_FullScreen(void)
{
  VARIANT_BOOL pfFullScreen;
  this->get_FullScreen((VARIANT_BOOL*)&pfFullScreen);
  return pfFullScreen;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::SetVirtualChannelOptions(BSTR chanName/*[in]*/, long chanOptions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVirtualChannelOptions"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = chanOptions /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/, 
                                                 long* pChanOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVirtualChannelOptions"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pChanOptions /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient10DispT<T>::GetVirtualChannelOptions(BSTR chanName/*[in]*/)
{
  long pChanOptions;
  this->GetVirtualChannelOptions(chanName, (long*)&pChanOptions);
  return pChanOptions;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::RequestClose(Mstsclib_tlb::ControlCloseStatus* pCloseStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestClose"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pCloseStatus /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mstsclib_tlb::ControlCloseStatus __fastcall
IMsRdpClient10DispT<T>::RequestClose(void)
{
  Mstsclib_tlb::ControlCloseStatus pCloseStatus;
  this->RequestClose((Mstsclib_tlb::ControlCloseStatus*)&pCloseStatus);
  return pCloseStatus;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::set_Server(BSTR pServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pServer /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_Server(BSTR* pServer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Server"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pServer /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient10DispT<T>::get_Server(void)
{
  BSTR pServer;
  this->get_Server((BSTR*)&pServer);
  return pServer;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::set_Domain(BSTR pDomain/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pDomain /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_Domain(BSTR* pDomain/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Domain"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDomain /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient10DispT<T>::get_Domain(void)
{
  BSTR pDomain;
  this->get_Domain((BSTR*)&pDomain);
  return pDomain;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::set_UserName(BSTR pUserName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pUserName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_UserName(BSTR* pUserName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pUserName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient10DispT<T>::get_UserName(void)
{
  BSTR pUserName;
  this->get_UserName((BSTR*)&pUserName);
  return pUserName;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::set_DisconnectedText(BSTR pDisconnectedText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pDisconnectedText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_DisconnectedText(BSTR* pDisconnectedText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisconnectedText"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDisconnectedText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient10DispT<T>::get_DisconnectedText(void)
{
  BSTR pDisconnectedText;
  this->get_DisconnectedText((BSTR*)&pDisconnectedText);
  return pDisconnectedText;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::set_ConnectingText(BSTR pConnectingText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pConnectingText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_ConnectingText(BSTR* pConnectingText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectingText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pConnectingText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient10DispT<T>::get_ConnectingText(void)
{
  BSTR pConnectingText;
  this->get_ConnectingText((BSTR*)&pConnectingText);
  return pConnectingText;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_Connected(short* pIsConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connected"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIsConnected /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IMsRdpClient10DispT<T>::get_Connected(void)
{
  short pIsConnected;
  this->get_Connected((short*)&pIsConnected);
  return pIsConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::set_DesktopWidth(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_DesktopWidth(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopWidth"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient10DispT<T>::get_DesktopWidth(void)
{
  long pVal;
  this->get_DesktopWidth((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::set_DesktopHeight(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_DesktopHeight(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesktopHeight"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient10DispT<T>::get_DesktopHeight(void)
{
  long pVal;
  this->get_DesktopHeight((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::set_StartConnected(long pfStartConnected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pfStartConnected /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_StartConnected(long* pfStartConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartConnected"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfStartConnected /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient10DispT<T>::get_StartConnected(void)
{
  long pfStartConnected;
  this->get_StartConnected((long*)&pfStartConnected);
  return pfStartConnected;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_HorizontalScrollBarVisible(long* pfHScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalScrollBarVisible"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient10DispT<T>::get_HorizontalScrollBarVisible(void)
{
  long pfHScrollVisible;
  this->get_HorizontalScrollBarVisible((long*)&pfHScrollVisible);
  return pfHScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_VerticalScrollBarVisible(long* pfVScrollVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalScrollBarVisible"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVScrollVisible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient10DispT<T>::get_VerticalScrollBarVisible(void)
{
  long pfVScrollVisible;
  this->get_VerticalScrollBarVisible((long*)&pfVScrollVisible);
  return pfVScrollVisible;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::set_FullScreenTitle(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullScreenTitle"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_CipherStrength(long* pCipherStrength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CipherStrength"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCipherStrength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient10DispT<T>::get_CipherStrength(void)
{
  long pCipherStrength;
  this->get_CipherStrength((long*)&pCipherStrength);
  return pCipherStrength;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_Version(BSTR* pVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMsRdpClient10DispT<T>::get_Version(void)
{
  BSTR pVersion;
  this->get_Version((BSTR*)&pVersion);
  return pVersion;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_SecuredSettingsEnabled(long* pSecuredSettingsEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettingsEnabled"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSecuredSettingsEnabled /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMsRdpClient10DispT<T>::get_SecuredSettingsEnabled(void)
{
  long pSecuredSettingsEnabled;
  this->get_SecuredSettingsEnabled((long*)&pSecuredSettingsEnabled);
  return pSecuredSettingsEnabled;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_SecuredSettings(Mstsclib_tlb::IMsTscSecuredSettings** ppSecuredSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecuredSettings"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscSecuredSettings**)ppSecuredSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscSecuredSettingsPtr __fastcall
IMsRdpClient10DispT<T>::get_SecuredSettings(void)
{
  Mstsclib_tlb::IMsTscSecuredSettingsPtr ppSecuredSettings;
  this->get_SecuredSettings(&ppSecuredSettings);
  return ppSecuredSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings(Mstsclib_tlb::IMsTscAdvancedSettings** ppAdvSettings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AdvancedSettings"), DISPID(98));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscAdvancedSettings**)ppAdvSettings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscAdvancedSettingsPtr __fastcall
IMsRdpClient10DispT<T>::get_AdvancedSettings(void)
{
  Mstsclib_tlb::IMsTscAdvancedSettingsPtr ppAdvSettings;
  this->get_AdvancedSettings(&ppAdvSettings);
  return ppAdvSettings;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::get_Debugger(Mstsclib_tlb::IMsTscDebug** ppDebugger/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Debugger"), DISPID(99));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IMsTscDebug**)ppDebugger /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IMsTscDebugPtr __fastcall
IMsRdpClient10DispT<T>::get_Debugger(void)
{
  Mstsclib_tlb::IMsTscDebugPtr ppDebugger;
  this->get_Debugger(&ppDebugger);
  return ppDebugger;
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::Connect()
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(30));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(31));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::CreateVirtualChannels(BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateVirtualChannels"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMsRdpClient10DispT<T>::SendOnVirtualChannel(BSTR chanName/*[in]*/, BSTR ChanData/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendOnVirtualChannel"), DISPID(34));
  TAutoArgs<2> _args;
  _args[1] = chanName /*[VT_BSTR:0]*/;
  _args[2] = ChanData /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ITSRemoteProgram3
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4B84EA77-ACEA-418C-881A-4A8C28AB1510}
// *********************************************************************//
template <class T> HRESULT __fastcall
ITSRemoteProgram3DispT<T>::ServerStartApp(BSTR bstrAppUserModelId/*[in]*/, 
                                          BSTR bstrArguments/*[in]*/, 
                                          VARIANT_BOOL vbExpandEnvVarInArgumentsOnServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ServerStartApp"), DISPID(205));
  TAutoArgs<3> _args;
  _args[1] = bstrAppUserModelId /*[VT_BSTR:0]*/;
  _args[2] = bstrArguments /*[VT_BSTR:0]*/;
  _args[3] = vbExpandEnvVarInArgumentsOnServer /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITSRemoteProgram3DispT<T>::set_RemoteApplicationName(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteApplicationName"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITSRemoteProgram3DispT<T>::set_RemoteApplicationProgram(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteApplicationProgram"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITSRemoteProgram3DispT<T>::set_RemoteApplicationArgs(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteApplicationArgs"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITSRemoteProgram3DispT<T>::set_RemoteProgramMode(VARIANT_BOOL pvboolRemoteProgramMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgramMode"), DISPID(200));
  TAutoArgs<1> _args;
  _args[1] = pvboolRemoteProgramMode /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ITSRemoteProgram3DispT<T>::get_RemoteProgramMode(VARIANT_BOOL* pvboolRemoteProgramMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoteProgramMode"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvboolRemoteProgramMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITSRemoteProgram3DispT<T>::get_RemoteProgramMode(void)
{
  VARIANT_BOOL pvboolRemoteProgramMode;
  this->get_RemoteProgramMode((VARIANT_BOOL*)&pvboolRemoteProgramMode);
  return pvboolRemoteProgramMode;
}

template <class T> HRESULT __fastcall
ITSRemoteProgram3DispT<T>::ServerStartProgram(BSTR bstrExecutablePath/*[in]*/, 
                                              BSTR bstrFilePath/*[in]*/, 
                                              BSTR bstrWorkingDirectory/*[in]*/, 
                                              VARIANT_BOOL vbExpandEnvVarInWorkingDirectoryOnServer/*[in]*/
                                              , BSTR bstrArguments/*[in]*/, 
                                              VARIANT_BOOL vbExpandEnvVarInArgumentsOnServer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ServerStartProgram"), DISPID(201));
  TAutoArgs<6> _args;
  _args[1] = bstrExecutablePath /*[VT_BSTR:0]*/;
  _args[2] = bstrFilePath /*[VT_BSTR:0]*/;
  _args[3] = bstrWorkingDirectory /*[VT_BSTR:0]*/;
  _args[4] = vbExpandEnvVarInWorkingDirectoryOnServer /*[VT_BOOL:0]*/;
  _args[5] = bstrArguments /*[VT_BSTR:0]*/;
  _args[6] = vbExpandEnvVarInArgumentsOnServer /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IRemoteDesktopClientEvents
// Flags:     (4096) Dispatchable
// GUID:      {079863B7-6D47-4105-8BFE-0CDCB360E67D}
// *********************************************************************//
template <class T> void __fastcall
IRemoteDesktopClientEventsDispT<T>::OnConnecting()
{
  _TDispID _dispid(/* OnConnecting */ DISPID(750));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IRemoteDesktopClientEventsDispT<T>::OnConnected()
{
  _TDispID _dispid(/* OnConnected */ DISPID(751));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IRemoteDesktopClientEventsDispT<T>::OnLoginCompleted()
{
  _TDispID _dispid(/* OnLoginCompleted */ DISPID(752));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IRemoteDesktopClientEventsDispT<T>::OnDisconnected(long disconnectReason/*[in]*/, 
                                                   long ExtendedDisconnectReason/*[in]*/, 
                                                   BSTR disconnectErrorMessage/*[in]*/)
{
  _TDispID _dispid(/* OnDisconnected */ DISPID(753));
  TAutoArgs<3> _args;
  _args[1] = disconnectReason /*[VT_I4:0]*/;
  _args[2] = ExtendedDisconnectReason /*[VT_I4:0]*/;
  _args[3] = disconnectErrorMessage /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRemoteDesktopClientEventsDispT<T>::OnStatusChanged(long statusCode/*[in]*/, 
                                                    BSTR statusMessage/*[in]*/)
{
  _TDispID _dispid(/* OnStatusChanged */ DISPID(754));
  TAutoArgs<2> _args;
  _args[1] = statusCode /*[VT_I4:0]*/;
  _args[2] = statusMessage /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRemoteDesktopClientEventsDispT<T>::OnAutoReconnecting(long disconnectReason/*[in]*/, 
                                                       long ExtendedDisconnectReason/*[in]*/, 
                                                       BSTR disconnectErrorMessage/*[in]*/, 
                                                       VARIANT_BOOL networkAvailable/*[in]*/, 
                                                       long attemptCount/*[in]*/, 
                                                       long maxAttemptCount/*[in]*/)
{
  _TDispID _dispid(/* OnAutoReconnecting */ DISPID(755));
  TAutoArgs<6> _args;
  _args[1] = disconnectReason /*[VT_I4:0]*/;
  _args[2] = ExtendedDisconnectReason /*[VT_I4:0]*/;
  _args[3] = disconnectErrorMessage /*[VT_BSTR:0]*/;
  _args[4] = networkAvailable /*[VT_BOOL:0]*/;
  _args[5] = attemptCount /*[VT_I4:0]*/;
  _args[6] = maxAttemptCount /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRemoteDesktopClientEventsDispT<T>::OnAutoReconnected()
{
  _TDispID _dispid(/* OnAutoReconnected */ DISPID(756));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IRemoteDesktopClientEventsDispT<T>::OnDialogDisplaying()
{
  _TDispID _dispid(/* OnDialogDisplaying */ DISPID(757));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IRemoteDesktopClientEventsDispT<T>::OnDialogDismissed()
{
  _TDispID _dispid(/* OnDialogDismissed */ DISPID(758));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IRemoteDesktopClientEventsDispT<T>::OnNetworkStatusChanged(unsigned_long qualityLevel/*[in]*/, 
                                                           long bandwidth/*[in]*/, long rtt/*[in]*/)
{
  _TDispID _dispid(/* OnNetworkStatusChanged */ DISPID(759));
  TAutoArgs<3> _args;
  _args[1] = qualityLevel /*[VT_UI4:0]*/;
  _args[2] = bandwidth /*[VT_I4:0]*/;
  _args[3] = rtt /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRemoteDesktopClientEventsDispT<T>::OnAdminMessageReceived(BSTR adminMessage/*[in]*/)
{
  _TDispID _dispid(/* OnAdminMessageReceived */ DISPID(760));
  TAutoArgs<1> _args;
  _args[1] = adminMessage /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRemoteDesktopClientEventsDispT<T>::OnKeyCombinationPressed(long keyCombination/*[in]*/)
{
  _TDispID _dispid(/* OnKeyCombinationPressed */ DISPID(761));
  TAutoArgs<1> _args;
  _args[1] = keyCombination /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRemoteDesktopClientEventsDispT<T>::OnRemoteDesktopSizeChanged(long width/*[in]*/, 
                                                               long height/*[in]*/)
{
  _TDispID _dispid(/* OnRemoteDesktopSizeChanged */ DISPID(762));
  TAutoArgs<2> _args;
  _args[1] = width /*[VT_I4:0]*/;
  _args[2] = height /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRemoteDesktopClientEventsDispT<T>::OnTouchPointerCursorMoved(long x/*[in]*/, long y/*[in]*/)
{
  _TDispID _dispid(/* OnTouchPointerCursorMoved */ DISPID(800));
  TAutoArgs<2> _args;
  _args[1] = x /*[VT_I4:0]*/;
  _args[2] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIRemoteDesktopClient
// Interface: IRemoteDesktopClient
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIRemoteDesktopClientT<T>::Connect(void)
{
  return (*this)->Connect();
}

template <class T> HRESULT __fastcall
TCOMIRemoteDesktopClientT<T>::Disconnect(void)
{
  return (*this)->Disconnect();
}

template <class T> HRESULT __fastcall
TCOMIRemoteDesktopClientT<T>::Reconnect(unsigned_long width/*[in]*/, unsigned_long height/*[in]*/)
{
  return (*this)->Reconnect(width, height);
}

template <class T> HRESULT __fastcall
TCOMIRemoteDesktopClientT<T>::get_Settings(Mstsclib_tlb::IRemoteDesktopClientSettings** Settings/*[out,retval]*/)
{
  return (*this)->get_Settings(Settings);
}

template <class T> Mstsclib_tlb::IRemoteDesktopClientSettingsPtr __fastcall
TCOMIRemoteDesktopClientT<T>::get_Settings(void)
{
  Mstsclib_tlb::IRemoteDesktopClientSettingsPtr Settings;
  OLECHECK(this->get_Settings((Mstsclib_tlb::IRemoteDesktopClientSettingsPtr*)&Settings));
  return Settings;
}

template <class T> HRESULT __fastcall
TCOMIRemoteDesktopClientT<T>::get_Actions(Mstsclib_tlb::IRemoteDesktopClientActions** Actions/*[out,retval]*/)
{
  return (*this)->get_Actions(Actions);
}

template <class T> Mstsclib_tlb::IRemoteDesktopClientActionsPtr __fastcall
TCOMIRemoteDesktopClientT<T>::get_Actions(void)
{
  Mstsclib_tlb::IRemoteDesktopClientActionsPtr Actions;
  OLECHECK(this->get_Actions((Mstsclib_tlb::IRemoteDesktopClientActionsPtr*)&Actions));
  return Actions;
}

template <class T> HRESULT __fastcall
TCOMIRemoteDesktopClientT<T>::get_TouchPointer(Mstsclib_tlb::IRemoteDesktopClientTouchPointer** TouchPointer/*[out,retval]*/)
{
  return (*this)->get_TouchPointer(TouchPointer);
}

template <class T> Mstsclib_tlb::IRemoteDesktopClientTouchPointerPtr __fastcall
TCOMIRemoteDesktopClientT<T>::get_TouchPointer(void)
{
  Mstsclib_tlb::IRemoteDesktopClientTouchPointerPtr TouchPointer;
  OLECHECK(this->get_TouchPointer((Mstsclib_tlb::IRemoteDesktopClientTouchPointerPtr*)&TouchPointer));
  return TouchPointer;
}

template <class T> HRESULT __fastcall
TCOMIRemoteDesktopClientT<T>::DeleteSavedCredentials(BSTR serverName/*[in]*/)
{
  return (*this)->DeleteSavedCredentials(serverName);
}

template <class T> HRESULT __fastcall
TCOMIRemoteDesktopClientT<T>::UpdateSessionDisplaySettings(unsigned_long width/*[in]*/, 
                                                           unsigned_long height/*[in]*/)
{
  return (*this)->UpdateSessionDisplaySettings(width, height);
}

template <class T> HRESULT __fastcall
TCOMIRemoteDesktopClientT<T>::attachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/)
{
  return (*this)->attachEvent(eventName, callback);
}

template <class T> HRESULT __fastcall
TCOMIRemoteDesktopClientT<T>::detachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/)
{
  return (*this)->detachEvent(eventName, callback);
}

// *********************************************************************//
// DispIntf:  IRemoteDesktopClient
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {57D25668-625A-4905-BE4E-304CAA13F89C}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRemoteDesktopClientDispT<T>::Connect()
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(701));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientDispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(702));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientDispT<T>::Reconnect(unsigned_long width/*[in]*/, unsigned_long height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reconnect"), DISPID(703));
  TAutoArgs<2> _args;
  _args[1] = width /*[VT_UI4:0]*/;
  _args[2] = height /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientDispT<T>::get_Settings(Mstsclib_tlb::IRemoteDesktopClientSettings** Settings/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Settings"), DISPID(710));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IRemoteDesktopClientSettings**)Settings /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IRemoteDesktopClientSettingsPtr __fastcall
IRemoteDesktopClientDispT<T>::get_Settings(void)
{
  Mstsclib_tlb::IRemoteDesktopClientSettingsPtr Settings;
  this->get_Settings(&Settings);
  return Settings;
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientDispT<T>::get_Actions(Mstsclib_tlb::IRemoteDesktopClientActions** Actions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Actions"), DISPID(711));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IRemoteDesktopClientActions**)Actions /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IRemoteDesktopClientActionsPtr __fastcall
IRemoteDesktopClientDispT<T>::get_Actions(void)
{
  Mstsclib_tlb::IRemoteDesktopClientActionsPtr Actions;
  this->get_Actions(&Actions);
  return Actions;
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientDispT<T>::get_TouchPointer(Mstsclib_tlb::IRemoteDesktopClientTouchPointer** TouchPointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TouchPointer"), DISPID(712));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mstsclib_tlb::IRemoteDesktopClientTouchPointer**)TouchPointer /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mstsclib_tlb::IRemoteDesktopClientTouchPointerPtr __fastcall
IRemoteDesktopClientDispT<T>::get_TouchPointer(void)
{
  Mstsclib_tlb::IRemoteDesktopClientTouchPointerPtr TouchPointer;
  this->get_TouchPointer(&TouchPointer);
  return TouchPointer;
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientDispT<T>::DeleteSavedCredentials(BSTR serverName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteSavedCredentials"), DISPID(704));
  TAutoArgs<1> _args;
  _args[1] = serverName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientDispT<T>::UpdateSessionDisplaySettings(unsigned_long width/*[in]*/, 
                                                           unsigned_long height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateSessionDisplaySettings"), DISPID(705));
  TAutoArgs<2> _args;
  _args[1] = width /*[VT_UI4:0]*/;
  _args[2] = height /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientDispT<T>::attachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("attachEvent"), DISPID(706));
  TAutoArgs<2> _args;
  _args[1] = eventName /*[VT_BSTR:0]*/;
  _args[2] = callback /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientDispT<T>::detachEvent(BSTR eventName/*[in]*/, LPDISPATCH callback/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("detachEvent"), DISPID(707));
  TAutoArgs<2> _args;
  _args[1] = eventName /*[VT_BSTR:0]*/;
  _args[2] = callback /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IRemoteDesktopClientSettings
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {48A0F2A7-2713-431F-BBAC-6F4558E7D64D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRemoteDesktopClientSettingsDispT<T>::ApplySettings(BSTR RdpFileContents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplySettings"), DISPID(722));
  TAutoArgs<1> _args;
  _args[1] = RdpFileContents /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientSettingsDispT<T>::RetrieveSettings(BSTR* RdpFileContents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RetrieveSettings"), DISPID(723));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RdpFileContents /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IRemoteDesktopClientSettingsDispT<T>::RetrieveSettings(void)
{
  BSTR RdpFileContents;
  this->RetrieveSettings((BSTR*)&RdpFileContents);
  return RdpFileContents;
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientSettingsDispT<T>::GetRdpProperty(BSTR propertyName/*[in]*/, 
                                                     VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRdpProperty"), DISPID(721));
  TAutoArgs<1> _args;
  _args[1] = propertyName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IRemoteDesktopClientSettingsDispT<T>::GetRdpProperty(BSTR propertyName/*[in]*/)
{
  VARIANT Value;
  this->GetRdpProperty(propertyName, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientSettingsDispT<T>::SetRdpProperty(BSTR propertyName/*[in]*/, 
                                                     VARIANT Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetRdpProperty"), DISPID(720));
  TAutoArgs<2> _args;
  _args[1] = propertyName /*[VT_BSTR:0]*/;
  _args[2] = Value /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IRemoteDesktopClientActions
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {7D54BC4E-1028-45D4-8B0A-B9B6BFFBA176}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRemoteDesktopClientActionsDispT<T>::SuspendScreenUpdates()
{
  _TDispID _dispid(*this, OLETEXT("SuspendScreenUpdates"), DISPID(730));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientActionsDispT<T>::ResumeScreenUpdates()
{
  _TDispID _dispid(*this, OLETEXT("ResumeScreenUpdates"), DISPID(731));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientActionsDispT<T>::ExecuteRemoteAction(Mstsclib_tlb::RemoteActionType remoteAction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExecuteRemoteAction"), DISPID(732));
  TAutoArgs<1> _args;
  _args[1] = (int)remoteAction /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientActionsDispT<T>::GetSnapshot(Mstsclib_tlb::SnapshotEncodingType snapshotEncoding/*[in]*/
                                                 , 
                                                 Mstsclib_tlb::SnapshotFormatType snapshotFormat/*[in]*/
                                                 , unsigned_long snapshotWidth/*[in]*/, 
                                                 unsigned_long snapshotHeight/*[in]*/, 
                                                 BSTR* snapshotData/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSnapshot"), DISPID(733));
  TAutoArgs<4> _args;
  _args[1] = (int)snapshotEncoding /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)snapshotFormat /*[VT_USERDEFINED:0]*/;
  _args[3] = snapshotWidth /*[VT_UI4:0]*/;
  _args[4] = snapshotHeight /*[VT_UI4:0]*/;
  return OutRetValSetterPtr(snapshotData /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IRemoteDesktopClientActionsDispT<T>::GetSnapshot(Mstsclib_tlb::SnapshotEncodingType snapshotEncoding/*[in]*/, 
                                                 Mstsclib_tlb::SnapshotFormatType snapshotFormat/*[in]*/, 
                                                 unsigned_long snapshotWidth/*[in]*/, 
                                                 unsigned_long snapshotHeight/*[in]*/)
{
  BSTR snapshotData;
  this->GetSnapshot(snapshotEncoding, snapshotFormat, snapshotWidth, snapshotHeight, (BSTR*)&snapshotData);
  return snapshotData;
}

// *********************************************************************//
// DispIntf:  IRemoteDesktopClientTouchPointer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {260EC22D-8CBC-44B5-9E88-2A37F6C93AE9}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRemoteDesktopClientTouchPointerDispT<T>::set_Enabled(VARIANT_BOOL Enabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(740));
  TAutoArgs<1> _args;
  _args[1] = Enabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientTouchPointerDispT<T>::get_Enabled(VARIANT_BOOL* Enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(740));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRemoteDesktopClientTouchPointerDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Enabled;
  this->get_Enabled((VARIANT_BOOL*)&Enabled);
  return Enabled;
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientTouchPointerDispT<T>::set_EventsEnabled(VARIANT_BOOL EventsEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventsEnabled"), DISPID(741));
  TAutoArgs<1> _args;
  _args[1] = EventsEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientTouchPointerDispT<T>::get_EventsEnabled(VARIANT_BOOL* EventsEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventsEnabled"), DISPID(741));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(EventsEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRemoteDesktopClientTouchPointerDispT<T>::get_EventsEnabled(void)
{
  VARIANT_BOOL EventsEnabled;
  this->get_EventsEnabled((VARIANT_BOOL*)&EventsEnabled);
  return EventsEnabled;
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientTouchPointerDispT<T>::set_PointerSpeed(unsigned_long PointerSpeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointerSpeed"), DISPID(742));
  TAutoArgs<1> _args;
  _args[1] = PointerSpeed /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRemoteDesktopClientTouchPointerDispT<T>::get_PointerSpeed(unsigned_long* PointerSpeed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PointerSpeed"), DISPID(742));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(PointerSpeed /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IRemoteDesktopClientTouchPointerDispT<T>::get_PointerSpeed(void)
{
  unsigned_long PointerSpeed;
  this->get_PointerSpeed((unsigned_long*)&PointerSpeed);
  return PointerSpeed;
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : MsTscAx
// Interface: TCOMIMsTscAx
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIMsTscAx, IMsTscAx, &CLSID_MsTscAx, &IID_IMsTscAx> CoMsTscAx;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : MsRdpClient
// Interface: TCOMIMsRdpClient
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIMsRdpClient, IMsRdpClient, &CLSID_MsRdpClient, &IID_IMsRdpClient> CoMsRdpClient;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsTscAxNotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsTscAxNotSafeForScripting : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, 
                                                                  VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnAutoReconnecting(long disconnectReason, 
                                                               long attemptCount, 
                                                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                                  Mstsclib_tlb::RemoteProgramResult lError, 
                                                                  VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                     unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                    Mstsclib_tlb::wireHWND hwnd, 
                                                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, 
                                                                   long bandwidth, long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAxNotSafeForScripting<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                                VARIANT_BOOL networkAvailable, 
                                                                long attemptCount, 
                                                                long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsTscAx
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsTscAx : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsTscAx<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                            Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                               Mstsclib_tlb::RemoteProgramResult lError, 
                                               VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                  unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                 Mstsclib_tlb::wireHWND hwnd, 
                                                 Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsTscAx<T>::Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                             long attemptCount, long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClientNotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClientNotSafeForScripting : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, 
                                                                      VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnAutoReconnecting(long disconnectReason, 
                                                                   long attemptCount, 
                                                                   Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                                      Mstsclib_tlb::RemoteProgramResult lError, 
                                                                      VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                         unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                        Mstsclib_tlb::wireHWND hwnd, 
                                                                        Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, 
                                                                       long bandwidth, long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClientNotSafeForScripting<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                                    VARIANT_BOOL networkAvailable, 
                                                                    long attemptCount, 
                                                                    long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                                Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                   Mstsclib_tlb::RemoteProgramResult lError, 
                                                   VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                      unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                     Mstsclib_tlb::wireHWND hwnd, 
                                                     Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, 
                                                    long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                 VARIANT_BOOL networkAvailable, long attemptCount, 
                                                 long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient2NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient2NotSafeForScripting : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, 
                                                                       VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnAutoReconnecting(long disconnectReason, 
                                                                    long attemptCount, 
                                                                    Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                                       Mstsclib_tlb::RemoteProgramResult lError, 
                                                                       VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                          unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                         Mstsclib_tlb::wireHWND hwnd, 
                                                                         Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, 
                                                                        long bandwidth, long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2NotSafeForScripting<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                                     VARIANT_BOOL networkAvailable, 
                                                                     long attemptCount, 
                                                                     long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient2
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient2 : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                                 Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                    Mstsclib_tlb::RemoteProgramResult lError, 
                                                    VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                       unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                      Mstsclib_tlb::wireHWND hwnd, 
                                                      Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, 
                                                     long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                  VARIANT_BOOL networkAvailable, long attemptCount, 
                                                  long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient2a
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient2a : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                                  Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                     Mstsclib_tlb::RemoteProgramResult lError, 
                                                     VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                        unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                       Mstsclib_tlb::wireHWND hwnd, 
                                                       Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, 
                                                      long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient2a<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                   VARIANT_BOOL networkAvailable, long attemptCount, 
                                                   long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient3NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient3NotSafeForScripting : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, 
                                                                       VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnAutoReconnecting(long disconnectReason, 
                                                                    long attemptCount, 
                                                                    Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                                       Mstsclib_tlb::RemoteProgramResult lError, 
                                                                       VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                          unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                         Mstsclib_tlb::wireHWND hwnd, 
                                                                         Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, 
                                                                        long bandwidth, long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3NotSafeForScripting<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                                     VARIANT_BOOL networkAvailable, 
                                                                     long attemptCount, 
                                                                     long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient3
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient3 : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                                 Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                    Mstsclib_tlb::RemoteProgramResult lError, 
                                                    VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                       unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                      Mstsclib_tlb::wireHWND hwnd, 
                                                      Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, 
                                                     long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                  VARIANT_BOOL networkAvailable, long attemptCount, 
                                                  long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient3a
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient3a : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                                  Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                     Mstsclib_tlb::RemoteProgramResult lError, 
                                                     VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                        unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                       Mstsclib_tlb::wireHWND hwnd, 
                                                       Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, 
                                                      long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient3a<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                   VARIANT_BOOL networkAvailable, long attemptCount, 
                                                   long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient4NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient4NotSafeForScripting : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, 
                                                                       VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnAutoReconnecting(long disconnectReason, 
                                                                    long attemptCount, 
                                                                    Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                                       Mstsclib_tlb::RemoteProgramResult lError, 
                                                                       VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                          unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                         Mstsclib_tlb::wireHWND hwnd, 
                                                                         Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, 
                                                                        long bandwidth, long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4NotSafeForScripting<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                                     VARIANT_BOOL networkAvailable, 
                                                                     long attemptCount, 
                                                                     long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient4
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient4 : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                                 Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                    Mstsclib_tlb::RemoteProgramResult lError, 
                                                    VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                       unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                      Mstsclib_tlb::wireHWND hwnd, 
                                                      Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, 
                                                     long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                  VARIANT_BOOL networkAvailable, long attemptCount, 
                                                  long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient4a
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient4a : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                                  Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                     Mstsclib_tlb::RemoteProgramResult lError, 
                                                     VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                        unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                       Mstsclib_tlb::wireHWND hwnd, 
                                                       Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, 
                                                      long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient4a<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                   VARIANT_BOOL networkAvailable, long attemptCount, 
                                                   long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient5NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient5NotSafeForScripting : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, 
                                                                       VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnAutoReconnecting(long disconnectReason, 
                                                                    long attemptCount, 
                                                                    Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                                       Mstsclib_tlb::RemoteProgramResult lError, 
                                                                       VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                          unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                         Mstsclib_tlb::wireHWND hwnd, 
                                                                         Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, 
                                                                        long bandwidth, long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5NotSafeForScripting<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                                     VARIANT_BOOL networkAvailable, 
                                                                     long attemptCount, 
                                                                     long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient5
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient5 : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                                 Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                    Mstsclib_tlb::RemoteProgramResult lError, 
                                                    VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                       unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                      Mstsclib_tlb::wireHWND hwnd, 
                                                      Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, 
                                                     long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient5<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                  VARIANT_BOOL networkAvailable, long attemptCount, 
                                                  long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient6NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient6NotSafeForScripting : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, 
                                                                       VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnAutoReconnecting(long disconnectReason, 
                                                                    long attemptCount, 
                                                                    Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                                       Mstsclib_tlb::RemoteProgramResult lError, 
                                                                       VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                          unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                         Mstsclib_tlb::wireHWND hwnd, 
                                                                         Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, 
                                                                        long bandwidth, long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6NotSafeForScripting<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                                     VARIANT_BOOL networkAvailable, 
                                                                     long attemptCount, 
                                                                     long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient6
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient6 : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                                 Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                    Mstsclib_tlb::RemoteProgramResult lError, 
                                                    VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                       unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                      Mstsclib_tlb::wireHWND hwnd, 
                                                      Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, 
                                                     long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient6<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                  VARIANT_BOOL networkAvailable, long attemptCount, 
                                                  long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient7NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient7NotSafeForScripting : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, 
                                                                       VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnAutoReconnecting(long disconnectReason, 
                                                                    long attemptCount, 
                                                                    Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                                       Mstsclib_tlb::RemoteProgramResult lError, 
                                                                       VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                          unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                         Mstsclib_tlb::wireHWND hwnd, 
                                                                         Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, 
                                                                        long bandwidth, long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7NotSafeForScripting<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                                     VARIANT_BOOL networkAvailable, 
                                                                     long attemptCount, 
                                                                     long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient7
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient7 : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                                 Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                    Mstsclib_tlb::RemoteProgramResult lError, 
                                                    VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                       unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                      Mstsclib_tlb::wireHWND hwnd, 
                                                      Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, 
                                                     long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient7<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                  VARIANT_BOOL networkAvailable, long attemptCount, 
                                                  long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient8NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient8NotSafeForScripting : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, 
                                                                       VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnAutoReconnecting(long disconnectReason, 
                                                                    long attemptCount, 
                                                                    Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                                       Mstsclib_tlb::RemoteProgramResult lError, 
                                                                       VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                          unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                         Mstsclib_tlb::wireHWND hwnd, 
                                                                         Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, 
                                                                        long bandwidth, long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8NotSafeForScripting<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                                     VARIANT_BOOL networkAvailable, 
                                                                     long attemptCount, 
                                                                     long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient8
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient8 : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                                 Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                    Mstsclib_tlb::RemoteProgramResult lError, 
                                                    VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                       unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                      Mstsclib_tlb::wireHWND hwnd, 
                                                      Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, 
                                                     long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient8<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                  VARIANT_BOOL networkAvailable, long attemptCount, 
                                                  long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient9NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient9NotSafeForScripting : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, 
                                                                       VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnAutoReconnecting(long disconnectReason, 
                                                                    long attemptCount, 
                                                                    Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                                       Mstsclib_tlb::RemoteProgramResult lError, 
                                                                       VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                          unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                         Mstsclib_tlb::wireHWND hwnd, 
                                                                         Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, 
                                                                        long bandwidth, long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9NotSafeForScripting<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                                     VARIANT_BOOL networkAvailable, 
                                                                     long attemptCount, 
                                                                     long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient9
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient9 : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                                 Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                    Mstsclib_tlb::RemoteProgramResult lError, 
                                                    VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                       unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                      Mstsclib_tlb::wireHWND hwnd, 
                                                      Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, 
                                                     long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient9<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                  VARIANT_BOOL networkAvailable, long attemptCount, 
                                                  long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient10NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient10NotSafeForScripting : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, 
                                                                        VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnAutoReconnecting(long disconnectReason, 
                                                                     long attemptCount, 
                                                                     Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                                        Mstsclib_tlb::RemoteProgramResult lError, 
                                                                        VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                           unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                          Mstsclib_tlb::wireHWND hwnd, 
                                                                          Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, 
                                                                         long bandwidth, long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10NotSafeForScripting<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                                      VARIANT_BOOL networkAvailable, 
                                                                      long attemptCount, 
                                                                      long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient10
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient10 : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                                  Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                     Mstsclib_tlb::RemoteProgramResult lError, 
                                                     VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                        unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                       Mstsclib_tlb::wireHWND hwnd, 
                                                       Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, 
                                                      long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient10<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                   VARIANT_BOOL networkAvailable, long attemptCount, 
                                                   long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient11NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient11NotSafeForScripting : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, 
                                                                        VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnAutoReconnecting(long disconnectReason, 
                                                                     long attemptCount, 
                                                                     Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                                        Mstsclib_tlb::RemoteProgramResult lError, 
                                                                        VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                           unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                                          Mstsclib_tlb::wireHWND hwnd, 
                                                                          Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, 
                                                                         long bandwidth, long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11NotSafeForScripting<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                                      VARIANT_BOOL networkAvailable, 
                                                                      long attemptCount, 
                                                                      long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient11
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <class T>
class TEvents_MsRdpClient11 : public IConnectionPointImpl<T,
                                                 &DIID_IMsTscAxEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginComplete(void);
  void            Fire_OnDisconnected(long discReason);
  void            Fire_OnEnterFullScreenMode(void);
  void            Fire_OnLeaveFullScreenMode(void);
  void            Fire_OnChannelReceivedData(BSTR chanName, BSTR data);
  void            Fire_OnRequestGoFullScreen(void);
  void            Fire_OnRequestLeaveFullScreen(void);
  void            Fire_OnFatalError(long errorCode);
  void            Fire_OnWarning(long warningCode);
  void            Fire_OnRemoteDesktopSizeChange(long width, long height);
  void            Fire_OnIdleTimeoutNotification(void);
  void            Fire_OnRequestContainerMinimize(void);
  void            Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose);
  void            Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon);
  void            Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                          Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus);
  void            Fire_OnAuthenticationWarningDisplayed(void);
  void            Fire_OnAuthenticationWarningDismissed(void);
  void            Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                             Mstsclib_tlb::RemoteProgramResult lError, 
                                             VARIANT_BOOL vbIsExecutable);
  void            Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                unsigned_long uDisplayInformation);
  void            Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                               Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute);
  void            Fire_OnLogonError(long lError);
  void            Fire_OnFocusReleased(int iDirection);
  void            Fire_OnUserNameAcquired(BSTR bstrUserName);
  void            Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative);
  void            Fire_OnServiceMessageReceived(BSTR serviceMessage);
  void            Fire_OnConnectionBarPullDown(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnDevicesButtonPressed(void);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                           long attemptCount, long maxAttemptCount);
protected:
  IMsTscAxEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnLoginComplete(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginComplete();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnDisconnected(long discReason)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(discReason);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnEnterFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnEnterFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnLeaveFullScreenMode(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLeaveFullScreenMode();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnChannelReceivedData(chanName, data);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnRequestGoFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestGoFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnRequestLeaveFullScreen(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestLeaveFullScreen();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnFatalError(long errorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFatalError(errorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnWarning(long warningCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWarning(warningCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnRemoteDesktopSizeChange(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChange(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnIdleTimeoutNotification(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnIdleTimeoutNotification();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnRequestContainerMinimize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRequestContainerMinimize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConfirmClose(pfAllowClose);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                                                  Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnAuthenticationWarningDisplayed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDisplayed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnAuthenticationWarningDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAuthenticationWarningDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, 
                                                     Mstsclib_tlb::RemoteProgramResult lError, 
                                                     VARIANT_BOOL vbIsExecutable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, 
                                                        unsigned_long uDisplayInformation)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, 
                                                       Mstsclib_tlb::wireHWND hwnd, 
                                                       Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnLogonError(long lError)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLogonError(lError);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnFocusReleased(int iDirection)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnFocusReleased(iDirection);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnUserNameAcquired(BSTR bstrUserName)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnUserNameAcquired(bstrUserName);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseInputModeChanged(fMouseModeRelative);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnServiceMessageReceived(BSTR serviceMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnServiceMessageReceived(serviceMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnConnectionBarPullDown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnectionBarPullDown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, 
                                                      long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnDevicesButtonPressed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDevicesButtonPressed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MsRdpClient11<T>::Fire_OnAutoReconnecting2(long disconnectReason, 
                                                   VARIANT_BOOL networkAvailable, long attemptCount, 
                                                   long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                         maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : RemoteDesktopClient
// Event Interface : IRemoteDesktopClientEvents
// *********************************************************************//
template <class T>
class TEvents_RemoteDesktopClient : public IConnectionPointImpl<T,
                                                 &DIID_IRemoteDesktopClientEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnConnecting(void);
  void            Fire_OnConnected(void);
  void            Fire_OnLoginCompleted(void);
  void            Fire_OnDisconnected(long disconnectReason, long ExtendedDisconnectReason, 
                                      BSTR disconnectErrorMessage);
  void            Fire_OnStatusChanged(long statusCode, BSTR statusMessage);
  void            Fire_OnAutoReconnecting(long disconnectReason, long ExtendedDisconnectReason, 
                                          BSTR disconnectErrorMessage, VARIANT_BOOL networkAvailable, 
                                          long attemptCount, long maxAttemptCount);
  void            Fire_OnAutoReconnected(void);
  void            Fire_OnDialogDisplaying(void);
  void            Fire_OnDialogDismissed(void);
  void            Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt);
  void            Fire_OnAdminMessageReceived(BSTR adminMessage);
  void            Fire_OnKeyCombinationPressed(long keyCombination);
  void            Fire_OnRemoteDesktopSizeChanged(long width, long height);
  void            Fire_OnTouchPointerCursorMoved(long x, long y);
protected:
  IRemoteDesktopClientEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_RemoteDesktopClient<T>::Fire_OnConnecting(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnecting();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RemoteDesktopClient<T>::Fire_OnConnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RemoteDesktopClient<T>::Fire_OnLoginCompleted(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnLoginCompleted();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RemoteDesktopClient<T>::Fire_OnDisconnected(long disconnectReason, 
                                                    long ExtendedDisconnectReason, 
                                                    BSTR disconnectErrorMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDisconnected(disconnectReason, ExtendedDisconnectReason, 
                                    disconnectErrorMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RemoteDesktopClient<T>::Fire_OnStatusChanged(long statusCode, BSTR statusMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnStatusChanged(statusCode, statusMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RemoteDesktopClient<T>::Fire_OnAutoReconnecting(long disconnectReason, 
                                                        long ExtendedDisconnectReason, 
                                                        BSTR disconnectErrorMessage, 
                                                        VARIANT_BOOL networkAvailable, 
                                                        long attemptCount, long maxAttemptCount)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnecting(disconnectReason, ExtendedDisconnectReason, 
                                        disconnectErrorMessage, networkAvailable, attemptCount, 
                                        maxAttemptCount);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RemoteDesktopClient<T>::Fire_OnAutoReconnected(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAutoReconnected();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RemoteDesktopClient<T>::Fire_OnDialogDisplaying(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDialogDisplaying();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RemoteDesktopClient<T>::Fire_OnDialogDismissed(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDialogDismissed();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RemoteDesktopClient<T>::Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, 
                                                            long bandwidth, long rtt)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RemoteDesktopClient<T>::Fire_OnAdminMessageReceived(BSTR adminMessage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAdminMessageReceived(adminMessage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RemoteDesktopClient<T>::Fire_OnKeyCombinationPressed(long keyCombination)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyCombinationPressed(keyCombination);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RemoteDesktopClient<T>::Fire_OnRemoteDesktopSizeChanged(long width, long height)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoteDesktopSizeChanged(width, height);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RemoteDesktopClient<T>::Fire_OnTouchPointerCursorMoved(long x, long y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnTouchPointerCursorMoved(x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif    //   __TLB_NO_EVENT_WRAPPERS

#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_DAX)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsTscAxNotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsTscAxNotSafeForScripting_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsTscAx
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsTscAx_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnConnecting();
      }
    }
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnConnected();
      }
    }
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnLoginComplete();
      }
    }
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDisconnected(discReason);
      }
    }
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnterFullScreenMode();
      }
    }
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnLeaveFullScreenMode();
      }
    }
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChannelReceivedData(chanName, data);
      }
    }
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnRequestGoFullScreen();
      }
    }
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnRequestLeaveFullScreen();
      }
    }
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnFatalError(errorCode);
      }
    }
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnWarning(warningCode);
      }
    }
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnRemoteDesktopSizeChange(width, height);
      }
    }
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnIdleTimeoutNotification();
      }
    }
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnRequestContainerMinimize();
      }
    }
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnConfirmClose(pfAllowClose);
      }
    }
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      }
    }
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      }
    }
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnAuthenticationWarningDisplayed();
      }
    }
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnAuthenticationWarningDismissed();
      }
    }
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      }
    }
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      }
    }
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      }
    }
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnLogonError(lError);
      }
    }
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnFocusReleased(iDirection);
      }
    }
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUserNameAcquired(bstrUserName);
      }
    }
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
      }
    }
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnServiceMessageReceived(serviceMessage);
      }
    }
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnConnectionBarPullDown();
      }
    }
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      }
    }
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDevicesButtonPressed();
      }
    }
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnAutoReconnected();
      }
    }
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                          maxAttemptCount);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClientNotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClientNotSafeForScripting_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnConnecting();
      }
    }
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnConnected();
      }
    }
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnLoginComplete();
      }
    }
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDisconnected(discReason);
      }
    }
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnEnterFullScreenMode();
      }
    }
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnLeaveFullScreenMode();
      }
    }
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnChannelReceivedData(chanName, data);
      }
    }
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnRequestGoFullScreen();
      }
    }
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnRequestLeaveFullScreen();
      }
    }
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnFatalError(errorCode);
      }
    }
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnWarning(warningCode);
      }
    }
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnRemoteDesktopSizeChange(width, height);
      }
    }
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnIdleTimeoutNotification();
      }
    }
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnRequestContainerMinimize();
      }
    }
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnConfirmClose(pfAllowClose);
      }
    }
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
      }
    }
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
      }
    }
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnAuthenticationWarningDisplayed();
      }
    }
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnAuthenticationWarningDismissed();
      }
    }
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
      }
    }
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
      }
    }
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
      }
    }
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnLogonError(lError);
      }
    }
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnFocusReleased(iDirection);
      }
    }
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnUserNameAcquired(bstrUserName);
      }
    }
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
      }
    }
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnServiceMessageReceived(serviceMessage);
      }
    }
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnConnectionBarPullDown();
      }
    }
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
      }
    }
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnDevicesButtonPressed();
      }
    }
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnAutoReconnected();
      }
    }
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    TConnectionPointSinkList<T> cpsl(pClass->ConnectionPoint);
    if (cpsl.HasConnectionPoint()) {
      for (int i=0; i<cpsl.GetCount(); i++) {
        _di_IInterface punk;
        if (cpsl.GetSink(i, punk) && (dispInvoker.Bind(punk)==S_OK))
          dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                          maxAttemptCount);
      }
    }
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient2NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient2NotSafeForScripting_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient2
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient2_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient2a
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient2a_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient3NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient3NotSafeForScripting_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient3
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient3_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient3a
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient3a_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient4NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient4NotSafeForScripting_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient4
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient4_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient4a
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient4a_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient5NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient5NotSafeForScripting_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient5
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient5_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient6NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient6NotSafeForScripting_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient6
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient6_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient7NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient7NotSafeForScripting_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient7
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient7_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient8NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient8NotSafeForScripting_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient8
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient8_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient9NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient9NotSafeForScripting_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient9
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient9_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient10NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient10NotSafeForScripting_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient10
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient10_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient11NotSafeForScripting
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient11NotSafeForScripting_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MsRdpClient11
// Event Interface : IMsTscAxEvents
// *********************************************************************//
template <typename T>
class IMsRdpClient11_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginComplete(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginComplete();
  }

  void Fire_OnDisconnected(long discReason)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(discReason);
  }

  void Fire_OnEnterFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnEnterFullScreenMode();
  }

  void Fire_OnLeaveFullScreenMode(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLeaveFullScreenMode();
  }

  void Fire_OnChannelReceivedData(BSTR chanName, BSTR data)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnChannelReceivedData(chanName, data);
  }

  void Fire_OnRequestGoFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestGoFullScreen();
  }

  void Fire_OnRequestLeaveFullScreen(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestLeaveFullScreen();
  }

  void Fire_OnFatalError(long errorCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFatalError(errorCode);
  }

  void Fire_OnWarning(long warningCode)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnWarning(warningCode);
  }

  void Fire_OnRemoteDesktopSizeChange(long width, long height)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChange(width, height);
  }

  void Fire_OnIdleTimeoutNotification(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnIdleTimeoutNotification();
  }

  void Fire_OnRequestContainerMinimize(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRequestContainerMinimize();
  }

  void Fire_OnConfirmClose(VARIANT_BOOL* pfAllowClose)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConfirmClose(pfAllowClose);
  }

  void Fire_OnReceivedTSPublicKey(BSTR publicKey, VARIANT_BOOL* pfContinueLogon)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnReceivedTSPublicKey(publicKey, pfContinueLogon);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long attemptCount, 
                               Mstsclib_tlb::AutoReconnectContinueState* pArcContinueStatus)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, attemptCount, pArcContinueStatus);
  }

  void Fire_OnAuthenticationWarningDisplayed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDisplayed();
  }

  void Fire_OnAuthenticationWarningDismissed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAuthenticationWarningDismissed();
  }

  void Fire_OnRemoteProgramResult(BSTR bstrRemoteProgram, Mstsclib_tlb::RemoteProgramResult lError, 
                                  VARIANT_BOOL vbIsExecutable)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramResult(bstrRemoteProgram, lError, vbIsExecutable);
  }

  void Fire_OnRemoteProgramDisplayed(VARIANT_BOOL vbDisplayed, unsigned_long uDisplayInformation)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteProgramDisplayed(vbDisplayed, uDisplayInformation);
  }

  void Fire_OnRemoteWindowDisplayed(VARIANT_BOOL vbDisplayed, Mstsclib_tlb::wireHWND hwnd, 
                                    Mstsclib_tlb::RemoteWindowDisplayedAttribute windowAttribute)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteWindowDisplayed(vbDisplayed, hwnd, windowAttribute);
  }

  void Fire_OnLogonError(long lError)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLogonError(lError);
  }

  void Fire_OnFocusReleased(int iDirection)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnFocusReleased(iDirection);
  }

  void Fire_OnUserNameAcquired(BSTR bstrUserName)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnUserNameAcquired(bstrUserName);
  }

  void Fire_OnMouseInputModeChanged(VARIANT_BOOL fMouseModeRelative)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMouseInputModeChanged(fMouseModeRelative);
  }

  void Fire_OnServiceMessageReceived(BSTR serviceMessage)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnServiceMessageReceived(serviceMessage);
  }

  void Fire_OnConnectionBarPullDown(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnectionBarPullDown();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnDevicesButtonPressed(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDevicesButtonPressed();
  }

  void Fire_OnAutoReconnected(void)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnAutoReconnecting2(long disconnectReason, VARIANT_BOOL networkAvailable, 
                                long attemptCount, long maxAttemptCount)
  {
    IMsTscAxEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting2(disconnectReason, networkAvailable, attemptCount, 
                                      maxAttemptCount);
  }

};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : RemoteDesktopClient
// Event Interface : IRemoteDesktopClientEvents
// *********************************************************************//
template <typename T>
class IRemoteDesktopClient_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnConnecting(void)
  {
    IRemoteDesktopClientEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnecting();
  }

  void Fire_OnConnected(void)
  {
    IRemoteDesktopClientEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConnected();
  }

  void Fire_OnLoginCompleted(void)
  {
    IRemoteDesktopClientEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnLoginCompleted();
  }

  void Fire_OnDisconnected(long disconnectReason, long ExtendedDisconnectReason, 
                           BSTR disconnectErrorMessage)
  {
    IRemoteDesktopClientEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDisconnected(disconnectReason, ExtendedDisconnectReason, disconnectErrorMessage);
  }

  void Fire_OnStatusChanged(long statusCode, BSTR statusMessage)
  {
    IRemoteDesktopClientEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnStatusChanged(statusCode, statusMessage);
  }

  void Fire_OnAutoReconnecting(long disconnectReason, long ExtendedDisconnectReason, 
                               BSTR disconnectErrorMessage, VARIANT_BOOL networkAvailable, 
                               long attemptCount, long maxAttemptCount)
  {
    IRemoteDesktopClientEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnecting(disconnectReason, ExtendedDisconnectReason, 
                                     disconnectErrorMessage, networkAvailable, attemptCount, 
                                     maxAttemptCount);
  }

  void Fire_OnAutoReconnected(void)
  {
    IRemoteDesktopClientEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAutoReconnected();
  }

  void Fire_OnDialogDisplaying(void)
  {
    IRemoteDesktopClientEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDialogDisplaying();
  }

  void Fire_OnDialogDismissed(void)
  {
    IRemoteDesktopClientEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDialogDismissed();
  }

  void Fire_OnNetworkStatusChanged(unsigned_long qualityLevel, long bandwidth, long rtt)
  {
    IRemoteDesktopClientEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnNetworkStatusChanged(qualityLevel, bandwidth, rtt);
  }

  void Fire_OnAdminMessageReceived(BSTR adminMessage)
  {
    IRemoteDesktopClientEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAdminMessageReceived(adminMessage);
  }

  void Fire_OnKeyCombinationPressed(long keyCombination)
  {
    IRemoteDesktopClientEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnKeyCombinationPressed(keyCombination);
  }

  void Fire_OnRemoteDesktopSizeChanged(long width, long height)
  {
    IRemoteDesktopClientEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnRemoteDesktopSizeChanged(width, height);
  }

  void Fire_OnTouchPointerCursorMoved(long x, long y)
  {
    IRemoteDesktopClientEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnTouchPointerCursorMoved(x, y);
  }

};

#endif    //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Mstsclib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Mstsclib_tlb;
#endif

#pragma pack(pop)
#pragma option pop

#endif // MSTSCLib_TLBH
